<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>松鼠小筑</title>
  
  <subtitle>学习笔记</subtitle>
  <link href="http://www.zhaoxuanlang.cn/atom.xml" rel="self"/>
  
  <link href="http://www.zhaoxuanlang.cn/"/>
  <updated>2022-01-04T05:50:12.676Z</updated>
  <id>http://www.zhaoxuanlang.cn/</id>
  
  <author>
    <name>Xuanlang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在Mac使用gnupg加密git</title>
    <link href="http://www.zhaoxuanlang.cn/2022/01/04/%E5%9C%A8Mac%E4%BD%BF%E7%94%A8gnupg%E5%8A%A0%E5%AF%86git/"/>
    <id>http://www.zhaoxuanlang.cn/2022/01/04/%E5%9C%A8Mac%E4%BD%BF%E7%94%A8gnupg%E5%8A%A0%E5%AF%86git/</id>
    <published>2022-01-04T05:18:13.000Z</published>
    <updated>2022-01-04T05:50:12.676Z</updated>
    
    <content type="html"><![CDATA[<p>让你的git提交也能拥有酷炫的认证标志</p><span id="more"></span><h2 id="生成gpg密码并测试可以使用"><a href="#生成gpg密码并测试可以使用" class="headerlink" title="生成gpg密码并测试可以使用"></a>生成gpg密码并测试可以使用</h2><p>首先需要下载安装gpg</p><p><code>brew install gpg</code></p><p>安装好之后看一眼有没有pinentry <code>pinentry -h</code></p><p>有的话用<code>which pinentry</code>查找一下在哪，没有的话使用<code>brew install pinentry</code>安装</p><p>找到目录后使用<code>vim ~/.gnupg/gpg-agent.conf</code> 添加一行<code> pinentry-program /usr/local/bin/pinentry</code>这里写你自己的路径</p><p>然后使用<code>gpg --full-generate-key</code>生成，跟着指引走即可，注意一点，邮箱需要和github里添加的一样</p><p>然后使用<code>echo "test"|gpg --clearsign</code>测试一下能不能用，在这一步可能会报错</p><blockquote><p>gpg: 签名时失败： Inappropriate ioctl for device<br>gpg: [stdin]: clear-sign failed: Inappropriate ioctl for device</p></blockquote><p>解决方案：编辑~/.gnupg目录下的gpg.conf和gpg-agent.conf两个文件</p><p>gpg.conf</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span>-<span class="title">agent</span></span><br><span class="line"><span class="title">pinentry</span>-<span class="title">mode</span> <span class="title">loopback</span></span><br></pre></td></tr></tbody></table></figure><p>gpg-agent.conf</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allow-loopback-pinentry</span><br></pre></td></tr></tbody></table></figure><p>更改完后使用<code>gpgconf --kill gpg-agent</code>重启gpg，然后再尝试，此时应该可以生成密码了</p><h2 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h2><p>使用<code>gpg --list-secret-keys --keyid-format=long</code>查看当前的秘钥</p><blockquote><p>/Users/zxl/.gnupg/pubring.kbx</p><p>sec   rsa3072/89E3C55059BE3D97 2022-01-04 [SC]<br>      CE52DE13A3615D3687F9C82389E3C55059BE3D97<br>uid                   [ 绝对 ] Zhaoxuanlang (It’s me!) <a href="mailto:1982606762@qq.com">1982606762@qq.com</a><br>ssb   rsa3072/1CF09AC8CF982194 2022-01-04 [E]</p></blockquote><p>这里你密钥的ID是89E3C55059BE3D97</p><p>然后使用<code>gpg --armor --export 89E3C55059BE3D97</code>查看公钥，复制所有包括BEGIN和END的内容</p><p>进入github页面-settings-SSH-新增GPG，复制进去即可</p><p>然后在commit的时候使用<code>git commit -S -m "xxxx"</code>来加密本次提交，push之后就可以见到<img src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20220104122352299.png" alt="image-20220104122352299"></p><p>防止每次都加-S太麻烦可以使用<code>git config --global commit.gpgsign true</code>来默认使用加密提交</p><p>此外，还可以使用<code>gpg --delete-secret-and-public-key your@email.addr</code>来删除已生成的本地密钥</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/qq_33154343/article/details/106030946">https://blog.csdn.net/qq_33154343/article/details/106030946</a></p><p><a href="https://superuser.com/questions/1628782/gpg-signing-failed-no-pinentry">https://superuser.com/questions/1628782/gpg-signing-failed-no-pinentry</a></p><p><a href="https://docs.github.com/cn/authentication/managing-commit-signature-verification/telling-git-about-your-signing-key">https://docs.github.com/cn/authentication/managing-commit-signature-verification/telling-git-about-your-signing-key</a></p><p><a href="https://frostming.com/2019/11-25/git-commit-sign/">https://frostming.com/2019/11-25/git-commit-sign/</a></p><p><a href="https://blog.chaos.run/dreams/using-gpg/">https://blog.chaos.run/dreams/using-gpg/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;让你的git提交也能拥有酷炫的认证标志&lt;/p&gt;</summary>
    
    
    
    <category term="杂" scheme="http://www.zhaoxuanlang.cn/categories/%E6%9D%82/"/>
    
    
  </entry>
  
  <entry>
    <title>swift学习</title>
    <link href="http://www.zhaoxuanlang.cn/2021/12/03/swift%E5%AD%A6%E4%B9%A0/"/>
    <id>http://www.zhaoxuanlang.cn/2021/12/03/swift%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-12-03T12:50:14.000Z</published>
    <updated>2022-01-03T09:15:39.875Z</updated>
    
    <content type="html"><![CDATA[<p>udemy <a href="https://www.udemy.com/course/ios-13-app-development-bootcamp/">iOS &amp; Swift - The Complete iOS App Development Bootcamp</a> 学习笔记</p><span id="more"></span><h1 id="使用xcode"><a href="#使用xcode" class="headerlink" title="使用xcode"></a>使用xcode</h1><p>在view中使用上方的加号可以添加元素，点击元素在右侧可以修改属性</p><p>使用assistant分屏左侧view右侧controller的时候点control并将元素拖到右边可以创建链接，按钮需要放到最下边并使用UIButton</p><p><img src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20211203214120296.png" alt="image-20211203214120296"></p><blockquote><p>control+I自动格式化</p><p>cmd+shift+B分析代码</p></blockquote><h2 id="在storyboard中修改按钮圆角"><a href="#在storyboard中修改按钮圆角" class="headerlink" title="在storyboard中修改按钮圆角"></a>在storyboard中修改按钮圆角</h2><p><img src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20211206191909648.png" alt="image-20211206191909648"></p><p>在这里新增<code> layer.cornerRadius</code> 即可</p><h2 id="可视化选择UIColor和Img"><a href="#可视化选择UIColor和Img" class="headerlink" title="可视化选择UIColor和Img"></a>可视化选择UIColor和Img</h2><p>Xcode13之后变成了<code>#colorLiteral()</code> 和 <code>#imgLiteral()</code> 来快速选择</p><p>Xcode13之前可以使用 <code>color literal</code>来自动补全</p><h2 id="使用自带图形SFSymbol"><a href="#使用自带图形SFSymbol" class="headerlink" title="使用自带图形SFSymbol"></a>使用自带图形SFSymbol</h2><p>点imageview，右边image下拉菜单找或者输入名字</p><h2 id="Dark-Mode"><a href="#Dark-Mode" class="headerlink" title="Dark Mode"></a>Dark Mode</h2><p>将颜色设置成label或者Systemcolor就可以随系统变化</p><p>自定义颜色：</p><ol><li>在Assets.xcassets里左下角点加号新增一个color set，然后分别自定义各个颜色</li></ol><p>自定义图片：</p><p><img src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20211220185034330.png" alt="image-20211220185034330"></p><h2 id="分割线和自定义快捷输入"><a href="#分割线和自定义快捷输入" class="headerlink" title="分割线和自定义快捷输入"></a>分割线和自定义快捷输入</h2><p>分割线是<code>//MARK: - </code></p><p>选中函数右键，create code snippet可以新建快捷输入    </p><h1 id="Swift基础"><a href="#Swift基础" class="headerlink" title="Swift基础"></a>Swift基础</h1><p>用var声明变量，用let声明常量。</p><p>获取随机数：<br>Int.random(in:begin…end)<br>Int.random(in:begin..&lt;end)不包含end<br>Float.random(in:begin…end)获取浮点随机数</p><p>arr.shuffle()可以将数组打乱顺序</p><p>字符串可以直接用加号连接</p><h2 id="loop循环建议使用"><a href="#loop循环建议使用" class="headerlink" title="loop循环建议使用"></a>loop循环建议使用</h2><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">6</span>{</span><br><span class="line">  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> a <span class="operator">==</span> <span class="number">1</span>{</span><br><span class="line">  xxx</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">  xxx</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h2><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num <span class="operator">=</span> <span class="type">Int</span>.random(in: <span class="number">0</span><span class="operator">...</span><span class="number">100</span>)</span><br><span class="line"><span class="keyword">switch</span> num {</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"hello!"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="Swift-range"><a href="#Swift-range" class="headerlink" title="Swift range"></a>Swift range</h2><blockquote><p>a…b closed Range</p><p>a..&lt;b half open Range</p><p>…b One sided Range</p></blockquote><h2 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h2><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dic <span class="operator">=</span> [:]</span><br><span class="line"><span class="keyword">let</span> dic : [<span class="type">String</span>:<span class="type">Int</span>] <span class="operator">=</span> [<span class="string">"aaa"</span>:<span class="number">123</span>]</span><br></pre></td></tr></tbody></table></figure><h2 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h2><p>一个变量如果可能是nil就是一个optional变量，如果用到某个变量，他有可能是nil，并且是nil的时候会崩溃，就需要使用optional变量</p><blockquote><p>string   普通string<br>String? optional string</p></blockquote><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name : string<span class="operator">?</span> <span class="operator">=</span> <span class="literal">nil</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h2><p>包含property 和method¡</p><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStructure</span></span>{</span><br><span class="line">  <span class="keyword">let</span> name : <span class="type">String</span></span><br><span class="line">  <span class="keyword">var</span> p : [<span class="type">String</span>]</span><br><span class="line">  <span class="function"><span class="keyword">init</span>(<span class="params">name</span>:<span class="type">String</span>,<span class="params">p</span>:[<span class="type">String</span>])</span>{</span><br><span class="line">    <span class="keyword">self</span>.name <span class="operator">=</span> name</span><br><span class="line">    <span class="keyword">self</span>.p <span class="operator">=</span> p</span><br><span class="line">}</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">hello</span>()</span>{</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"hello"</span>)</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> s1 <span class="operator">=</span> <span class="type">MyStructure</span>()</span><br><span class="line"><span class="built_in">print</span>(s1.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exercise</span>()</span> {</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">User</span></span>{</span><br><span class="line">        <span class="keyword">let</span> name : <span class="type">String</span></span><br><span class="line">        <span class="keyword">var</span> email : <span class="type">String</span>?</span><br><span class="line">        <span class="keyword">var</span> followers : <span class="type">Int</span></span><br><span class="line">        <span class="keyword">var</span> isActive : <span class="type">Bool</span></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">logStatus</span>()</span>{</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">self</span>.isActive {</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"<span class="subst">\(<span class="keyword">self</span>.name)</span> is working hard"</span>)</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"<span class="subst">\(<span class="keyword">self</span>.name)</span> has left the earth"</span>)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// Define the User struct here</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialise a User struct here</span></span><br><span class="line">    <span class="keyword">var</span> riuser <span class="operator">=</span> <span class="type">User</span>(name: <span class="string">"Richard"</span>, email: <span class="literal">nil</span>, followers: <span class="number">0</span>, isActive: <span class="literal">false</span>)</span><br><span class="line">    riuser.logStatus()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Diagnostic code - do not change this code</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">\n</span>Diagnostic code (i.e., Challenge Hint):"</span>)</span><br><span class="line">    <span class="keyword">var</span> musk <span class="operator">=</span> <span class="type">User</span>(name: <span class="string">"Elon"</span>, email: <span class="string">"elon@tesla.com"</span>, followers: <span class="number">2001</span>, isActive: <span class="literal">true</span>)</span><br><span class="line">    musk.logStatus()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Contacting <span class="subst">\(musk.name)</span> on <span class="subst">\(musk.email<span class="operator">!</span>)</span> ..."</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">\(musk.name)</span> has <span class="subst">\(musk.followers)</span> followers"</span>)</span><br><span class="line">    <span class="comment">// sometime later</span></span><br><span class="line">    musk.isActive <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    musk.logStatus()</span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="External-parameter"><a href="#External-parameter" class="headerlink" title="External parameter"></a>External parameter</h2><p>一个函数的参数可以有一个外部名字和一个内部名字，在设置了之后，使用函数就可以用外部名字传参，函数内再使用内部名字。或者直接不使用外部名字，使用函数时就不需要写参数名</p><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//with external parameter</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span>(<span class="params">answer</span> <span class="params">parameter</span>:<span class="type">String</span>)</span>{</span><br><span class="line">  <span class="built_in">print</span>(parameter)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">test(answer:<span class="string">"Hello"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//without external parameter</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test2</span>(<span class="keyword">_</span> <span class="params">parameter</span>:<span class="type">String</span>,<span class="keyword">_</span> <span class="params">para2</span>:<span class="type">Int</span>)</span>{</span><br><span class="line">    <span class="built_in">print</span>(parameter)</span><br><span class="line">    <span class="built_in">print</span>(para2)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">test2(<span class="string">"Hello"</span>,<span class="number">123</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isOdd</span>(<span class="keyword">_</span> <span class="params">n</span>:<span class="type">Int</span>)</span>-&gt; <span class="type">Bool</span>{</span><br><span class="line">    <span class="keyword">if</span> n<span class="operator">%</span><span class="number">2</span> <span class="operator">==</span> <span class="number">1</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="Mutable-可变性"><a href="#Mutable-可变性" class="headerlink" title="Mutable(可变性)"></a>Mutable(可变性)</h2><p>Swift中用var创建的变量都是mutable，用let创建的都是immutable。在修改immutable变量时需要打碎再重建</p><p>在struct内部修改struct变量值的时候需要给方法添加mutating属性</p><h2 id="保留小数位数"><a href="#保留小数位数" class="headerlink" title="保留小数位数"></a>保留小数位数</h2><p>从Double转到String时可使用<code> String("$.2f",num)</code>来保留两位小数</p><p>从Int转到String，不足两位前面补0：<code>String("%02d,num")</code> </p><h2 id="类和继承"><a href="#类和继承" class="headerlink" title="类和继承"></a>类和继承</h2><p>类的定义方式和结构体类似</p><p>继承：<code> class A : B{}</code></p><p>重载函数： <code>override func a(){}</code></p><p>使用父类的函数：<code>super.funca()</code></p><p> <img src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20211210111025022.png" alt="image-20211210111025022"></p><p>NSObject(NextObject)</p><h2 id="Struct和Class区别"><a href="#Struct和Class区别" class="headerlink" title="Struct和Class区别"></a>Struct和Class区别</h2><p>使用A=B的时候Class是浅拷贝，struct是深拷贝</p><p>struct使用值传递，class使用reference传递</p><p>apple建议一开始使用struct，有需要时再变成class</p><h2 id="Optional进阶用法"><a href="#Optional进阶用法" class="headerlink" title="Optional进阶用法"></a>Optional进阶用法</h2><ol><li><p>强制unwrap a = optional!</p></li><li><p>```swift<br>if optional != nil{<br>  print(safe!)<br>}else{</p><p>}</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. optional binding : </span><br><span class="line"></span><br><span class="line">   ```swift</span><br><span class="line">   if let safe = optional{</span><br><span class="line">     print(safe)</span><br><span class="line">   }else{</span><br><span class="line">     </span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure></li><li><p>Default:<br><code> optional ?? defaltvalue</code></p></li><li><p>Optional chaining<br><code> optional?.prop</code> </p></li></ol><h2 id="自动页面位置"><a href="#自动页面位置" class="headerlink" title="自动页面位置"></a>自动页面位置</h2><p>横屏时自动修正位置：</p><p>可以通过添加位置约束和对齐的方式</p><blockquote><ul><li>位置约束：距离最近的元素上下左右具体多少像素</li><li>对齐：水平轴或者垂直轴居中</li><li>也可以两者一起使用</li></ul></blockquote><p>添加位置约束：</p><p>选择需要修改的view，选中需要修改的元素，右下角添加约束</p><p><img src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20211204153117825.png" alt="image-20211204153117825"></p><p>把虚线点成实线后add。现在横屏后可能会局限在safe area中，就需要点constraint，具体修改四个方位的safe area改成superview即可</p><p>添加居中：</p><p><img src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20211204155250623.png" alt="image-20211204155250623"></p><p>两个一起使用可以制作出如图label效果，垂直轴居中并且离上边元素30px</p><p>居中时会让元素大小发生变化，可以使用constrain来设置大小</p><h3 id="用view控制位置"><a href="#用view控制位置" class="headerlink" title="用view控制位置"></a>用view控制位置</h3><p>对复杂元素定位时可以使用view，就是div的用处。选中需要在一起的元素点击这里可以放进一个view。</p><p><img src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20211204160340654.png" alt="image-20211204160340654"></p><p>Stackview可以把多个view堆叠。将多个view添加到一个stackview后可以调整边距，元素距离等。</p><blockquote><p>Bug:Stack view 的Alignment设置成vertical时会使按钮无法使用，需要设置成Fill</p></blockquote><h2 id="播放声音"><a href="#播放声音" class="headerlink" title="播放声音"></a>播放声音</h2><p>在遇到新模块的时候去google，模板：dosth+language+stackoverflow</p><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> AVFoundation</span><br><span class="line"><span class="keyword">var</span> player: <span class="type">AVAudioPlayer</span>?</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">playSound</span>(<span class="params">name</span>: <span class="type">String</span>)</span> {</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">Bundle</span>.main.url(forResource: name, withExtension: <span class="string">"mp3"</span>) <span class="keyword">else</span> { <span class="keyword">return</span> }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">do</span> {</span><br><span class="line">            <span class="keyword">try</span> <span class="type">AVAudioSession</span>.sharedInstance().setCategory(.playback, mode: .default)</span><br><span class="line">            <span class="keyword">try</span> <span class="type">AVAudioSession</span>.sharedInstance().setActive(<span class="literal">true</span>)</span><br><span class="line">            </span><br><span class="line">            player <span class="operator">=</span> <span class="keyword">try</span> <span class="type">AVAudioPlayer</span>(contentsOf: url, fileTypeHint: <span class="type">AVFileType</span>.mp3.rawValue)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> player <span class="operator">=</span> player <span class="keyword">else</span> { <span class="keyword">return</span> }</span><br><span class="line">            </span><br><span class="line">            player.play()</span><br><span class="line">            </span><br><span class="line">        } <span class="keyword">catch</span> <span class="keyword">let</span> error {</span><br><span class="line">            <span class="built_in">print</span>(error.localizedDescription)</span><br><span class="line">        }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="使用progressViewer"><a href="#使用progressViewer" class="headerlink" title="使用progressViewer"></a>使用progressViewer</h2><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">progressViewer.setProgress(<span class="number">0.0</span>,animated: <span class="literal">true</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timer <span class="operator">=</span> <span class="type">Timer</span>?</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">startTimer</span>(<span class="params">time</span>:<span class="type">Int</span>)</span> {</span><br><span class="line">        timer<span class="operator">?</span>.invalidate()</span><br><span class="line">        timer <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">        counter <span class="operator">=</span> time</span><br><span class="line">        timer <span class="operator">=</span> <span class="type">Timer</span>.scheduledTimer(timeInterval: <span class="number">1.0</span>, target: <span class="keyword">self</span>, selector: #selector(updateCounter), userInfo: <span class="literal">nil</span>, repeats: <span class="literal">true</span>)</span><br><span class="line">    }</span><br><span class="line"><span class="keyword">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">updateCounter</span>()</span> {</span><br><span class="line">        <span class="keyword">if</span> counter <span class="operator">&gt;</span> <span class="number">0</span> {</span><br><span class="line">            progressViewer.setProgress(<span class="type">Float</span>(times[hard]<span class="operator">!-</span>counter)<span class="operator">/</span><span class="type">Float</span>(times[hard]<span class="operator">!</span>), animated: <span class="literal">true</span>)</span><br><span class="line">            counter <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            playSound(name: <span class="string">"alarm_sound"</span>)</span><br><span class="line">            progressViewer.setProgress(<span class="number">1.0</span>, animated: <span class="literal">true</span>)</span><br><span class="line">            <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class="operator">+</span> <span class="number">3</span>) {</span><br><span class="line">                <span class="keyword">self</span>.progressViewer.setProgress(<span class="number">0.0</span>, animated: <span class="literal">true</span>)</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> timer <span class="operator">=</span> <span class="keyword">self</span>.timer {</span><br><span class="line">                timer.invalidate()</span><br><span class="line">                <span class="keyword">self</span>.timer <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>设计模式就是针对某一种问题的一个经过验证的解决方案</p><p>有很多设计模式</p><h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><p>Model-view-controller</p><p><img src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20211206165603374.png" alt="image-20211206165603374"></p><h3 id="Delegate"><a href="#Delegate" class="headerlink" title="Delegate"></a>Delegate</h3><p><img src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20211228193140941.png" alt="image-20211228193140941"></p><h2 id="使用代码新建view"><a href="#使用代码新建view" class="headerlink" title="使用代码新建view"></a>使用代码新建view</h2><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">secondViewController</span>: <span class="title">UIViewController</span> </span>{</span><br><span class="line">    <span class="keyword">var</span> bmi <span class="operator">=</span>  <span class="string">"0.0"</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span>()</span> {</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        view.backgroundColor <span class="operator">=</span> .red</span><br><span class="line">        <span class="keyword">let</span> label <span class="operator">=</span> <span class="type">UILabel</span>()</span><br><span class="line">        label.text <span class="operator">=</span> bmi</span><br><span class="line">        label.frame <span class="operator">=</span> <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">100</span>, height: <span class="number">50</span>)</span><br><span class="line">        label.backgroundColor <span class="operator">=</span> .green</span><br><span class="line">        view.addSubview(label)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="切换显示view"><a href="#切换显示view" class="headerlink" title="切换显示view"></a>切换显示view</h2><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vc2 <span class="operator">=</span> secondViewController()</span><br><span class="line">vc2.bmi <span class="operator">=</span> <span class="type">String</span>(format: <span class="string">"%.2f"</span>, bmi1)</span><br><span class="line"><span class="keyword">self</span>.present(vc2, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="创建segue"><a href="#创建segue" class="headerlink" title="创建segue"></a>创建segue</h2><p><img src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20211211172952388.png" alt="image-20211211172952388"></p><p>按住control拖到下边的</p><p>segue可以定义页面切换的动画</p><p>若要用segue从Acontroller切换到Bcontroller：</p><blockquote><p>需要在Axontroller中定义prepare函数来传输一些B必要的变量</p><p>A中使用<code>self.performSegue</code>切换.第一个是在storyboard设置的名称，第二个是self或别的类</p><p>B中使用 <code>dismiss</code> 来回去</p></blockquote><h2 id="protocol用法"><a href="#protocol用法" class="headerlink" title="protocol用法"></a>protocol用法</h2><p>protocol类似一种认证，其实就是虚类</p><p>内部类似虚类，只能定义函数名</p><p>用的时候需要定义函数</p><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">airplane</span>: <span class="title">canfly</span></span>{</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">fly</span>()</span>{</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"fly"</span>)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="使用api获得天气数据"><a href="#使用api获得天气数据" class="headerlink" title="使用api获得天气数据"></a>使用api获得天气数据</h2><p>在openweather注册账号，使用current来获取数据，还可以自定义一些显示特征</p><h2 id="使用swift进行url链接"><a href="#使用swift进行url链接" class="headerlink" title="使用swift进行url链接"></a>使用swift进行url链接</h2><ol><li>生成url</li><li>创建URLSession</li><li>给UrlSession一个任务</li><li>运行任务</li></ol><h2 id="用函数作为参数，匿名函数"><a href="#用函数作为参数，匿名函数" class="headerlink" title="用函数作为参数，匿名函数"></a>用函数作为参数，匿名函数</h2><p>函数作参数传入：</p><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calculate</span>(<span class="params">n1</span>:<span class="type">Int</span>,<span class="params">n2</span>:<span class="type">Int</span>,<span class="params">operation</span>:(<span class="type">Int</span>,<span class="type">Int</span>)-&gt;<span class="type">Int</span>)</span>-&gt;<span class="type">Int</span>{</span><br><span class="line">  <span class="keyword">return</span> operation(n1,n2)</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">plus</span>(<span class="params">n1</span>:<span class="type">Int</span>,<span class="params">n2</span>:<span class="type">Int</span>)</span>-&gt;<span class="type">Int</span>{</span><br><span class="line">  <span class="keyword">return</span> n1<span class="operator">+</span>n2</span><br><span class="line">}</span><br><span class="line">calculate(n1: <span class="number">2</span>, n2: <span class="number">3</span>, operation: plus(n1:n2:))</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>匿名函数：</p><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    (no1:<span class="type">Int</span>,no2:<span class="type">Int</span>)-&gt;<span class="type">Int</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> no1<span class="operator">+</span>no2</span><br><span class="line">  }</span><br><span class="line"><span class="comment">//编译器可以预判你要输出一些东西</span></span><br><span class="line">calculate(n1:<span class="number">2</span>,n2:<span class="number">3</span>,operation:{(no1,no2) <span class="keyword">in</span> </span><br><span class="line">                              no1<span class="operator">+</span>no2})</span><br><span class="line"><span class="comment">//$0代表第一个变量</span></span><br><span class="line">calculate(n1:<span class="number">2</span>,n2:<span class="number">3</span>,operation:{<span class="variable">$0</span><span class="operator">+</span><span class="variable">$1</span>})</span><br><span class="line">calculate(n1:<span class="number">2</span>,n2:<span class="number">3</span>){<span class="variable">$1</span><span class="operator">+</span><span class="variable">$2</span>}</span><br></pre></td></tr></tbody></table></figure><h2 id="Map函数"><a href="#Map函数" class="headerlink" title="Map函数"></a>Map函数</h2><p><code>array.map(func1)</code></p><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newarray <span class="operator">=</span> array.map{<span class="string">"<span class="subst">\(<span class="variable">$0</span>)</span>"</span>}</span><br><span class="line">array.map({(n1)<span class="keyword">in</span></span><br><span class="line">    n1<span class="operator">+</span><span class="number">1</span>})</span><br></pre></td></tr></tbody></table></figure><h2 id="Computed-property"><a href="#Computed-property" class="headerlink" title="Computed property"></a>Computed property</h2><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> prop:<span class="type">String</span>{</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"qwwe"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="DispatchQueue"><a href="#DispatchQueue" class="headerlink" title="DispatchQueue"></a>DispatchQueue</h2><p>在需要长时间进行的任务（如从网上寻找东西）的时候系统会让他在后台执行，因为如果让用户等的话就会看起来像是卡住了。但是如果在任务中需要更新前台的显示就需要修改更新的代码</p><p>把更新部分的代码用sync包裹起来</p><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DispatchQueue</span>.main.sync {</span><br><span class="line">            temperatureLabel.text <span class="operator">=</span> weather.temperatureString</span><br><span class="line">            conditionImageView.image <span class="operator">=</span> <span class="type">UIImage</span>(systemName: weather.conditionName)</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><h2 id="extension用法"><a href="#extension用法" class="headerlink" title="extension用法"></a>extension用法</h2><p>用于扩展某个类，新增函数</p><ol><li><p>扩展内建类</p><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Double</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">round</span>(<span class="params">to</span>:<span class="type">Int</span>)</span> -&gt; <span class="type">Double</span> {</span><br><span class="line">        <span class="keyword">let</span> q <span class="operator">=</span> pow(<span class="number">10</span>, <span class="type">Double</span>(to))</span><br><span class="line">        <span class="keyword">var</span> n <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">        n<span class="operator">=</span>n<span class="operator">*</span>q</span><br><span class="line">        n.round()</span><br><span class="line">        n <span class="operator">=</span> n<span class="operator">/</span>q</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> double <span class="operator">=</span> <span class="number">3.14159</span></span><br><span class="line">double.round(to:<span class="number">3</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><p>扩展protocol</p><p>如果某个protocol里的函数需要一个默认值可以使用extension来添加</p></li><li><p>简化代码。</p><p>如果一个类有很多继承关系，可以把每个继承写成一个扩展，扩展内部写和这个继承相关的函数</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;udemy &lt;a href=&quot;https://www.udemy.com/course/ios-13-app-development-bootcamp/&quot;&gt;iOS &amp;amp; Swift - The Complete iOS App Development Bootcamp&lt;/a&gt; 学习笔记&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>vue学习</title>
    <link href="http://www.zhaoxuanlang.cn/2021/11/05/vue%E5%AD%A6%E4%B9%A0/"/>
    <id>http://www.zhaoxuanlang.cn/2021/11/05/vue%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-11-05T12:36:24.000Z</published>
    <updated>2021-11-05T12:39:51.886Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="11月5日"><a href="#11月5日" class="headerlink" title="11月5日"></a>11月5日</h1><ul><li><p>v-for支持两个参数，第二个是当前项的索引，从0开始</p></li><li><p>V-bind:class后可以在某条件达成后获得某个类名</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in navList"</span> <span class="attr">:class</span>=<span class="string">"{active:index === activeNavIndex}"</span></span></span><br></pre></td></tr></tbody></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h1 id=&quot;11月5日&quot;&gt;&lt;a href=&quot;#11月5日&quot; class=&quot;headerlink&quot; title=&quot;11月5日&quot;&gt;&lt;/a&gt;11月5日&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;v-for支持两个参数，第二个是当前项的索引，从</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>浏览器解析url</title>
    <link href="http://www.zhaoxuanlang.cn/2021/10/12/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E6%9E%90url/"/>
    <id>http://www.zhaoxuanlang.cn/2021/10/12/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E6%9E%90url/</id>
    <published>2021-10-12T06:43:15.000Z</published>
    <updated>2021-10-12T07:09:07.062Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>1、URL解析：主要有地址解析（合法、编码、内容判断）  、  HSTS   、 访问限制操作、安全检查操作、缓存检查操作等。</p><p>2、DNS查询 ： 浏览器缓存——&gt; 操作系统缓存——&gt;路由器缓存——&gt;ISP   DNS 缓存 ——&gt; 根域名服务器查询。</p><p>3、TCP连接（四层封装）</p><p>4、处理请求:HTTP解析（域名、路径、方法等）、重定向、URL重写等</p><p>5、浏览器接受响应：资源分析、根状态码做事、压缩问题、响应</p><p>6、渲染页面：</p><p>HTML解析</p><pre><code>                  第一步：解码（UTF-8或者GB2312等等等）解析成HTML。                   第二步：预解析（识别请求资源比如imges中SRC属性加入请求队列。）                  第三步：并行操作：符号化，构建树、解标签、创DOM节点</code></pre><p> CSS解析</p><pre><code>                第一步：从左到右解析选择器进行判断等               举例：div    .p   {    }   判断P的父元素是不是div</code></pre><p>渲染树</p><p>7、断开链接、TCP四次挥手。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;1、URL解析：主要有地址解析（合法、编码、内容判断）  、  HSTS   、 访问限制操作、安全检查操作、缓存检查操作等。&lt;/p&gt;
&lt;p&gt;2、DNS查询 ： 浏览器缓存——&amp;gt; 操作系统缓存——&amp;gt;路由器缓存——</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>未知宽高元素居中</title>
    <link href="http://www.zhaoxuanlang.cn/2021/10/09/%E6%9C%AA%E7%9F%A5%E5%AE%BD%E9%AB%98%E5%85%83%E7%B4%A0%E5%B1%85%E4%B8%AD/"/>
    <id>http://www.zhaoxuanlang.cn/2021/10/09/%E6%9C%AA%E7%9F%A5%E5%AE%BD%E9%AB%98%E5%85%83%E7%B4%A0%E5%B1%85%E4%B8%AD/</id>
    <published>2021-10-09T03:46:32.000Z</published>
    <updated>2021-10-09T03:50:35.364Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>有两种方法</p><ol><li><p>使用flex</p><p>父元素：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line"><span class="attribute">background</span>: skyblue;</span><br><span class="line"><span class="comment">/* position: relative; */</span></span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="comment">/* align-content: center; */</span></span><br><span class="line"><span class="attribute">justify-content</span>: center;</span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br></pre></td></tr></tbody></table></figure><p>子元素不用设置</p></li><li><p>使用transform</p><p>父元素：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line"><span class="attribute">background</span>: skyblue;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br></pre></td></tr></tbody></table></figure><p>子元素：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line"><span class="attribute">word-break</span>: break-all;</span><br><span class="line"><span class="attribute">background-color</span>: deepskyblue;</span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;有两种方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用flex&lt;/p&gt;
&lt;p&gt;父元素：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>类</title>
    <link href="http://www.zhaoxuanlang.cn/2021/09/01/%E7%B1%BB/"/>
    <id>http://www.zhaoxuanlang.cn/2021/09/01/%E7%B1%BB/</id>
    <published>2021-09-01T08:53:11.000Z</published>
    <updated>2022-01-12T12:21:35.203Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.zhaoxuanlang.cn/image-20210901165330991.png" alt="image-20210901165330991"></p><p><img src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20220112195532476.png" alt="image-20220112195532476"></p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://img.zhaoxuanlang.cn/image-20210901165330991.png&quot; alt=&quot;image-20210901165330991&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/Squirrel_01/img/raw/master/img/image-20220112195532476.png&quot; alt=&quot;image-20220112195532476&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="http://www.zhaoxuanlang.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="js" scheme="http://www.zhaoxuanlang.cn/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>forEach系函数用法</title>
    <link href="http://www.zhaoxuanlang.cn/2021/08/27/forEach%E7%B3%BB%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/"/>
    <id>http://www.zhaoxuanlang.cn/2021/08/27/forEach%E7%B3%BB%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/</id>
    <published>2021-08-27T02:42:20.000Z</published>
    <updated>2021-08-27T02:43:09.602Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简述forEach-、map-、every-、some-和filter-的用法"><a href="#简述forEach-、map-、every-、some-和filter-的用法" class="headerlink" title="简述forEach()、map()、every()、some()和filter()的用法"></a>简述forEach()、map()、every()、some()和filter()的用法</h1><span id="more"></span><h2 id="一、forEach-，用于遍历数组，无返回值"><a href="#一、forEach-，用于遍历数组，无返回值" class="headerlink" title="一、forEach()，用于遍历数组，无返回值"></a>一、forEach()，用于遍历数组，无返回值</h2><p>这里先给出一个数组（以下例子通用）：</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">-2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">-5</span>];</span><br></pre></td></tr></tbody></table></figure><p>然后我要做事情的就是，将数组中的每一项翻倍。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,<span class="keyword">array</span></span>)</span>{</span><br><span class="line">    <span class="keyword">array</span>[index] = item * <span class="number">2</span>;</span><br><span class="line">});</span><br><span class="line">console.log(arr);   <span class="comment">// [2,-4,6,8,-10]</span></span><br></pre></td></tr></tbody></table></figure><p>可以看到，forEach()可以传入一个匿名函数作为参数，而该匿名函数有含有三个参数，其依次代表数组遍历时的当前元素item，数组遍历时的当前元素的索引index，以及正在遍历的数组array。有了这三个参数，可以方便我们做很多事情，比如说示例当中将每一项数组元素翻倍，这时需要用到第一个参数item。但是，仅仅只是将item乘以2可不行，我们还得将其赋值给原来的数组，这时我们就得用到后面两个参数index和array。</p><p>根据上述可知，array[index]是全等于item的。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,<span class="keyword">array</span></span>)</span>{</span><br><span class="line">    console.log(<span class="keyword">array</span>[index] === item);   <span class="comment">// true</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h2 id="二、map-，用于遍历数组，返回处理之后的新数组"><a href="#二、map-，用于遍历数组，返回处理之后的新数组" class="headerlink" title="二、map()，用于遍历数组，返回处理之后的新数组"></a>二、map()，用于遍历数组，返回处理之后的新数组</h2><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newArr = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> item * <span class="number">2</span>;</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(newArr);   <span class="comment">// [2,-4,6,8,-10]</span></span><br></pre></td></tr></tbody></table></figure><p>可以看到，该方法与forEach()的功能类似，只不过map()具有返回值，会返回一个新的数组，这样处理数组后也不会影响到原有数组。</p><h2 id="三、every-，用于判断数组中的每一项元素是否都满足条件，返回一个布尔值"><a href="#三、every-，用于判断数组中的每一项元素是否都满足条件，返回一个布尔值" class="headerlink" title="三、every()，用于判断数组中的每一项元素是否都满足条件，返回一个布尔值"></a>三、every()，用于判断数组中的每一项元素是否都满足条件，返回一个布尔值</h2><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isEvery = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">0</span>;</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(isEvery);   <span class="comment">// false</span></span><br></pre></td></tr></tbody></table></figure><p>可以看到，示例中是要判断数组arr中的元素是否都为正数，很显然不是，所以该方法最终返回false。</p><h2 id="四、some-，用于判断数组中的是否存在满足条件的元素，返回一个布尔值"><a href="#四、some-，用于判断数组中的是否存在满足条件的元素，返回一个布尔值" class="headerlink" title="四、some()，用于判断数组中的是否存在满足条件的元素，返回一个布尔值"></a>四、some()，用于判断数组中的是否存在满足条件的元素，返回一个布尔值</h2><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isSome = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> item &lt; <span class="number">0</span>;</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(isSome);   <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure><p>可以看到，该方法与every()类似，示例中是要判断数组arr中是否存在负数元素，很显然存在，所以该方法最终返回true。</p><h2 id="五、filter-，用于筛选数组中满足条件的元素，返回一个筛选后的新数组"><a href="#五、filter-，用于筛选数组中满足条件的元素，返回一个筛选后的新数组" class="headerlink" title="五、filter()，用于筛选数组中满足条件的元素，返回一个筛选后的新数组"></a>五、filter()，用于筛选数组中满足条件的元素，返回一个筛选后的新数组</h2><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> minus = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> item &lt; <span class="number">0</span>;</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(minus);   <span class="comment">// [-2, -5]</span></span><br></pre></td></tr></tbody></table></figure><p>可以看到，示例中是要筛选出数组arr中的所有负数，所以该方法最终返回一个筛选后的新数组[-2, -5]。</p><p><strong>补充：</strong> 以上五大方法除了传递一个匿名函数作为参数之外，还可以传第二个参数，该参数用于指定匿名函数内的this指向，例如：</p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只传一个匿名函数</span></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);  <span class="comment">// window</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传两个参数</span></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);  <span class="comment">// [1, -2, 3, 4, -5]</span></span><br><span class="line">},arr);</span><br></pre></td></tr></tbody></table></figure><p><strong>兼容性：</strong> 由于以上方法均属ES5方法，所以IE8及其以下浏览器均不兼容。</p><h2 id="重点总结："><a href="#重点总结：" class="headerlink" title="重点总结："></a>重点总结：</h2><blockquote><p>① forEach()无返回值，map()和filter()返回新数组，every()和some()返回布尔值<br> ② 匿名函数中this指向默认为window，可通过传第二参数来更改之<br> ③ 五种遍历方法均为ES5方法</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;简述forEach-、map-、every-、some-和filter-的用法&quot;&gt;&lt;a href=&quot;#简述forEach-、map-、every-、some-和filter-的用法&quot; class=&quot;headerlink&quot; title=&quot;简述forEach()、map()、every()、some()和filter()的用法&quot;&gt;&lt;/a&gt;简述forEach()、map()、every()、some()和filter()的用法&lt;/h1&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="http://www.zhaoxuanlang.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="js" scheme="http://www.zhaoxuanlang.cn/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>七牛云绑定typora</title>
    <link href="http://www.zhaoxuanlang.cn/2021/08/23/%E4%B8%83%E7%89%9B%E4%BA%91%E7%BB%91%E5%AE%9Atypora/"/>
    <id>http://www.zhaoxuanlang.cn/2021/08/23/%E4%B8%83%E7%89%9B%E4%BA%91%E7%BB%91%E5%AE%9Atypora/</id>
    <published>2021-08-23T01:06:12.000Z</published>
    <updated>2021-08-23T01:36:06.957Z</updated>
    
    <content type="html"><![CDATA[<p>七牛云做图床绑定PicGo上传图片</p><span id="more"></span><p>七牛云的优势是每个月有10G的免费存储，而且服务器在国内，速度很快，上传和加载图片几乎是秒速</p><p><img src="http://img.zhaoxuanlang.cn/image-20210823090911114.png" alt="image-20210823090911114"></p><h1 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h1><ol><li>需要有一个登记备案过的域名（腾讯阿里均可，需要绑定七牛云的图床。没有域名的话可以去腾讯云/阿里云申请一个，很便宜，备案大概半个月就可以完成。没有域名的话七牛云会给你一个临时的域名，但是只能用一个月。一个月后用临时域名就访问不到你的图片了）</li><li>注册七牛云账户</li></ol><h1 id="七牛云配置相关"><a href="#七牛云配置相关" class="headerlink" title="七牛云配置相关"></a>七牛云配置相关</h1><p>首先要注册账户，这里不多说。注册完之后选择右上角的控制台进入如下页面</p><p><img src="http://img.zhaoxuanlang.cn/image-20210823091246883.png" alt="image-20210823091246883"></p><p>首先选择下方资源管理里第二个存储空间，新增一个存储空间。名称自己起一个就行，这个名称需要和他现有的其他空间不重复。需要注意这里一定要选公开！我一开始没有选公开导致上传上去的图片都加载不出来= =查了半天报错才发现是这里的问题。</p><p><img src="http://img.zhaoxuanlang.cn/image-20210823091454523.png" alt="image-20210823091454523"></p><p>新建完之后他会让你绑定域名。我们假设你已经有了腾讯云的域名，然后进行如下操作。</p><p>我建议使用加速域名，因为访问会快一些，而且因为你流量也不多，加速域名的流量根本用不完。在添加域名页面中加速域名栏要填入一个你域名的二级域名。这里也注意不要直接填入xxx.com。我一开始直接填的xxx到后边CNAME解析的时候就傻眼了。</p><p><img src="http://img.zhaoxuanlang.cn/image-20210823091705146.png" alt="image-20210823091705146"></p><p>像这样创建完成之后点复制CNAME，准备进行下一步操作</p><p><img src="http://img.zhaoxuanlang.cn/image-20210823092044307.png" alt="image-20210823092044307"></p><h1 id="腾讯云域名配置"><a href="#腾讯云域名配置" class="headerlink" title="腾讯云域名配置"></a>腾讯云域名配置</h1><p>这一步很简单，直接打开你域名的控制台，点添加记录</p><p>主机记录就填你刚刚输入的二级域名的头部，比如说我刚刚写的img.xxx.com这里就填img，记录类型选CNAME，记录值粘贴你刚刚复制到那一串东西，然后确认就ok了。</p><p><img src="http://img.zhaoxuanlang.cn/image-20210823092235923.png" alt="image-20210823092235923"></p><p>然后回到七牛云，看看你刚刚配置的存储空间是不是一切正常，这里可能需要等个十分钟等他自动配置。如下图就是正常配置成功的显示。</p><p><img src="http://img.zhaoxuanlang.cn/image-20210823092510888.png" alt="image-20210823092510888"></p><p>这里有红框框出来的就是成功配置</p><p><img src="http://img.zhaoxuanlang.cn/image-20210823092649657.png" alt="image-20210823092649657"></p><h1 id="Picgo的配置"><a href="#Picgo的配置" class="headerlink" title="Picgo的配置"></a>Picgo的配置</h1><p>我们来到PicGo，左侧域名列表选择七牛云</p><p><img src="http://img.zhaoxuanlang.cn/image-20210823092747470.png" alt="image-20210823092747470"></p><p>这里前两个Key都可以从七牛云右上角头像-&gt;个人中心-&gt;密钥管理处获得，直接粘贴即可</p><p>存储空间名是你刚刚创建的那个的名字</p><p>访问网址是你刚刚设置的加速域名，注意前边要加http://</p><p>存储区域需要看这个<a href="%5BIMG%5Dhttp://img.zhaoxuanlang.cn/image-20210823092747470.png%5B/IMG%5D">链接</a>，里边有写每个服务器对应的区域，填入你存储空间对应的服务器代号即可</p><p><img src="http://img.zhaoxuanlang.cn/image-20210823093046660.png" alt="image-20210823093046660"></p><p>然后上传一张图片看看有没有上传成功就ok。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;七牛云做图床绑定PicGo上传图片&lt;/p&gt;</summary>
    
    
    
    <category term="杂" scheme="http://www.zhaoxuanlang.cn/categories/%E6%9D%82/"/>
    
    
    <category term="hexo" scheme="http://www.zhaoxuanlang.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo进阶</title>
    <link href="http://www.zhaoxuanlang.cn/2021/08/21/hexo%E8%BF%9B%E9%98%B6/"/>
    <id>http://www.zhaoxuanlang.cn/2021/08/21/hexo%E8%BF%9B%E9%98%B6/</id>
    <published>2021-08-21T00:00:29.000Z</published>
    <updated>2021-08-21T01:10:07.481Z</updated>
    
    <content type="html"><![CDATA[<p>实现一些hexo的进阶操作</p><span id="more"></span><h1 id="使用next主题美化"><a href="#使用next主题美化" class="headerlink" title="使用next主题美化"></a>使用next主题美化</h1><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><p>Next主题的安装方式很简单，只需要在博客主目录下执行：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></tbody></table></figure><p>然后设置站点配置文件_config.yml：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></tbody></table></figure><p>即可将我们的Hexo博客主题替换为Next主题。</p><h2 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h2><p>进入到blog/themes/next目录会看到有一个_config.yml文件，打开它，每一项都有相应的注释介绍，按照自己喜好进行修改即可，这里不多介绍。</p><h1 id="设置typora自动上传图片"><a href="#设置typora自动上传图片" class="headerlink" title="设置typora自动上传图片"></a>设置typora自动上传图片</h1><p>我用的编辑器是typora，但是在插入图片的时候默认是存在本地，这样部署到远程之后这些图片是显示不了的。一种解决方案是每张图都上传到图床然后手动插入文章，但是略显繁琐，因此需要设置让编辑器自动帮我们上传图片</p><h2 id="所需软件下载"><a href="#所需软件下载" class="headerlink" title="所需软件下载"></a>所需软件下载</h2><p>我用的是PicGo+gitee的方式，这里如果用github就会因为网速原因有点卡。</p><p>首先下载<a href="https://github.com/Molunerfinn/PicGo/releases">PicGo</a>，下载对应自己电脑的版本即可</p><p><a href="https://imgtu.com/i/fjRO4e"><img src="https://z3.ax1x.com/2021/08/21/fjRO4e.png" alt="fjRO4e.png"></a></p><p>然后解压安装balabala不谈</p><h2 id="设置PicGo和gitee仓库"><a href="#设置PicGo和gitee仓库" class="headerlink" title="设置PicGo和gitee仓库"></a>设置PicGo和gitee仓库</h2><p>安装好打开软件，左边菜单最下边有一个插件设置，点进去搜索gitee，应该会有三个，全安装即可，我这里全安装了但是只显示出了一个。</p><p><a href="https://imgtu.com/i/fjRHHK"><img src="https://z3.ax1x.com/2021/08/21/fjRHHK.png" alt="fjRHHK.png"></a></p><p>安装好点图床设置，应该就会有gitee了</p><p><a href="https://imgtu.com/i/fjR7B6"><img src="https://z3.ax1x.com/2021/08/21/fjR7B6.png" alt="fjR7B6.png"></a></p><p>这时我们需要去gitee新建一个仓库</p><p><a href="https://imgtu.com/i/fjRLND"><img src="https://z3.ax1x.com/2021/08/21/fjRLND.png" alt="fjRLND.png"></a></p><p>然后还需要去获取一个token。按下图进入，点生成新令牌，名字随便起一个就可以</p><p><a href="https://imgtu.com/i/fjRqAO"><img src="https://z3.ax1x.com/2021/08/21/fjRqAO.png" alt="fjRqAO.png"></a></p><p>现在需要回到PicGo设置界面，点击刚刚的Gitee图床选项，填入信息</p><blockquote><p>Owner：Gitee用户名</p><p>repo：刚刚新建的仓库名</p><p>path：可有可无，和仓库名一样就可以</p><p>token：填入你刚刚申请到的token</p></blockquote><p><a href="https://imgtu.com/i/fjRj9H"><img src="https://z3.ax1x.com/2021/08/21/fjRj9H.png" alt="fjRj9H.png"></a></p><p>然后点确定。点了就行，它没有什么保存成功的提示。。</p><h2 id="设置typora"><a href="#设置typora" class="headerlink" title="设置typora"></a>设置typora</h2><p>进入typora的设置点击图像栏，如图设置后点击验证一下</p><p><a href="https://imgtu.com/i/fjRv3d"><img src="https://z3.ax1x.com/2021/08/21/fjRv3d.png" alt="fjRv3d.png"></a></p><p><a href="https://imgtu.com/i/fjRxgA"><img src="https://z3.ax1x.com/2021/08/21/fjRxgA.png" alt="fjRxgA.png"></a></p><p>注意多次测试可能会验证失败。查阅PicGo.log发现提示文件已存在</p><p><a href="https://imgtu.com/i/fjRzjI"><img src="https://z3.ax1x.com/2021/08/21/fjRzjI.png" alt="fjRzjI.png"></a></p><p>只需要去PicGo软件的相册内删除他测试用的两个typora图标即可。</p><p>测试成功后你向typora文章内新增图片，它会自动帮你上传并更换连接。</p><h1 id="hexo新建文章后自动打开"><a href="#hexo新建文章后自动打开" class="headerlink" title="hexo新建文章后自动打开"></a>hexo新建文章后自动打开</h1><p>每次使用<code>hexo new xxx</code> 命令后它会在source文件夹下新建一个文章，还需要再用命令行或者手动来打开文件，同样略显繁琐，所以尝试使用node.js来完成自动化新建打开。</p><p>进入blog文件夹，新建一个目录名为scripts，在里边新建一个js文件，名字随意。</p><p>编辑这个js文件，写入以下监听事件</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec</span><br><span class="line"></span><br><span class="line">hexo.on(<span class="string">'new'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>{</span><br><span class="line">exec(<span class="string">'open '</span>+[data.path]);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>这里open也可以换成code（如果你用的是vscode来编辑文章），注意open后边有一个空格，不要漏了。</p><p>然后在terminal里使用<code>hexo new xxx</code>命令后他就会自动新建并打开文件辣，可以直线提升100%的效率~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;实现一些hexo的进阶操作&lt;/p&gt;</summary>
    
    
    
    <category term="杂" scheme="http://www.zhaoxuanlang.cn/categories/%E6%9D%82/"/>
    
    
    <category term="hexo" scheme="http://www.zhaoxuanlang.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>函数进阶</title>
    <link href="http://www.zhaoxuanlang.cn/2021/08/19/%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/"/>
    <id>http://www.zhaoxuanlang.cn/2021/08/19/%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/</id>
    <published>2021-08-19T13:05:53.000Z</published>
    <updated>2021-09-01T04:14:03.033Z</updated>
    
    <content type="html"><![CDATA[<img src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20210820104723148.png" alt="image-20210820104723148" style="zoom:50%;"><span id="more"></span><h1 id="Rest参数和Spread语法"><a href="#Rest参数和Spread语法" class="headerlink" title="Rest参数和Spread语法"></a>Rest参数和Spread语法</h1><h2 id="Rest参数"><a href="#Rest参数" class="headerlink" title="Rest参数"></a>Rest参数</h2><p>在函数定义时可以使用…args来用args数组收集后边所有的参数。…args后边不能再定义形参</p><p>例如，我们需要把所有的参数都放到数组 <code>args</code> 中：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumAll</span>(<span class="params">...args</span>) </span>{ <span class="comment">// 数组名为 args</span></span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> arg <span class="keyword">of</span> args) sum += arg;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">alert( sumAll(<span class="number">1</span>) ); <span class="comment">// 1</span></span><br><span class="line">alert( sumAll(<span class="number">1</span>, <span class="number">2</span>) ); <span class="comment">// 3</span></span><br><span class="line">alert( sumAll(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) ); <span class="comment">// 6</span></span><br></pre></td></tr></tbody></table></figure><p>我们也可以选择获取第一个参数作为变量，并将剩余的参数收集起来</p><p>下面的例子把前两个参数定义为变量，并把剩余的参数收集到 <code>titles</code> 数组中：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showName</span>(<span class="params">firstName, lastName, ...titles</span>) </span>{</span><br><span class="line">  alert( firstName + <span class="string">' '</span> + lastName ); <span class="comment">// Julius Caesar</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 剩余的参数被放入 titles 数组中</span></span><br><span class="line">  <span class="comment">// i.e. titles = ["Consul", "Imperator"]</span></span><br><span class="line">  alert( titles[<span class="number">0</span>] ); <span class="comment">// Consul</span></span><br><span class="line">  alert( titles[<span class="number">1</span>] ); <span class="comment">// Imperator</span></span><br><span class="line">  alert( titles.length ); <span class="comment">// 2</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">showName(<span class="string">"Julius"</span>, <span class="string">"Caesar"</span>, <span class="string">"Consul"</span>, <span class="string">"Imperator"</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="arguments变量"><a href="#arguments变量" class="headerlink" title="arguments变量"></a>arguments变量</h2><p>有一个名为 <code>arguments</code> 的特殊的类数组对象，该对象按参数索引包含所有参数。</p><p>例如：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showName</span>(<span class="params"></span>) </span>{</span><br><span class="line">  alert( <span class="built_in">arguments</span>.length );</span><br><span class="line">  alert( <span class="built_in">arguments</span>[<span class="number">0</span>] );</span><br><span class="line">  alert( <span class="built_in">arguments</span>[<span class="number">1</span>] );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 它是可遍历的</span></span><br><span class="line">  <span class="comment">// for(let arg of arguments) alert(arg);</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依次显示：2，Julius，Caesar</span></span><br><span class="line">showName(<span class="string">"Julius"</span>, <span class="string">"Caesar"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依次显示：1，Ilya，undefined（没有第二个参数）</span></span><br><span class="line">showName(<span class="string">"Ilya"</span>);</span><br></pre></td></tr></tbody></table></figure><p>但是arguments没有array的方法，因此最好用rest函数</p><h2 id="Spread语法"><a href="#Spread语法" class="headerlink" title="Spread语法"></a>Spread语法</h2><p>与rest参数相反，使用时在变量名前加…就可以拆出来，内部使用了迭代器的原理</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"Hello"</span>;</span><br><span class="line"></span><br><span class="line">alert( [...str] ); <span class="comment">// H,e,l,l,o</span></span><br></pre></td></tr></tbody></table></figure><h3 id="用spread合并数组"><a href="#用spread合并数组" class="headerlink" title="用spread合并数组"></a>用spread合并数组</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],b = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> arr = [...a,...b]</span><br></pre></td></tr></tbody></table></figure><h3 id="进行浅拷贝"><a href="#进行浅拷贝" class="headerlink" title="进行浅拷贝"></a>进行浅拷贝</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arrCopy = [...arr]; <span class="comment">// 将数组 spread 到参数列表中</span></span><br><span class="line">                        <span class="comment">// 然后将结果放到一个新数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个数组中的内容相同吗？</span></span><br><span class="line">alert(<span class="built_in">JSON</span>.stringify(arr) === <span class="built_in">JSON</span>.stringify(arrCopy)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个数组相等吗？</span></span><br><span class="line">alert(arr === arrCopy); <span class="comment">// false（它们的引用是不同的）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改我们初始的数组不会修改副本：</span></span><br><span class="line">arr.push(<span class="number">4</span>);</span><br><span class="line">alert(arr); <span class="comment">// 1, 2, 3, 4</span></span><br><span class="line">alert(arrCopy); <span class="comment">// 1, 2, 3</span></span><br></pre></td></tr></tbody></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有一个简单的方法可以区分它们：</p><ul><li>若 <code>...</code> 出现在函数参数列表的最后，那么它就是 rest 参数，它会把参数列表中剩余的参数收集到一个数组中。</li><li>若 <code>...</code> 出现在函数调用或类似的表达式中，那它就是 spread 语法，它会把一个数组展开为列表。</li></ul><p>使用场景：</p><ul><li>Rest 参数用于创建可接受任意数量参数的函数。</li><li>Spread 语法用于将数组传递给通常需要含有许多参数的列表的函数。</li></ul><h1 id="变量作用域，闭包"><a href="#变量作用域，闭包" class="headerlink" title="变量作用域，闭包"></a>变量作用域，闭包</h1><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>用{}包裹的代码是一个代码块</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="keyword">let</span> a=<span class="number">1</span></span><br><span class="line">}</span><br><span class="line">{</span><br><span class="line">  <span class="keyword">let</span> a =<span class="number">2</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h2><ul><li><p>name：返回函数的名称</p></li><li><p>length：返回函数参数数量</p></li><li><p>自定义属性</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>{</span><br><span class="line">  alert(<span class="string">"Hi"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算调用次数</span></span><br><span class="line">  sayHi.counter++;</span><br><span class="line">}</span><br><span class="line">sayHi.counter = <span class="number">0</span>; <span class="comment">// 初始值</span></span><br><span class="line"></span><br><span class="line">sayHi(); <span class="comment">// Hi</span></span><br><span class="line">sayHi(); <span class="comment">// Hi</span></span><br><span class="line"></span><br><span class="line">alert( <span class="string">`Called <span class="subst">${sayHi.counter}</span> times`</span> ); <span class="comment">// Called 2 times</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>命名函数表达式</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sayHi = <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">who</span>) </span>{</span><br><span class="line">  alert(<span class="string">`Hello, <span class="subst">${who}</span>`</span>);</span><br><span class="line">};</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>func不会被外界所知，可以在函数内进行很方便的使用。</p></li></ul><h2 id="setTimeout和setInterval"><a href="#setTimeout和setInterval" class="headerlink" title="setTimeout和setInterval"></a>setTimeout和setInterval</h2><ul><li><code>setTimeout</code> 允许我们将函数推迟到一段时间间隔之后再执行。</li><li><code>setInterval</code> 允许我们重复运行一个函数，从一段时间间隔之后开始运行，之后以该时间间隔连续重复运行该函数。</li></ul><h3 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h3><p>语法：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timerId = <span class="built_in">setTimeout</span>(func|code, [delay], [arg1], [arg2], ...)</span><br></pre></td></tr></tbody></table></figure><p>参数说明：</p><ul><li><p><code>func|code</code></p><p>想要执行的函数或代码字符串。 一般传入的都是函数。由于某些历史原因，支持传入代码字符串，但是不建议这样做。</p></li><li><p><code>delay</code></p><p>执行前的延时，以毫秒为单位（1000 毫秒 = 1 秒），默认值是 0；</p></li><li><p><code>arg1</code>，<code>arg2</code>…</p><p>要传入被执行函数（或代码字符串）的参数列表（IE9 以下不支持）</p></li></ul><p>传入函数不要加括号。</p><h4 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h4><p><code>setInterval</code> 方法和 <code>setTimeout</code> 的语法相同：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timerId = <span class="built_in">setInterval</span>(func|code, [delay], [arg1], [arg2], ...)</span><br></pre></td></tr></tbody></table></figure><p>所有参数的意义也是相同的。不过与 <code>setTimeout</code> 只执行一次不同，<code>setInterval</code> 是每间隔给定的时间周期性执行。</p><p>想要阻止后续调用，我们需要调用 <code>clearInterval(timerId)</code>。</p><p>例：编写一个函数 <code>printNumbers(from, to)</code>，使其每秒输出一个数字，数字从 <code>from</code> 开始，到 <code>to</code> 结束。</p><p>使用 <code>setInterval</code>：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printNumbers</span>(<span class="params"><span class="keyword">from</span>, to</span>) </span>{</span><br><span class="line">  <span class="keyword">let</span> current = <span class="keyword">from</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> timerId = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    alert(current);</span><br><span class="line">    <span class="keyword">if</span> (current == to) {</span><br><span class="line">      <span class="built_in">clearInterval</span>(timerId);</span><br><span class="line">    }</span><br><span class="line">    current++;</span><br><span class="line">  }, <span class="number">1000</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用例：</span></span><br><span class="line">printNumbers(<span class="number">5</span>, <span class="number">10</span>);</span><br></pre></td></tr></tbody></table></figure><p>使用嵌套的 <code>setTimeout</code>：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printNumbers</span>(<span class="params"><span class="keyword">from</span>, to</span>) </span>{</span><br><span class="line">  <span class="keyword">let</span> current = <span class="keyword">from</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> <span class="title">go</span>(<span class="params"></span>) </span>{</span><br><span class="line">    alert(current);</span><br><span class="line">    <span class="keyword">if</span> (current &lt; to) {</span><br><span class="line">      <span class="built_in">setTimeout</span>(go, <span class="number">1000</span>);</span><br><span class="line">    }</span><br><span class="line">    current++;</span><br><span class="line">  }, <span class="number">1000</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用例：</span></span><br><span class="line">printNumbers(<span class="number">5</span>, <span class="number">10</span>);</span><br></pre></td></tr></tbody></table></figure><p>请注意，在这两种解决方案中，在第一个输出之前都有一个初始延迟。函数在 <code>1000ms</code> 之后才被第一次调用。</p><p>如果我们还希望函数立即运行，那么我们可以在单独的一行上添加一个额外的调用，像这样：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printNumbers</span>(<span class="params"><span class="keyword">from</span>, to</span>) </span>{</span><br><span class="line">  <span class="keyword">let</span> current = <span class="keyword">from</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">go</span>(<span class="params"></span>) </span>{</span><br><span class="line">    alert(current);</span><br><span class="line">    <span class="keyword">if</span> (current == to) {</span><br><span class="line">      <span class="built_in">clearInterval</span>(timerId);</span><br><span class="line">    }</span><br><span class="line">    current++;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  go();</span><br><span class="line">  <span class="keyword">let</span> timerId = <span class="built_in">setInterval</span>(go, <span class="number">1000</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">printNumbers(<span class="number">5</span>, <span class="number">10</span>);</span><br></pre></td></tr></tbody></table></figure><h1 id="装饰器，call-apply"><a href="#装饰器，call-apply" class="headerlink" title="装饰器，call/apply"></a>装饰器，call/apply</h1><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">slow</span>(<span class="params">x</span>) </span>{</span><br><span class="line">  <span class="comment">// 这里可能会有重负载的 CPU 密集型工作</span></span><br><span class="line">  alert(<span class="string">`Called with <span class="subst">${x}</span>`</span>);</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cachingDecorator</span>(<span class="params">func</span>) </span>{</span><br><span class="line">  <span class="keyword">let</span> cache = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (cache.has(x)) {    <span class="comment">// 如果缓存中有对应的结果</span></span><br><span class="line">      <span class="keyword">return</span> cache.get(x); <span class="comment">// 从缓存中读取结果</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = func(x);  <span class="comment">// 否则就调用 func</span></span><br><span class="line"></span><br><span class="line">    cache.set(x, result);  <span class="comment">// 然后将结果缓存（记住）下来</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">slow = cachingDecorator(slow);</span><br><span class="line"></span><br><span class="line">alert( slow(<span class="number">1</span>) ); <span class="comment">// slow(1) 被缓存下来了</span></span><br><span class="line">alert( <span class="string">"Again: "</span> + slow(<span class="number">1</span>) ); <span class="comment">// 一样的</span></span><br><span class="line"></span><br><span class="line">alert( slow(<span class="number">2</span>) ); <span class="comment">// slow(2) 被缓存下来了</span></span><br><span class="line">alert( <span class="string">"Again: "</span> + slow(<span class="number">2</span>) ); <span class="comment">// 和前面一行结果相同</span></span><br></pre></td></tr></tbody></table></figure><h2 id="call-apply"><a href="#call-apply" class="headerlink" title="call/apply"></a>call/apply</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func.apply(context, args)</span><br></pre></td></tr></tbody></table></figure><p>它运行 <code>func</code> 设置 <code>this=context</code>，并使用类数组对象 <code>args</code> 作为参数列表（arguments）。</p><p><code>call</code> 和 <code>apply</code> 之间唯一的语法区别是，<code>call</code> 期望一个参数列表，而 <code>apply</code> 期望一个包含这些参数的类数组对象。</p><p>方法借用：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hash</span>(<span class="params"></span>) </span>{</span><br><span class="line">  alert( [].join.call(<span class="built_in">arguments</span>) ); <span class="comment">// 1,2</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">hash(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></tbody></table></figure><h1 id="函数绑定"><a href="#函数绑定" class="headerlink" title="函数绑定"></a>函数绑定</h1><p>let fun1 = func.bind(context,…args)可以把函数绑定了this赋值给fun1</p><h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><p>没有this，没有arguments</p>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://gitee.com/Squirrel_01/img/raw/master/img/image-20210820104723148.png&quot; alt=&quot;image-20210820104723148&quot; style=&quot;zoom:50%;&quot;&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="http://www.zhaoxuanlang.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="js" scheme="http://www.zhaoxuanlang.cn/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js数据类型</title>
    <link href="http://www.zhaoxuanlang.cn/2021/08/18/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://www.zhaoxuanlang.cn/2021/08/18/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-08-18T09:50:16.000Z</published>
    <updated>2021-08-19T13:05:38.851Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.hualigs.cn/image/611cef200e311.jpg" alt="image-20210818175151311"></p><span id="more"></span><h1 id="Map和Set"><a href="#Map和Set" class="headerlink" title="Map和Set"></a>Map和Set</h1><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>Key-键值对形式，类似哈希表</p><ul><li><code>new Map()</code> —— 创建 map。</li><li><code>map.set(key, value)</code> —— 根据键存储值。</li><li><code>map.get(key)</code> —— 根据键来返回值，如果 <code>map</code> 中不存在对应的 <code>key</code>，则返回 <code>undefined</code>。</li><li><code>map.has(key)</code> —— 如果 <code>key</code> 存在则返回 <code>true</code>，否则返回 <code>false</code>。</li><li><code>map.delete(key)</code> —— 删除指定键的值。</li><li><code>map.clear()</code> —— 清空 map。</li><li><code>map.size</code> —— 返回当前元素个数。</li></ul><p>如果要在 <code>map</code> 里使用循环，可以使用以下三个方法：</p><ul><li><code>map.keys()</code> —— 遍历并返回所有的键（returns an iterable for keys），</li><li><code>map.values()</code> —— 遍历并返回所有的值（returns an iterable for values），</li><li><code>map.entries()</code> —— 遍历并返回所有的实体（returns an iterable for entries）<code>[key, value]</code>，<code>for..of</code> 在默认情况下使用的就是这个。</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="built_in">Object</span>.entries(obj));<span class="comment">//从obj对象创建map</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.fromEntries(map.entries()); <span class="comment">// 创建一个普通对象（plain object）(*)</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>每个键只出现一次</p><p>它的主要方法如下：</p><ul><li><code>new Set(iterable)</code> —— 创建一个 <code>set</code>，如果提供了一个 <code>iterable</code> 对象（通常是数组），将会从数组里面复制值到 <code>set</code> 中。</li><li><code>set.add(value)</code> —— 添加一个值，返回 set 本身</li><li><code>set.delete(value)</code> —— 删除值，如果 <code>value</code> 在这个方法调用的时候存在则返回 <code>true</code> ，否则返回 <code>false</code>。</li><li><code>set.has(value)</code> —— 如果 <code>value</code> 在 set 中，返回 <code>true</code>，否则返回 <code>false</code>。</li><li><code>set.clear()</code> —— 清空 set。</li><li><code>set.size</code> —— 返回元素个数。</li></ul><p><code>Map</code> 中用于迭代的方法在 <code>Set</code> 中也同样支持：</p><ul><li><code>set.keys()</code> —— 遍历并返回所有的值（returns an iterable object for values），</li><li><code>set.values()</code> —— 与 <code>set.keys()</code> 作用相同，这是为了兼容 <code>Map</code>，</li><li><code>set.entries()</code> —— 遍历并返回所有的实体（returns an iterable object for entries）<code>[value, value]</code>，它的存在也是为了兼容 <code>Map</code>。</li></ul><h3 id="另"><a href="#另" class="headerlink" title="另"></a>另</h3><p>obj = Array.from(iteratable)可以从一个可迭代对象返回一个数组</p><h1 id="WeakMap-and-WeakSet（弱映射和弱集合）"><a href="#WeakMap-and-WeakSet（弱映射和弱集合）" class="headerlink" title="WeakMap and WeakSet（弱映射和弱集合）"></a>WeakMap and WeakSet（弱映射和弱集合）</h1><h3 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h3><ul><li>不能用原始值作为键</li><li>假如用对象作为键，但是对象被设为null时map里的键会自动删除</li></ul><p>使用案例：计数某人来的次数，当这个人退出时清空他的数据/清除缓存</p><h3 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h3><ul><li>不能添加原始值</li><li>不支持size和keys方法，不可迭代</li></ul><h1 id="Object-keys，values，entries"><a href="#Object-keys，values，entries" class="headerlink" title="Object.keys，values，entries"></a>Object.keys，values，entries</h1><ul><li>Object.keys(obj)—— 返回一个包含该对象所有的键的数组。</li><li>Object.values(obj) —— 返回一个包含该对象所有的值的数组。</li><li>Object.entries(obj) —— 返回一个包含该对象所有 [key, value] 键值对的数组。</li></ul><p>区别：（为了灵活性）</p><p><a href="https://imgtu.com/i/fTqytg"><img src="https://z3.ax1x.com/2021/08/18/fTqytg.png" alt="fTqytg.png"></a></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = {</span><br><span class="line">  <span class="attr">name</span>: <span class="string">"John"</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><ul><li><code>Object.keys(user) = ["name", "age"]</code></li><li><code>Object.values(user) = ["John", 30]</code></li><li><code>Object.entries(user) = [ ["name","John"], ["age",30] ]</code></li></ul><h3 id="转换对象"><a href="#转换对象" class="headerlink" title="转换对象"></a>转换对象</h3><p>对象没有map方法，使用需要先转换成数组再转回来</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> prices = {</span><br><span class="line">  <span class="attr">banana</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">orange</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">meat</span>: <span class="number">4</span>,</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> doublePrices = <span class="built_in">Object</span>.fromEntries(</span><br><span class="line">  <span class="comment">// 转换为数组，之后使用 map 方法，然后通过 fromEntries 再转回到对象</span></span><br><span class="line">  <span class="built_in">Object</span>.entries(prices).map(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> [key, value * <span class="number">2</span>])</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">alert(doublePrices.meat); <span class="comment">// 8</span></span><br></pre></td></tr></tbody></table></figure><h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><code> let {prop : varName = default, ...rest} = object</code></p><p>这表示属性 <code>prop</code> 会被赋值给变量 <code>varName</code>，如果没有这个属性的话，就会使用默认值 <code>default</code>。</p><p>没有对应映射的对象属性会被复制到 <code>rest</code> 对象。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们有一个存放了名字和姓氏的数组</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">"Ilya"</span>, <span class="string">"Kantor"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构赋值</span></span><br><span class="line"><span class="comment">// sets firstName = arr[0]</span></span><br><span class="line"><span class="comment">// and surname = arr[1]</span></span><br><span class="line"><span class="keyword">let</span> [firstName, surname] = arr;</span><br><span class="line"></span><br><span class="line">alert(firstName); <span class="comment">// Ilya</span></span><br><span class="line">alert(surname);  <span class="comment">// Kantor</span></span><br></pre></td></tr></tbody></table></figure><h2 id="剩余的-‘…’"><a href="#剩余的-‘…’" class="headerlink" title="剩余的 ‘…’"></a>剩余的 ‘…’</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [name1, name2, ...rest] = [<span class="string">"Julius"</span>, <span class="string">"Caesar"</span>, <span class="string">"Consul"</span>, <span class="string">"of the Roman Republic"</span>];</span><br><span class="line"></span><br><span class="line">alert(name1); <span class="comment">// Julius</span></span><br><span class="line">alert(name2); <span class="comment">// Caesar</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 请注意，`rest` 的类型是数组</span></span><br><span class="line">alert(rest[<span class="number">0</span>]); <span class="comment">// Consul</span></span><br><span class="line">alert(rest[<span class="number">1</span>]); <span class="comment">// of the Roman Republic</span></span><br><span class="line">alert(rest.length); <span class="comment">// 2</span></span><br></pre></td></tr></tbody></table></figure><h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [firstName, surname] = [];</span><br><span class="line"></span><br><span class="line">alert(firstName); <span class="comment">// undefined</span></span><br><span class="line">alert(surname); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认值</span></span><br><span class="line"><span class="keyword">let</span> [name = <span class="string">"Guest"</span>, surname = <span class="string">"Anonymous"</span>] = [<span class="string">"Julius"</span>];</span><br><span class="line"></span><br><span class="line">alert(name);    <span class="comment">// Julius（来自数组的值）</span></span><br><span class="line">alert(surname); <span class="comment">// Anonymous（默认值被使用了）</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h1><p>new Date(year, month, date, hour, minute, second, millisecond) </p><ul><li><p><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear">getFullYear()</a></p><p>获取年份（4 位数）</p></li><li><p><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth">getMonth()</a></p><p>获取月份，<strong>从 0 到 11</strong>。</p></li><li><p><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Date/getDate">getDate()</a></p><p>获取当月的具体日期，从 1 到 31，这个方法名称可能看起来有些令人疑惑。</p></li><li><p><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Date/getHours">getHours()</a>，<a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Date/getMinutes">getMinutes()</a>，<a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Date/getSeconds">getSeconds()</a>，<a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Date/getMilliseconds">getMilliseconds()</a></p><p>获取相应的时间组件。</p></li><li><p><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Date/getDay">getDay()</a></p><p>获取一周中的第几天，从 <code>0</code>（星期日）到 <code>6</code>（星期六）。第一天始终是星期日，在某些国家可能不是这样的习惯，但是这不能被改变。</p></li></ul><p>测量函数运行时间</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> start = <span class="built_in">Date</span>.now();<span class="comment">//获得起始</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) f(date1, date2);<span class="comment">//运行多次函数f</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Date</span>.now() - start;<span class="comment">//返回差值</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bench</span>(<span class="params">f</span>) </span>{</span><br><span class="line">  <span class="keyword">let</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">let</span> date2 = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> start = <span class="built_in">Date</span>.now();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) f(date1, date2);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Date</span>.now() - start;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> time1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> time2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交替运行 bench(upperSlice) 和 bench(upperLoop) 各 10 次</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {</span><br><span class="line">  time1 += bench(diffSubtract);</span><br><span class="line">  time2 += bench(diffGetTime);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">alert( <span class="string">'Total time for diffSubtract: '</span> + time1 );</span><br><span class="line">alert( <span class="string">'Total time for diffGetTime: '</span> + time2 );</span><br></pre></td></tr></tbody></table></figure><h1 id="JSON方法"><a href="#JSON方法" class="headerlink" title="JSON方法"></a>JSON方法</h1><ul><li><p><code>JSON.stringify()</code> 将对象转换为 JSON。</p></li><li><p><code>JSON.parse()</code> 将 JSON 转换回对象。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://www.hualigs.cn/image/611cef200e311.jpg&quot; alt=&quot;image-20210818175151311&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="http://www.zhaoxuanlang.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="js" scheme="http://www.zhaoxuanlang.cn/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>迭代器</title>
    <link href="http://www.zhaoxuanlang.cn/2021/08/18/%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>http://www.zhaoxuanlang.cn/2021/08/18/%E8%BF%AD%E4%BB%A3%E5%99%A8/</id>
    <published>2021-08-18T08:37:21.000Z</published>
    <updated>2021-08-27T02:47:04.127Z</updated>
    
    <content type="html"><![CDATA[<p>迭代器使对象可以在for of中使用</p><span id="more"></span><p>需要一个next方法返回{done:,value:}</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> range = {</span><br><span class="line">  <span class="attr">from</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">to</span>: <span class="number">5</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. for..of 调用首先会调用这个：</span></span><br><span class="line">range[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ……它返回迭代器对象（iterator object）：</span></span><br><span class="line">  <span class="comment">// 2. 接下来，for..of 仅与此迭代器一起工作，要求它提供下一个值</span></span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    <span class="attr">current</span>: <span class="built_in">this</span>.from,</span><br><span class="line">    <span class="attr">last</span>: <span class="built_in">this</span>.to,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. next() 在 for..of 的每一轮循环迭代中被调用</span></span><br><span class="line">    <span class="function"><span class="title">next</span>(<span class="params"></span>)</span> {</span><br><span class="line">      <span class="comment">// 4. 它将会返回 {done:.., value :...} 格式的对象</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.current &lt;= <span class="built_in">this</span>.last) {</span><br><span class="line">        <span class="keyword">return</span> { <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: <span class="built_in">this</span>.current++ };</span><br><span class="line">      } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> { <span class="attr">done</span>: <span class="literal">true</span> };</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  };</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在它可以运行了！</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> range) {</span><br><span class="line">  alert(num); <span class="comment">// 1, 然后是 2, 3, 4, 5</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;迭代器使对象可以在for of中使用&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="http://www.zhaoxuanlang.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="js" scheme="http://www.zhaoxuanlang.cn/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>前端听课笔记</title>
    <link href="http://www.zhaoxuanlang.cn/2021/08/14/%E5%89%8D%E7%AB%AF%E5%90%AC%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.zhaoxuanlang.cn/2021/08/14/%E5%89%8D%E7%AB%AF%E5%90%AC%E8%AF%BE%E7%AC%94%E8%AE%B0/</id>
    <published>2021-08-14T02:09:33.000Z</published>
    <updated>2021-08-14T05:20:35.497Z</updated>
    
    <content type="html"><![CDATA[<p>前端实战训练营笔记</p><span id="more"></span><h1 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h1><p>Number全都用双精度浮点数表示</p><p>安全数是2^53-1以下的</p><p>toPresition(a)返回第一个不为0保留后边a位</p><p>tofixed(a)返回保留小数点后a位</p><p>原型链</p><ul><li>_proto_是隐式原型，指向构造函数原型prototype</li><li>prototype是显式原型</li><li></li></ul><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><p>userAgent可以获取用户的硬件信息</p><p>navigation</p><ul><li>clipboard获得粘贴的信息</li><li>keyboard是键盘相关</li><li>geolocation定位</li></ul><p>indexedDB</p><h3 id="浏览器提供的数据库"><a href="#浏览器提供的数据库" class="headerlink" title="浏览器提供的数据库"></a>浏览器提供的数据库</h3><blockquote><p>Cookie：4kb</p><p>LocalStorage:2.5m-10mb</p><p>indexedDB:无限</p></blockquote><h3 id="Filereader"><a href="#Filereader" class="headerlink" title="Filereader"></a>Filereader</h3><blockquote><p>文件操作</p></blockquote><h3 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h3><blockquote><p>使用window.crypto.getRandomValues()arr</p><p>或Math.random()</p></blockquote><h3 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h3><blockquote><p>可以用parent scroll</p><p>还有IntersectionObserver方法</p></blockquote><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h3 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h3><blockquote><p>从外往里border，margin，content，padding</p></blockquote><p>flex</p><p>grid</p><h1 id="底层技术"><a href="#底层技术" class="headerlink" title="底层技术"></a>底层技术</h1><h3 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h3><blockquote><p>缓存顺序</p></blockquote><h3 id="浏览器渲染"><a href="#浏览器渲染" class="headerlink" title="浏览器渲染"></a>浏览器渲染</h3><blockquote><p>async和defer</p><p>async加载好后直接执行</p></blockquote><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;前端实战训练营笔记&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="http://www.zhaoxuanlang.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="前端" scheme="http://www.zhaoxuanlang.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>加一</title>
    <link href="http://www.zhaoxuanlang.cn/2021/08/12/66-%E5%8A%A0%E4%B8%80/"/>
    <id>http://www.zhaoxuanlang.cn/2021/08/12/66-%E5%8A%A0%E4%B8%80/</id>
    <published>2021-08-12T03:11:15.000Z</published>
    <updated>2021-08-12T03:17:15.522Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。</p><p>最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。</p><p>你可以假设除了整数 0 之外，这个整数不会以零开头。</p><p>示例 1：</p><p>输入：digits = [1,2,3]<br>输出：[1,2,4]<br>解释：输入数组表示数字 123。<br>示例 2：</p><p>输入：digits = [4,3,2,1]<br>输出：[4,3,2,2]<br>解释：输入数组表示数字 4321。<br>示例 3：</p><p>输入：digits = [0]<br>输出：[1]</p><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>while内加一和进位</p><p>若不是全9就在while里输出，若是全9就在前边加一个1</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{number[]}</span> <span class="variable">digits</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{number[]}</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> plusOne = <span class="function"><span class="keyword">function</span>(<span class="params">digits</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> last = digits.length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(last&gt;=<span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(digits[last]!=<span class="number">9</span>){</span><br><span class="line">            digits[last]+=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> digits;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            digits[last]=<span class="number">0</span>;</span><br><span class="line">            last--;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>].concat(digits);</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。&lt;/p&gt;
&lt;p&gt;最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。&lt;/p&gt;
&lt;p&gt;你可以假设除了整数 0 之外，这个整数不会以零开头。&lt;/p&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;p&gt;输入：digits = [1,2,3]&lt;br&gt;输出：[1,2,4]&lt;br&gt;解释：输入数组表示数字 123。&lt;br&gt;示例 2：&lt;/p&gt;
&lt;p&gt;输入：digits = [4,3,2,1]&lt;br&gt;输出：[4,3,2,2]&lt;br&gt;解释：输入数组表示数字 4321。&lt;br&gt;示例 3：&lt;/p&gt;
&lt;p&gt;输入：digits = [0]&lt;br&gt;输出：[1]&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode记录" scheme="http://www.zhaoxuanlang.cn/categories/leetcode%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="easy" scheme="http://www.zhaoxuanlang.cn/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>合并两个有序数组</title>
    <link href="http://www.zhaoxuanlang.cn/2021/08/12/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <id>http://www.zhaoxuanlang.cn/2021/08/12/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</id>
    <published>2021-08-12T02:46:28.000Z</published>
    <updated>2021-08-12T03:17:07.501Z</updated>
    
    <content type="html"><![CDATA[<p>给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。</p><p>初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。你可以假设 nums1 的空间大小等于 m + n，这样它就有足够的空间保存来自 nums2 的元素。</p><p>示例 1：</p><p>输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3<br>输出：[1,2,2,3,5,6]<br>示例 2：</p><p>输入：nums1 = [1], m = 1, nums2 = [], n = 0<br>输出：[1]</p><span id="more"></span><p>思路：用双指针逆向向nums1从后往前添加两个数组里大的元素，需要注意最外边的循环mn都是大于等于0，因为等于0的时候说明还有一个元素。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{number[]}</span> <span class="variable">nums1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{number}</span> <span class="variable">m</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{number[]}</span> <span class="variable">nums2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{number}</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{void}</span> </span>Do not return anything, modify nums1 in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span> (<span class="params">nums1, m, nums2, n</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> last = m-- + --n;</span><br><span class="line">    <span class="keyword">while</span> (n&gt;=<span class="number">0</span>||m&gt;=<span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">0</span>){</span><br><span class="line">            nums1[last--] = nums1[m--];</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span>(m&lt;<span class="number">0</span>){</span><br><span class="line">            nums1[last--] = nums2[n--];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums1[m] &gt;= nums2[n]) {</span><br><span class="line">            nums1[last--] = nums1[m--];</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            nums1[last--] = nums2[n--];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。&lt;/p&gt;
&lt;p&gt;初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。你可以假设 nums1 的空间大小等于 m + n，这样它就有足够的空间保存来自 nums2 的元素。&lt;/p&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;p&gt;输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3&lt;br&gt;输出：[1,2,2,3,5,6]&lt;br&gt;示例 2：&lt;/p&gt;
&lt;p&gt;输入：nums1 = [1], m = 1, nums2 = [], n = 0&lt;br&gt;输出：[1]&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode记录" scheme="http://www.zhaoxuanlang.cn/categories/leetcode%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="easy" scheme="http://www.zhaoxuanlang.cn/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>page和hexo搭建自己的博客</title>
    <link href="http://www.zhaoxuanlang.cn/2021/08/11/page%E5%92%8Chexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://www.zhaoxuanlang.cn/2021/08/11/page%E5%92%8Chexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</id>
    <published>2021-08-11T14:07:43.000Z</published>
    <updated>2021-08-21T04:01:11.084Z</updated>
    
    <content type="html"><![CDATA[<p>之前用腾讯云的主机和wordpress建站，但是由于主机到期，所以打算换一个平台，找到了免费的github page</p><span id="more"></span><p>github page虽然免费，但是不像vps那么强大，他只支持静态博客的搭建。没有数据库支持，更新文章需要使用git手动增量上传。博客生成器我用的是hexo，当然也有其他的解决方案。</p><ol><li><p>前置工作</p><ul><li>需要电脑有安装git</li><li>安装node.js</li><li>注册github账户</li><li>（非必选）域名</li><li>（非必选）markdown编辑器（推荐typora，vscode也能用而且相关插件很强大）</li></ul></li><li><p>在本地安装hexo</p><p>打开控制台，输入以下代码</p><blockquote><p>npm install hexo -g</p><p>npm install hexo-server -g</p></blockquote><p>然后新建hexo项目</p><blockquote><p>hexo init blog</p><p>cd blog</p><p>npm install</p><p>hexo s</p></blockquote><p>等他提示打开localhost就可以看到博客已经打开了，ctrl/control+c可以关闭</p><p>这时为了下边需要不要关terminal，还在blog目录下安装deploy-git</p><blockquote><p>npm install hexo-deployer-git –save</p></blockquote></li><li><p>配置</p><p>在blog文件夹中找一个叫做_config.yml的文件，打开它</p><p>目前需要改的只有最开头Site部分，按照自己情况写标题作者什么的。</p><p>然后打开github，新建一个仓库</p><img src="https://www.hualigs.cn/image/611cef5f7cb07.jpg" alt="image-20210818181723781" style="zoom:50%;"><p>在下一级新建一个仓库，名称填xxx.github.io，如</p><p><a href="https://imgtu.com/i/fT5WdJ"><img src="https://z3.ax1x.com/2021/08/18/fT5WdJ.md.png" alt="fT5WdJ.md.png"></a></p><p>公开或者私密看你自己心情，然后创建</p><p>再回到刚刚那个yml配置文件，拉到最下边deploy位置，按这个格式填入你刚刚创建的仓库信息然后保存文件。</p><blockquote><p>deploy:</p><p> type: git</p><p> repository: <a href="https://github.com/1982606762/1982606762.github.io.git">https://github.com/1982606762/1982606762.github.io.git</a></p><p> branch: main</p></blockquote><p>现在配置文件设置好了，只需要用terminal  cd进blog文件夹使用hexo g&amp;&amp;hexo d就可以部署到远程仓库了。</p><p>等他提示Deploy done的时候可以打开github仓库页面看看有没有部署完成，部署完成在这会有个√</p><p><a href="https://imgtu.com/i/fT5fo9"><img src="https://z3.ax1x.com/2021/08/18/fT5fo9.md.png" alt="fT5fo9.md.png"></a></p><p>有的话就可以用xxx.github,io访问了。</p></li><li><p>绑定自己的域名</p><p>首先需要去比如说腾讯云或者阿里云注册一个域名，便宜的大概十来块一年。</p><p>到刚刚blog文件夹下的source文件夹内新建一个叫CNAME的文件，注意文件不能有任何后缀。（mac系统新建之后如果用文本编辑器编辑他会自动添加txt后缀。。而且是隐藏的，所以需要用touch命令创建后用vim修改即可）</p><p>修改这个文件内容为你刚刚申请的域名，只包含域名即可如xxx.com</p><p>然后用terminal     hexo g&amp;&amp;hexo d，等他上传之后看看github仓库的这个位置</p><p><a href="https://imgtu.com/i/fT55J1"><img src="https://z3.ax1x.com/2021/08/18/fT55J1.md.png" alt="fT55J1.md.png"></a></p><p>是不是显示published at你的域名</p><p><a href="https://imgtu.com/i/fT5IRx"><img src="https://z3.ax1x.com/2021/08/18/fT5IRx.png" alt="fT5IRx.png"></a></p><p>有的话这边就算设置好了，然后去域名那边设置</p><p>登录到你刚刚买域名的网站，找到控制台里的域名解析或者DNS解析之类的，里边有你刚刚买的域名。找到解析列表，点击添加记录，按照下图第二行设置即可，注意在记录值位置需要改成自己的github账户</p><p><a href="https://imgtu.com/i/fT54iR"><img src="https://z3.ax1x.com/2021/08/18/fT54iR.png" alt="fT54iR.png" border="0"></a></p><p>添加完后等几分钟，等他生效。不出意外此时访问xxx.com(你的域名)就可以打开博客了。</p></li><li><p>新建文章</p><p>写文章首先需要新建，还是用terminal  cd到blog目录下输入<code>hexo new 我的博文xxx</code>其中第三个字段是文章名称。</p><p>然后在blog/source/_posts目录下会多一个我的博文xxx.md的文件，用markdown编辑器打开会看到类似</p><blockquote><p>Title:</p><p>date</p><p>tags</p><p>–</p></blockquote><p>—下边就可以用markdown语句写文章，上边是一些参数，可以修改tags</p><p>写完文章后保存这个文件，然后在terminal输入<code>hexo clean</code> 之后<code>hexo g&amp;&amp;hexo d</code>就可以上传到云端。这时再打开博客就可以看到新写的文章了</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前用腾讯云的主机和wordpress建站，但是由于主机到期，所以打算换一个平台，找到了免费的github page&lt;/p&gt;</summary>
    
    
    
    <category term="杂" scheme="http://www.zhaoxuanlang.cn/categories/%E6%9D%82/"/>
    
    
    <category term="hexo" scheme="http://www.zhaoxuanlang.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>JS开发学习笔记</title>
    <link href="http://www.zhaoxuanlang.cn/2021/08/11/JS%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.zhaoxuanlang.cn/2021/08/11/JS%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-08-11T13:47:37.000Z</published>
    <updated>2021-08-12T03:19:06.735Z</updated>
    
    <content type="html"><![CDATA[<h2 id="margin参数数量"><a href="#margin参数数量" class="headerlink" title="margin参数数量"></a>margin参数数量</h2><blockquote><p>margin: 20px;（上、下、左、右各20px。）</p><p>margin: 20px 40px;（上、下20px；左、右40px。）</p><p>margin: 20px 40px 60px;（上20px；左、右40px；下60px。）</p><p>margin: 20px 40px 60px 80px;（上20px；右40px；下60px；左80px。）</p></blockquote><h2 id="单独设置角度"><a href="#单独设置角度" class="headerlink" title="单独设置角度"></a>单独设置角度</h2><p><code>border-bottom-left-radius:2px</code></p><span id="more"></span><h2 id="设置单元格内文字不溢出还有padding"><a href="#设置单元格内文字不溢出还有padding" class="headerlink" title="设置单元格内文字不溢出还有padding"></a>设置单元格内文字不溢出还有padding</h2><blockquote><p>.right_menu_inner .module_unit{<br>    width: 40%;<br>    left: 60%;<br>    border: 1px solid #ccc;</p><p>position: absolute;</p><p>​    padding: 6px 12px;</p><p>​    font-size: 14px;</p><p>​    line-height: 1.42857143;</p><p>​    height: 100%;</p><p>​    border-radius: 5px;</p><p>​    background-color: white;</p><p>​    overflow: scroll;</p><p>​    border-top-left-radius: 0;</p><p>​    border-bottom-left-radius: 0;</p><p>}</p><p>.right_menu_inner .module_unit::-webkit-scrollbar{</p><p>​    display: none;</p><p>}</p></blockquote><p>效果：<img src="/Users/zxl/Library/Containers/com.tencent.qq/Data/Library/Caches/Images/E7FA839551193991515F3BE73B5A0C73.jpg" alt="E7FA839551193991515F3BE73B5A0C73">   </p><h2 id="添加输入框后自动编辑"><a href="#添加输入框后自动编辑" class="headerlink" title="添加输入框后自动编辑"></a>添加输入框后自动编辑</h2><p><em>div</em>.contentEditable=true</p><p>div.focus()</p><h2 id="css定义变量"><a href="#css定义变量" class="headerlink" title="css定义变量"></a>css定义变量</h2><p><code>:root{         --bianliangming:xxxxx; }</code></p><p>需要前边两个横线</p><p>使用：</p><p><code>div{ color:div(--bianliangming,morenzhi)</code><br><code>}</code></p><h2 id="使用vh进行响应式开发"><a href="#使用vh进行响应式开发" class="headerlink" title="使用vh进行响应式开发"></a>使用vh进行响应式开发</h2><p>vh就是viewed Height,同理还有vw就是width，他是相对目前打开的页面大小进行更改</p><blockquote><p>使用方法：<br>1vh就是1%</p></blockquote><h2 id="使用calc进行css计算"><a href="#使用calc进行css计算" class="headerlink" title="使用calc进行css计算"></a>使用calc进行css计算</h2><blockquote><p>表达式中有“+”和“-”时，其前后必须要有空格，如”widht: calc(12%+5em)”这种没有空格的写法是错误的；</p></blockquote><blockquote><p>表达式中有“*”和“/”时，其前后可以没有空格，但建议留有空格。  </p></blockquote><blockquote><p>如height:(100vh - 20px);</p></blockquote><h2 id="下方浮动的div实现"><a href="#下方浮动的div实现" class="headerlink" title="下方浮动的div实现"></a>下方浮动的div实现</h2><p>只需</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span>:fixed</span><br><span class="line">buttom:<span class="number">0px</span></span><br></pre></td></tr></tbody></table></figure><p>就可以</p><h2 id="array-操作"><a href="#array-操作" class="headerlink" title="array 操作"></a>array 操作</h2><ul><li><p>Array.replace(a,b)</p><blockquote><p>把a用b替换，a可以使用正则表达式匹配多个内容</p><p>例如：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.replace(<span class="regexp">/\t/g</span>,<span class="string">' '</span>)</span><br></pre></td></tr></tbody></table></figure><p>选择所有的tab换成空格</p><p>再如：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.replace(<span class="regexp">/# |\n/g</span>,<span class="string">''</span>)</span><br></pre></td></tr></tbody></table></figure><p>选择形如# 和\n消除</p></blockquote></li><li><p>Array.split(a,b)</p><blockquote><p>接收两个传入参数，第一个是用什么把array分离开，第二个是可选项 分离的最大项数</p><p>例如:    </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"How are you doing today?"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(str.split(<span class="string">" "</span>) + <span class="string">"&lt;br /&gt;"</span>)</span><br><span class="line"><span class="built_in">document</span>.write(str.split(<span class="string">""</span>) + <span class="string">"&lt;br /&gt;"</span>)</span><br><span class="line"><span class="built_in">document</span>.write(str.split(<span class="string">" "</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p>输出</p><p>![image-20210221202626935](/Users/zxl/Library/Application Support/typora-user-images/image-20210221202626935.png)</p></blockquote></li><li><p>Array.join(a)</p></li></ul><blockquote><p>返回一个字符串。该字符串是通过把 arrayObject 的每个元素转换为字符串，然后把这些字符串连接起来，在两个元素之间插入 <em>separator</em> 字符串而生成的。</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>)</span></span><br><span class="line"><span class="javascript">arr[<span class="number">0</span>] = <span class="string">"George"</span></span></span><br><span class="line"><span class="javascript">arr[<span class="number">1</span>] = <span class="string">"John"</span></span></span><br><span class="line"><span class="javascript">arr[<span class="number">2</span>] = <span class="string">"Thomas"</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(arr.join())</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>![image-20210221202904663](/Users/zxl/Library/Application Support/typora-user-images/image-20210221202904663.png)</p><ul><li><p>Array.slice(start,end)</p><blockquote><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。</p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>请注意，该方法并不会修改数组，而是返回一个子数组。如果想删除数组中的一段元素，应该使用方法 Array.splice()。</p><p><strong>注释：</strong>您可使用负值从数组的尾部选取元素。</p><p><strong>注释：</strong>如果 end 未被规定，那么 slice() 方法会选取从 start 到数组结尾的所有元素。</p></blockquote></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>)</span></span><br><span class="line"><span class="javascript">arr[<span class="number">0</span>] = <span class="string">"George"</span></span></span><br><span class="line"><span class="javascript">arr[<span class="number">1</span>] = <span class="string">"John"</span></span></span><br><span class="line"><span class="javascript">arr[<span class="number">2</span>] = <span class="string">"Thomas"</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(arr + <span class="string">"&lt;br /&gt;"</span>)</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(arr.slice(<span class="number">1</span>) + <span class="string">"&lt;br /&gt;"</span>)</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(arr)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">George,John,Thomas</span><br><span class="line">John,Thomas</span><br><span class="line">George,John,Thomas</span><br></pre></td></tr></tbody></table></figure><ul><li><p>array.trim()</p><blockquote><p>去除头尾的空格</p></blockquote></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"       Runoob        "</span>;</span><br><span class="line">alert(str.trim());</span><br></pre></td></tr></tbody></table></figure><ul><li><p>Array.map()</p><blockquote><p>映射</p><p>类似于foreach</p><p>var data = [1, 2, 3, 4];</p><p>var arrayOfSquares = data.map(function (item) {</p><p>　　return item * item;</p><p>});</p><p>alert(arrayOfSquares); // [1, 4, 9, 16]</p><p>如果没有return就会把所有内容都映射成undefined</p></blockquote></li></ul><p>综合题：</p><p><img src="https://img-blog.csdnimg.cn/2020092411313370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTExMTM4NA==,size_16,color_FFFFFF,t_70#pic_center"></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);fs.readFile(<span class="string">'./data.text'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>{    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;    <span class="keyword">var</span> array = data.toString().split(<span class="string">"\n"</span>);<span class="keyword">var</span> arr = []<span class="keyword">var</span> temp =[]<span class="keyword">for</span>(i <span class="keyword">in</span> array) {    arr[i]=array[i].split(<span class="string">','</span>);    temp[i] = arr[i]    arr[i] = temp[i].join().trim().replace(<span class="regexp">/\s+/ig</span>,<span class="string">" "</span>).split(<span class="string">" "</span>)}<span class="built_in">console</span>.log(<span class="string">'arr'</span>,arr);});</span><br></pre></td></tr></tbody></table></figure><h2 id="给console-log加颜色"><a href="#给console-log加颜色" class="headerlink" title="给console.log加颜色"></a>给console.log加颜色</h2><p>使用npm下载colors</p><p>用法：colors.xxx.xxx(text)</p><p>支持：</p><blockquote><p><a href="https://www.npmjs.com/package/colors">https://www.npmjs.com/package/colors</a></p></blockquote><h2 id="获得文件扩展名"><a href="#获得文件扩展名" class="headerlink" title="获得文件扩展名"></a>获得文件扩展名</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)path.extname(<span class="string">'index.html'</span>)<span class="comment">// returns'.html'</span></span><br></pre></td></tr></tbody></table></figure><h2 id="获得文件名"><a href="#获得文件名" class="headerlink" title="获得文件名"></a>获得文件名</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.replace(<span class="regexp">/\.[^/.]+$/</span>, <span class="string">""</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="nodejs控制台输入流"><a href="#nodejs控制台输入流" class="headerlink" title="nodejs控制台输入流"></a>nodejs控制台输入流</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">'readline'</span>).createInterface({ <span class="attr">input</span>: process.stdin, <span class="attr">output</span>: process.stdout});readline.question(<span class="string">'Who are you?'</span>, <span class="function"><span class="params">name</span> =&gt;</span> { <span class="built_in">console</span>.log(<span class="string">`Hey there <span class="subst">${name}</span>!`</span>); readline.close();});</span><br></pre></td></tr></tbody></table></figure><p>用JQ实现左右侧的滑动标签</p><p>利用jq的animate实现</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"right_hide"</span>&gt;</span>                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-forward"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span>                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right_show"</span> <span class="attr">class</span>=<span class="string">"right_show"</span>&gt;</span>显示新建栏<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-backward"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{                $(<span class="string">"#right_hide"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{                    $(<span class="string">"#right1"</span>).animate({ <span class="attr">right</span>: <span class="string">'-288px'</span> });                    $(<span class="string">"#right_show"</span>).delay(<span class="number">500</span>).animate({ <span class="attr">right</span>: <span class="string">'0'</span> });                    <span class="keyword">if</span> ($(<span class="string">"#left1"</span>).css(<span class="string">"left"</span>) != <span class="string">"0px"</span>) {                        $(<span class="string">".canvasall"</span>).css(<span class="string">"width"</span>, <span class="string">"calc(100% - 60px)"</span>);                        $(<span class="string">".top_select_bar"</span>).css(<span class="string">"width"</span>, <span class="string">"calc(100% - 60px)"</span>);                    } <span class="keyword">else</span> {                        $(<span class="string">".canvasall"</span>).css(<span class="string">"width"</span>, <span class="string">"calc(80% - 30px)"</span>);                        $(<span class="string">".top_select_bar"</span>).css(<span class="string">"width"</span>, <span class="string">"calc(80% - 30px)"</span>);                    }                });                $(<span class="string">"#right_show"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{                    $(<span class="string">"#right_show"</span>).animate({ <span class="attr">right</span>: <span class="string">'-30px'</span> });                    $(<span class="string">"#right1"</span>).delay(<span class="number">500</span>).animate({ <span class="attr">right</span>: <span class="string">'0'</span> });                    <span class="keyword">if</span> ($(<span class="string">"#left1"</span>).css(<span class="string">"left"</span>) != <span class="string">"0px"</span>) {                        $(<span class="string">".canvasall"</span>).css(<span class="string">"width"</span>, <span class="string">"calc(100% - 318px)"</span>);                        $(<span class="string">".top_select_bar"</span>).css(<span class="string">"width"</span>, <span class="string">"calc(100% - 318px)"</span>);                    } <span class="keyword">else</span> {                        $(<span class="string">".canvasall"</span>).css(<span class="string">"width"</span>, <span class="string">"calc(80% - 288px)"</span>);                        $(<span class="string">".top_select_bar"</span>).css(<span class="string">"width"</span>, <span class="string">"calc(80% - 288px)"</span>);                    }                });});</span><br></pre></td></tr></tbody></table></figure><p>原理就是下边遮盖一层，点击后让上边这层向左/右滑走，下边那层滑入即可。</p><h2 id="实现可拖动div"><a href="#实现可拖动div" class="headerlink" title="实现可拖动div"></a>实现可拖动div</h2><p>首先在需要缩放的div旁边实现一个小div</p><h2 id="js深拷贝复制element"><a href="#js深拷贝复制element" class="headerlink" title="js深拷贝复制element"></a>js深拷贝复制element</h2><p><code>var newnode = oldnode.clone(true)</code></p><p>true参数表示克隆节点所有后代</p><h2 id="html实现滑块"><a href="#html实现滑块" class="headerlink" title="html实现滑块"></a>html实现滑块</h2><p>用h5自带的input就可以实现</p><p><code> &lt;input type="range" min="10" max="300" value="100" step="10" οnchange="showValue(this.value)" style=""&gt;</code></p><p>然后只需要写个showValue函数就可以修改值</p><h2 id="设置某个div滚动条位置"><a href="#设置某个div滚动条位置" class="headerlink" title="设置某个div滚动条位置"></a>设置某个div滚动条位置</h2><p><code>先给div设置一个id然后使用document.getElementbyid.scroll(x,y)调整</code></p><blockquote><p>其中xy可以用ll.scrollWidth/ll.scrollHeight获得最大值</p></blockquote><h2 id="哈希表-map用法"><a href="#哈希表-map用法" class="headerlink" title="哈希表/map用法"></a>哈希表/map用法</h2><blockquote><p>1，js创建map对象</p><p>var map = new Map();</p><p>2.将键值对放入map对象</p><p>map.set(“key”,value)</p><p>map.set(“key1”,value1)</p><p>map.set(“key2”,value2)</p><p>3.根据key获取map值</p><p>map.get(key)</p><p>4.删除map指定对象</p><p>delete map[key]</p><p>或</p><p>map.delete(key)</p><p>5.循环遍历map</p><p>map.</p><p>forEach(function(key){<br>　　console.log(“key”,key) //输出的是map中的value值</p><p>})</p></blockquote><h2 id="js取整"><a href="#js取整" class="headerlink" title="js取整"></a>js取整</h2><blockquote><p>只保留整数<br>parseInt(1.111)</p></blockquote><h2 id="css渐变过渡动画"><a href="#css渐变过渡动画" class="headerlink" title="css渐变过渡动画"></a>css渐变过渡动画</h2><blockquote><p>transition: property duration timing-function delay </p></blockquote><p>transition属性是个复合属性，包括以下几个子属性：</p><ul><li>transition-property ：规定设置过渡效果的css属性名称</li><li>transition-duration ：规定完成过渡效果需要多少秒或毫秒</li><li>transition-timing-function ：指定过渡函数，规定速度效果的速度曲线</li><li>transition-delay ：指定开始出现的延迟时间</li></ul><p>默认值分别为：all 0 ease 0 </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div {  width: 100px;  height: 100px;  background-color: orange;  margin: 20px auto;  border-radius: 100%;  -webkit-transition-property: -webkit-border-radius;  transition-property: border-radius;  -webkit-transition-duration: 3s;  transition-duration: 3s;  -webkit-transition-timing-function：ease; transition-timing-function：ease; div:hover {  border-radius: 0px;}</span><br></pre></td></tr></tbody></table></figure><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;margin参数数量&quot;&gt;&lt;a href=&quot;#margin参数数量&quot; class=&quot;headerlink&quot; title=&quot;margin参数数量&quot;&gt;&lt;/a&gt;margin参数数量&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;margin: 20px;（上、下、左、右各20px。）&lt;/p&gt;
&lt;p&gt;margin: 20px 40px;（上、下20px；左、右40px。）&lt;/p&gt;
&lt;p&gt;margin: 20px 40px 60px;（上20px；左、右40px；下60px。）&lt;/p&gt;
&lt;p&gt;margin: 20px 40px 60px 80px;（上20px；右40px；下60px；左80px。）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;单独设置角度&quot;&gt;&lt;a href=&quot;#单独设置角度&quot; class=&quot;headerlink&quot; title=&quot;单独设置角度&quot;&gt;&lt;/a&gt;单独设置角度&lt;/h2&gt;&lt;p&gt;&lt;code&gt;border-bottom-left-radius:2px&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="http://www.zhaoxuanlang.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="js" scheme="http://www.zhaoxuanlang.cn/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>1NF，2NF，3NF，BCNF（3NF和BCNF的区别）</title>
    <link href="http://www.zhaoxuanlang.cn/2020/10/21/1nf%EF%BC%8C2nf%EF%BC%8C3nf%EF%BC%8Cbcnf%EF%BC%883nf%E5%92%8Cbcnf%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%89/"/>
    <id>http://www.zhaoxuanlang.cn/2020/10/21/1nf%EF%BC%8C2nf%EF%BC%8C3nf%EF%BC%8Cbcnf%EF%BC%883nf%E5%92%8Cbcnf%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%89/</id>
    <published>2020-10-21T11:31:53.000Z</published>
    <updated>2021-08-09T15:49:26.427Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><strong><em><strong>候选码：若关系中的某一组属性的值能唯一地标识一个元组，而其子集不能，则称该属性组为候选码；</strong></em></strong></p></li><li><p><strong><em><strong>主码：若一个关系有多个候选码，则选定其中一个为主码；</strong></em></strong></p></li><li><p><strong><em><strong>主属性&amp;&amp;非主属性：候选码的诸属性都称为主属性，不包含在任何候选码中的属性称为非主属性；</strong></em></strong></p><span id="more"></span></li><li><p>  1NF</p></li></ul><p>&nbsp; &nbsp; &nbsp; &nbsp;满足最低要求的叫第一范式。</p><ul><li>  2NF</li></ul><p>&nbsp; &nbsp; &nbsp; 若R属于第一范式，且每一个非主属性完全函数依赖于任何一个候选码，则R属于2NF</p><ul><li>  3NF</li></ul><p>&nbsp; &nbsp; &nbsp; 若R中的每一个非主属性既不传递依赖于码，也不部分依赖于码，则R属于第三范式</p><ul><li>  BCNF</li></ul><ol><li> 所有非主属性对每一个码都是完全函数依赖；</li><li> 所有的主属性对每一个不包含它的码，也是完全函数依赖；</li><li> 没有任何属性完全函数依赖于非码的任何一组属性。</li></ol><ul><li>  栗子1</li></ul><p>关系模式SJP(S,J,P)中，S是学生，J表示课程，P表示名次，每一个学生选修每门课程的成绩都会有一定的名次，每门课程中每一个名次只有一个学生(即没有并列名次）。</p><p>函数依赖（S,J）决定P，（J,P）决定S;</p><p>所以（S,J）与（J,P）都可以作为候选码，这两个码由两个属性组成，不存在非主属性，显然没有非主属性对码的传递和部分函数依赖，所以SJP属于第三范式；而且满足上面1,2,3三条，所以SJP属于BCNF；</p><ul><li>  栗子2</li></ul><p>关系模式STJ（S,T,J）中，S是学生，T是教师，J是课程。每一教师只教一门课，每门课有若干教师，某一学生选定某课程，就得到一个固定的教师。</p><p>函数依赖：（S,J）决定T;（S,T）决定J;T决定J;</p><p>这里候选码（S,J），（S,T）；</p><p>不存在非主属性对码的部分或传递函数依赖，所以STJ属于第三范式；</p><p>但是J部分函数依赖于码（T,S），不满足第2条，所以STJ不属于BCNF；</p>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;strong&gt;候选码：若关系中的某一组属性的值能唯一地标识一个元组，而其子集不能，则称该属性组为候选码；&lt;/strong&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;strong&gt;主码：若一个关系有多个候选码，则选定其中一个为主码；&lt;/strong&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;strong&gt;主属性&amp;amp;&amp;amp;非主属性：候选码的诸属性都称为主属性，不包含在任何候选码中的属性称为非主属性；&lt;/strong&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="http://www.zhaoxuanlang.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>模式分解是否为无损链接的算法分析</title>
    <link href="http://www.zhaoxuanlang.cn/2020/10/21/%E6%A8%A1%E5%BC%8F%E5%88%86%E8%A7%A3%E6%98%AF%E5%90%A6%E4%B8%BA%E6%97%A0%E6%8D%9F%E9%93%BE%E6%8E%A5%E7%9A%84%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    <id>http://www.zhaoxuanlang.cn/2020/10/21/%E6%A8%A1%E5%BC%8F%E5%88%86%E8%A7%A3%E6%98%AF%E5%90%A6%E4%B8%BA%E6%97%A0%E6%8D%9F%E9%93%BE%E6%8E%A5%E7%9A%84%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/</id>
    <published>2020-10-21T11:30:44.000Z</published>
    <updated>2021-08-10T00:08:25.356Z</updated>
    
    <content type="html"><![CDATA[<p>方法一：无损连接定理</p><p>关系模式R(U，F)的一个分解，ρ={R1&lt;U1,F1&gt;,R2&lt;U2,F2&gt;}具有无损连接的充分必要条件是：</p><p>U1∩U2→U1-U2 €F+ 或U1∩U2→U2&nbsp;-U1€F+</p><span id="more"></span><p>方法二：算法</p><p>ρ={R1&lt;U1,F1&gt;,R2&lt;U2,F2&gt;,…,Rk&lt;Uk,Fk&gt;}是关系模式R&lt;U,F&gt;的一个分解，U={A1,A2,…,An}，F={FD1,FD2,…,FDp}，并设F是一个最小依赖集，记FDi为Xi→Alj，其步骤如下：</p><p>① 建立一张n列k行的表，每一列对应一个属性，每一行对应分解中的一个关系模式。若属性Aj&nbsp;Ui，则在j列i行上真上aj，否则填上bij；</p><p>② 对于每一个FDi做如下操作：找到Xi所对应的列中具有相同符号的那些行。考察这些行中li列的元素，若其中有aj，则全部改为aj，否则全部改为bmli，m是这些行的行号最小值。</p><p><strong>如果在某次更改后，有一行成为：a1,a2,…,an，则算法终止。且分解ρ具有无损连接性</strong>，否则不具有无损连接性。</p><p>对F中p个FD逐一进行一次这样的处理，称为对F的一次扫描。</p><p>③ 比较扫描前后，表有无变化，如有变化，则返回第②&nbsp;步，否则算法终止。如果发生循环，那么前次扫描至少应使该表减少一个符号，表中符号有限，因此，循环必然终止。</p><p>举例1：已知R&lt;U,F&gt;，U={A,B,C}，F={A→B}，如下的两个分解：</p><p>① ρ1={AB,BC}</p><p>② ρ2={AB,AC}</p><p>判断这两个分解是否具有无损连接性。</p><p>①因为AB∩BC=B，AB-BC=A，BC-AB=C</p><p>所以B→A ¢F+，B→C&nbsp;¢ F+</p><p>故ρ1是有损连接。</p><p>②&nbsp;因为AB∩AC=A，AB-AC=B，AC-AB=C</p><p>所以A→B €F+，A→C ¢F+</p><p>故ρ2是无损连接。</p><p>举例2：已知R&lt;U,F&gt;，U={A,B,C,D,E}，F={A→C,B→C,C→D,DE→C,CE→A}，R的一个分解为R1(AD)，R2(AB)，R3(BE)，R4(CDE)，R5(AE)，判断这个分解是否具有无损连接性。</p><p>&nbsp;① 构造一个初始的二维表，若“属性”属于“模式”中的属性，则填aj，否则填bij</p><p><img src="https://images0.cnblogs.com/blog2015/652582/201504/211054351402115.png"></p><p>② 根据A→C，对上表进行处理，由于属性列A上第1、2、5行相同均为a1，所以将属性列C上的b13、b23、b53改为同一个符号b13（取行号最小值）。</p><p><img src="https://images0.cnblogs.com/blog2015/652582/201504/211056092031146.png"></p><p>③ 根据B→C，对上表进行处理，由于属性列B上第2、3行相同均为a2，所以将属性列C上的b13、b33改为同一个符号b13（取行号最小值）。</p><p><img src="https://images0.cnblogs.com/blog2015/652582/201504/211056516099856.png"></p><p>④ 根据C→D，对上表进行处理，由于属性列C上第1、2、3、5行相同均为b13，所以将属性列D上的值均改为同一个符号a4。</p><p><img src="https://images0.cnblogs.com/blog2015/652582/201504/211057216409447.png"></p><p>⑤ 根据DE→C，对上表进行处理，由于属性列DE上第3、4、5行相同均为a4a5，所以将属性列C上的值均改为同一个符号a3。</p><p><img src="https://images0.cnblogs.com/blog2015/652582/201504/211057502961728.png"></p><p>⑥ 根据CE→A，对上表进行处理，由于属性列CE上第3、4、5行相同均为a3a5，所以将属性列A上的值均改为同一个符号a1。</p><p><img src="https://images0.cnblogs.com/blog2015/652582/201504/211058348282823.png"></p><p>⑦ 通过上述的修改，使第三行成为a1a2a3a4a5，则算法终止。且分解具有无损连接性。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;方法一：无损连接定理&lt;/p&gt;
&lt;p&gt;关系模式R(U，F)的一个分解，ρ={R1&amp;lt;U1,F1&amp;gt;,R2&amp;lt;U2,F2&amp;gt;}具有无损连接的充分必要条件是：&lt;/p&gt;
&lt;p&gt;U1∩U2→U1-U2 €F+ 或U1∩U2→U2&amp;nbsp;-U1€F+&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="http://www.zhaoxuanlang.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>网站开发日志</title>
    <link href="http://www.zhaoxuanlang.cn/2020/08/06/%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/"/>
    <id>http://www.zhaoxuanlang.cn/2020/08/06/%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/</id>
    <published>2020-08-06T05:26:06.000Z</published>
    <updated>2021-08-09T11:39:37.908Z</updated>
    
    <content type="html"><![CDATA[<p>2020-08-06</p><ul><li>  新增左侧菜单栏功能</li><li>  新增菜单栏对比色功能</li></ul><p>菜单栏实现：内侧标题position使用relative可自动上下移动，想打开和关闭的组件使用display:block和none控制显示与隐藏，在标题栏div添加onclick事件更改display参数即可实现</p><p>对比色实现：使用getelementsbyclassname获得一样classname的一个列表，for循环让列表[i]项的style.backgroundColor（注意这里和css不一样）变成不一样的颜色（加余数判定）</p><p>注意：for循环内如果设置多个表的颜色，表内元素必须相同，不然进行时报错回中止for循环！！！</p><p>2020-08-07</p><ul><li>  去除左右滚动条</li><li>  调整左侧菜单布局样式</li></ul><p>滚动条：overflow:scroll;overflow-x:hidden</p><p>2020-08-10</p><ul><li>  顶部菜单和右侧菜单添加一些内容</li><li>  更改整体配色</li><li>  更改整体布局，大小</li></ul><p>右侧菜单设置有问题待修复，下拉菜单：<select><option>若要弄这样的表，灰色部分使用th白色部分用td就可以分开设置，td内部加input就可以输入值2020-08-12  添加鼠标悬浮气泡功能  样式小调整123456789101112131415161718192021222324252627static showdiv(){        var tool = document.getElementsByClassName('geSidebarTooltip')[0];        //图片更改        var locate = this.firstElementChild.src;        var cimg = tool.firstElementChild;        cimg.src = locate;        //文字更改        var words =this.id.charAt(4).toUpperCase() + this.id.substr(5);        tool.children[1].innerText=words;        //位置更改        var t = this.offsetTop;        tool.style.top=t-10+'px';        tool.style.display='block';    }    static hidediv(){        var tool = document.getElementsByClassName('geSidebarTooltip')[0];        tool.style.display='none';    }var cpnt_btn_list = document.querySelectorAll('.component_btn');cpnt_btn_list.forEach(btn =&gt;{    // formed as btn_ + component name    var cpnt_str = btn.id.charAt(4).toUpperCase() + btn.id.substr(5);    btn.component_type = eval(cpnt_str);    btn.addEventListener("click", Component_btn.attachComponent);    btn.addEventListener('mouseover',Component_btn.showdiv);    btn.addEventListener('mouseout',Component_btn.hidediv);})以上为气泡核心代码，思路为先获得目标位置，图片src和文字描述，再通过js代码换进去，添加mouse over和mouseout就可以添加鼠标悬浮和移出功能只需要在html文件中添加一个div即可，div中添加主图img，下方文字div和左侧小箭头img。2020-08-13  添加checkbox函数，可以控制输入框disable值  右侧菜单新增奇偶颜色效果  新增dragging bar箭头效果  修复bugcheckbox首先需要定义函数，添加onclick函数，定义两个变量分别选择box和需要更改的input list，第一个可以直接用id，第二个建议先选出父元素再用tagname选出input。添加判断条件q.checked，内部两个for循环就可解决，注意disabled是attrabute，需要用set和remove，set要传入两个参数箭头效果用css就可以，用js不知道为什么会出错2020-08-19  新增顶部工具栏标签  新增标签换颜色函数  将函数运用到左侧和顶部标签button标签的border是没按下时的边框，outline是按下之后的边框，建议颜色都是inherith换色函数需要首先把所有标签都编号，判断当下颜色是否改变，没改变就变，然后把所有其他的都变成初始值应用的时候使用箭头函数btn=&gt;{}此时btn就是每次点击的this，使用匿名函数可以实现有参数的函数2020-08-21  尝试svg  增加顶部工具栏标签个数js中数字直接相加有可能是首尾相连，所以需要用parseInt转换！！2020-08-31  完成批量增加html元素功能添加时需要先选中要添加的位置，最好做一个空的div，然后使用innerHTML的方式直接添加，需注意的是换行和”都需要用\转义删除时只需要将其innerHTML变成””就可以2020-10-26人工alert函数：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647    &lt;div id="light" class="white_content"&gt;    &lt;/div&gt;     &lt;div id="fade" class="black_overlay"&gt;&lt;/div&gt;.black_overlay{     display: none;     position: absolute;     top: 0%;     left: 0%;     width: 100%;     height: 100%;     background-color: black;     z-index:1001;     -moz-opacity: 0.8;     opacity:.80;     filter: alpha(opacity=88); } .white_content {     display: none;     position: absolute;     top: 35%;    left: 45%;    width: 10%;    height: 15%;    padding: 20px;     background-color: white;     z-index:1002;     overflow: auto;     border: 5px solid black;} function artificial_alert(text){    document.getElementById('light').innerHTML="&lt;p&gt;"+text+"&lt;/p&gt;&lt;button type=\"button\" onclick=\"closeDialog()\"&gt;关闭&lt;/button&gt;"    if(document.getElementById('light').style.display== 'block'){        document.getElementById('light').style.display = 'none';        document.getElementById('fade').style.display = 'none';    }else{        document.getElementById('light').style.display = 'block';        document.getElementById('fade').style.display = 'block';    }}原理就是动态添加需要alert的文字进去2020-11-04最近在搞bootstrap导入时只需要&lt;link&nbsp;rel="stylesheet"&nbsp;href="https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css"&gt; &lt;script&nbsp;src="https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js"&gt;&lt;/script&gt; &lt;script&nbsp;src="https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js"&gt;&lt;/script&gt;就可以，但是在npm下运行时需要把jq下载到本地，同时引入在线jq和本地jq才可以输入框默认值，点击清除，不点击恢复：onfocus="if(this.value=='test'){this.value=''}"&nbsp;onblur="if(this.value==''){this.value='test'}"&nbsp;value="test"用for循环appendChild时不能只靠innerHTML修改元素，必须重新声明才可以列表可以使用push 和pop2020/11/23实现长宽比：垂直方向的padding这是最早提出的一种实现方案，主要借助的原理是利用padding-top或者padding-bottom的百分比值，实现容器长宽比。在CSS中padding-top或padding-bottom的百分比值是根据容器的width来计算的。如此一来就很好的实现了容器的长宽比。采用这种方法，需要把容器的height设置为0。而容器内容的所有元素都需要采用position:absolute，不然子元素内容都将被padding挤出容器（造成内容溢出）。比如我们容器的长宽比是16:9，那么根据计算：100% * 9 / 16可以得到56.25%。如果你希望的是4:3，那么对应的就是100% * 3 / 4。具体的CSS代码如下：12345678910111213.aspectration {    position: relative; /*因为容器所有子元素需要绝对定位*/    height: 0; /*容器高度是由padding来控制，盒模型原理告诉你一切*/    width: 100%; }.aspectration[data-ratio="16:9"] {    padding-top: 56.25%;}.aspectration[data-ratio="4:3"]{    padding-top: 75%;}通过通配符*选择器，让其子元素的宽高和容器.aspectration一样大小：1234567.aspectration &gt; * {    position: absolute;    left: 0;    top: 0;    width: 100%;    height: 100%;}</option></select></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2020-08-06&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;  新增左侧菜单栏功能&lt;/li&gt;
&lt;li&gt;  新增菜单栏对比色功能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;菜单栏实现：内侧标题position使用relative可自动上下移动，想打开和关闭的组件使用display:block和none</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://www.zhaoxuanlang.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>AADS-ExamNotes</title>
      <link href="/2023/01/30/AADS-ExamNotes/"/>
      <url>/2023/01/30/AADS-ExamNotes/</url>
      
        <content type="html"><![CDATA[<ul><li>MaxFlow</li><li>Linear Programming Problem</li><li>Randomized Algorithm</li><li>Hash</li><li>Veb Tree</li><li>NP Completeness</li><li>Exact Exponetial problems</li><li>Approximation Algorithm</li><li>Polygon Triangulation</li></ul><span id="more"></span><h1>maxflow</h1><h2 id="outline"><a class="header-anchor" href="#outline">¶</a>outline</h2><ul><li>flow network,</li><li>flow: a function return a real value and has two constraints<ul><li>Capacity constraint</li><li>flow conservation</li></ul></li><li>FF method<ul><li>Initialize flow f, while there’s an augmenting path p in the residual network, add it</li><li>residual network<ul><li>residual capacity</li><li>flow augmentation</li></ul></li></ul></li><li>cut off flow networks<ul><li>definition: a partition of V into S and T</li><li>f(S,T) = s到t所有边的f - t到s所有边的f</li><li>minimum cut: a cut whose capacity is the minimum overall cut of the network</li></ul></li></ul><h2 id="presentation"><a class="header-anchor" href="#presentation">¶</a>presentation</h2><p><strong>flow network:</strong> G=(V,E) is a directed graph in which each edge $(u,v)\in E$ has a nonnegative capacity $c(u,v)\ge 0$. We also require if E contains an edge(u,v) there’s no reverse edge (v,u). If there’s no edge between two vertexes we define the capacity between these two vertex to be 0. There’s a source s and a sink t in a network.</p><p><strong>flow:</strong> a function receive two vertexes and return a real value which stands for the flow value between them. A flow has two properties:</p><p>the first is capacity constraint, which is for all $u,v\in V$ we require $0 \le f(u,v) \le c(u,v)$.</p><p>The second is flow conservation, which is for all $u \in V-{s, t}$ we require $\sum_{v \in V} f(v, u)=\sum_{v \in V} f(u, v)$, which means the flow that goes out is equal to the flow that goes in.</p><p>The value |f| of a flow is the sum of all flow go out from souce minuse all flow goes in the source, and defined as $|f|=\sum_{\nu \in V} f(s, v)-\sum_{\nu \in V} f(v, s)$</p><p>In max-flow we want to find a flow of maximum value.</p><p>To solve the problem we can use Ford-Fulkerson Method. It forst init a flow f to be 0, and while there’s an augmenting path p in the residual network $G_f$ we augment the flow f with p.</p><p>**Residual network:**a residual network is made up of the same nodes, and between two adjencnt nodes we add two reverse edges. The capacity of each edges are from current flow of the graph and it’s based of this:$c_f(u, v)= \begin{cases}c(u, v)-f(u, v) &amp; \text { if }(u, v) \in E \ f(v, u) &amp; \text { if }(v, u) \in E \ 0 &amp; \text { otherwise }\end{cases}$</p><p>we can remove all edges that has a capacity of 0.</p><p>After we get the flow from the algorithm we want to know if it’s actually a max flow, so we need to use Max-flow min-cut theorem</p><p>First we need to specify what’s a cut.</p><p><strong>cut</strong>:a cut of flow is a partition of V into S and T such that source node is in set S and the sink node is in set T.</p><p>The net flow of a cut is the total flow from set S to set T minus the total flow from set T to set S and it’s denoted as $f(S, T)=\sum_{u \in S} \sum_{v \in T} f(u, v)-\sum_{u \in S} \sum_{v \in T} f(v, u)$…</p><p>The capacity of a cut is the sum of all capacities from set S to set T and it’s denoted as $c(S, T)=\sum_{u \in S} \sum_{v \in T} c(u, v)$.</p><p>Then we have the theorem: if f is a flow in a flow network G with source s sink t, then we have following equivalent conditions:</p><ol><li>f is a max flow in G</li><li>the residual network $G_f$ contains no augmenting paths</li><li>|f| = c(S,T) for some cut(S,T) of G</li></ol><p><strong>Proof:</strong></p><p>(1)=&gt;(2): suppose f is a max flow and there’s an augmenting path $f_p$ in residual network, then after augmenting $f_p$ the value of f will increase, which contradics with f is a max flow.</p><p>(2)=&gt;(3):suppose $G_f$ has no augmenting path, so it have no path from source to sink.Let set S = $\left{v \in V:\right.$ there exists a path from $s$ to $v$ in $\left.G_f\right}$and T = V - S</p><p>The partition (S,T) is a cut.</p><p>Now we can say there’s a u in S and v in T. If(u,v) is in E, then we must have f(u,v) = c(u,v) because otherwise residual network will have an augment path.  If (v,u) is in E,then we must have f(v,u) = 0 because otherwise in residual there will be some room for cancellation. And if (u,v)and(v,u) both not in E we have both two flow to be 0.</p><p>Then we have:<br>$$<br>\begin{aligned}<br>f(S, T) &amp; =\sum_{u \in S} \sum_{v \in T} f(u, v)-\sum_{v \in T} \sum_{u \in S} f(v, u) \<br>&amp; =\sum_{u \in S} \sum_{v \in T} c(u, v)-\sum_{v \in T} \sum_{u \in S} 0 \<br>&amp; =c(S, T)<br>\end{aligned}<br>$$<br>Then by lemma 4 that is flow value of a cut is equal to the net flow value of its cut we can get |f| = f(S,T), then we have |f| = c(S,T). Because of the reason of time I don’t prove lemma 4 now, you can ask me to do that later.</p><p>(3)=&gt;(1):</p><p>By Corollary we know that for all cuts the flow value is less or equal to the cut capacity, and when it equals we can know f is a max flow.</p><p><img data-src="https://i.imgur.com/AK4Quf1.png" alt="image-20230125104137157 PM"></p><p><img data-src="https://i.imgur.com/E2WAAma.png" alt="image-20230125104402866 PM"></p><h1>Linear Programming Problem</h1><p>Problem: There’s a list of variables with some constraints, we have a linear objective function and its feasible solution which is a set of values x1 x2… x6 that can satisfy all constraints. The set of all feasible solutions is called the feasible region. What we want is an optimal solution that has the minimum or maximum objective value.</p><p>The solution is the SIMPLEX algorithm.</p><p>Start with the standard form. Procedures to produce it:</p><ol><li>transform minimization problem to maximization problem</li><li>replace variables that don’t have non-negativity constraint into two non-negative variables and xj is replaced by xj’ - xj’’<ol><li>只有x1&gt;=0没有x2&gt;=0</li></ol></li><li>change equal constraint into a pair of opposite inequality constraint<ol><li>x1+x2 = 0 变成x1 + x2 &gt;=0 和 x1 + x2 &lt;= 0</li></ol></li><li>change all &gt;= into &lt;=</li><li>Rename variables</li></ol><p>Slack variable</p><p>there’s a slack between inequality’s left side and right side. We add a new variable to the left side and make inequality become equality.Add z = objective function, e.g. z = 0 + 2x1 - 3x2 + 3x3</p><p>The feasible solution: all variables including nonbasic(right-hand side) and basic(left-hand side) are positive.</p><p>Basic solution: all nonbasic variables to 0.</p><p>SIMPLEX:</p><ol><li>Pivoting: find x1’s binding and add until there’s a basic variable that becomes negative. then we have a feasible solution(9,0,0,21,6,0)and z = 27.Then we rewrite the slack form and put x1 to the left side, its binding variable to the right side. And replace all x1 with a formula with x2,x3, and x6.</li><li>And then you add another none basic variable to become basic until there’s no room for the original none basic to grow, now it’s the optimal solution.</li></ol><p>Termination:</p><ul><li>When all variables in the objective function &lt;= 0</li><li>When LP is unbounded<ul><li>an unbasic increase all basic are also increase</li></ul></li></ul><p>Cycling:</p><ul><li>If a set of basic and none basic is pivoted again</li><li>if SIMPLEX fails to terminate then it cycles</li><li>Avoid: always choose the variable with positive coefficients and pick one with the smallest indices. And pick the smallest indices to leave. (最小下标)</li><li></li></ul><p>Infeasible First Basic Solution</p><ul><li>Define an auxiliary LP problem</li><li>it’s always feasible and bounded</li></ul><ol><li>Find max -x0</li><li>Change each ax &lt;= b into ax-x0 &lt;= b</li><li>add x0 &gt;= 0</li></ol><p>it is bounded as x0 &gt;=0 so max -x0 is 0</p><p>If it’s 0 then the original solution is feasible</p><p>if it’s negative original is infeasible.</p><p>如果是0的话把x0=0就成为原始的simplex问题了，就有一组解可以解决。</p><p>Dual problem:</p><p>if min of dual = max of original then it’s the optimal solution</p><p>It’s used to prove Simplex</p><ol><li>Multiply constraints by y1 y2 and make the sum less than the right side’s sum<ol><li>Y1(x1-x2-x3+3x4) + y2(5x1+x2+3x3+8x4)+y3(-x1+2x2+3x3-5x4)&lt;= y1 + 55y2+3y3</li></ol></li><li>The left side has an upper bound of LP<ol><li>y1+5y2-y3&gt;=4</li></ol></li><li>4x1+x2+5x3+3x4 &lt;= y1+55y2+3y3</li><li>Minimize the right side with 2’s constraints and get its dual problem</li><li>(transpose the original matrix)</li></ol><p><img data-src="https://i.imgur.com/uWUZFSY.png" alt="image-20230109104722576 PM"></p><p>weak duality</p><p><img data-src="https://i.imgur.com/lppWVYD.png" alt="image-20230109104649736 PM"></p><p>If there’s an optimal solution for dual then there’s an optimal solution for a primal solution.</p><p><img data-src="https://i.imgur.com/xqzboKa.png" alt="image-20230109105139766 PM"></p><p><img data-src="https://i.imgur.com/ybO2cMj.png" alt="image-20230109105209994 PM"></p><p>m = constrains数量，n=variables数量</p><p>当原始的constrain远大于variables的时候解决Dual比解决原始问题简单</p><h2 id="Outline"><a class="header-anchor" href="#Outline">¶</a>Outline</h2><ol><li>Introduction</li><li>Objective function,constraint</li><li>Example</li><li>SIMPLEX algorithm</li></ol><p>Example:</p><p><img data-src="https://i.imgur.com/qaweUh5.png" alt="image-20230111125255676 PM"></p><h2 id="Presentation"><a class="header-anchor" href="#Presentation">¶</a>Presentation</h2><p>I’m going talk about linear problem. In real life a lot of problems can be solved by this algorithm, so linear program is quite useful in many practial areas.</p><p>a general linear problem consists of an objective function that describes some relation between the variables of the problem, which we want to either be maximize or minimize; it also consists of linear constraints on the variables.</p><p>Given a linear problem, we first need to transform it into standard form.First I need to introduce what’s standard form. In standard form we have an maximization object function with n variables and m linear inequalities.And we are going to use these to manage to get the maximize of the object function,like this:</p><p><img data-src="https://i.imgur.com/MOcnpJH.png" alt="image-2023011330653524 PM"></p><p>So there are non-negativity constraints on all the n variables and all other constrains should be less than equal.</p><p>(Do standard form)</p><p>Then, in order to solve the problem, we need to tranform standard form into slack form by adding a slack variable to make all the inequality to become equal.</p><p>(Do slack form)</p><p>Then we can apply SIMPLEX algorithm on the slack form by continuously changing the basic solution by pivoting variables to and from the basic variables. Pick a variables in the objective function which positively increases the value, and pivot it with the basic variable that bottlenecks how much the non-basic variable can be increased.</p><p>(Do SIMPLEX)</p><p>In this example SIMPLEX algorithm runs normally and give a resonable result.However, in some other circumenstences it may occur some special cases, like it won’t stop, or basic solution is not feasible, or why it return the optimal solution. Due to limited time I’d like to only discuss about the last one.</p><p>First, we have sth called the dual of a linear program.which we can use to show that the SIMPLEX algorithm actually computes the optimal solution to the problem. I just want to talk about the weak duality theorem, which states that the solution to the DUAL of a linear program (PRIMAL) is always an upper bound to the solution to the PRIMAL.</p><p>The dual looks like follows:</p><p><img data-src="https://i.imgur.com/QLqyOJH.png" alt="image-20230113105655482 PM"></p><p>So, what the weak duality theorem says is that it is always the case that</p><p><img data-src="https://i.imgur.com/nwxbLi0.png" alt="image-20230113105716981 PM"></p><p>Proof are as follows:</p><p><img data-src="https://i.imgur.com/X6IqMIZ.png" alt="image-20230113105738794 PM"></p><h1>Randomized Algorithm</h1><p>Randomized algorithms are algorithms that add randomness in the <a href="http://procedure.In">procedure.In</a> some cases they can be the most fast or the most simple one among all other solutions to the problem. There are two types of randomized algorithm which is Las vegas and Monte Carlo. The first one always return the correct answer but the time it consumes may vary. The second one will end in a specfic time but the result it returns may not be that correct.</p><h2 id="Randomized-Quick-Sort"><a class="header-anchor" href="#Randomized-Quick-Sort">¶</a>Randomized Quick Sort</h2><h3 id="Algorithm"><a class="header-anchor" href="#Algorithm">¶</a>Algorithm</h3><p>It’s similar to quick sort but the point is choose tach pivot randomly.</p><p>Example:[3,5,2,1,4].</p><h3 id="Why-it-sorts-the-numbers"><a class="header-anchor" href="#Why-it-sorts-the-numbers">¶</a>Why it sorts the numbers?</h3><p>Proof: indoction on n</p><p>n=0 trival</p><p>Assume true for n-1 numbers</p><p>Then we return RandQS(L) + $S_i$ + RandQS®,L+R &lt;= n-1</p><p>And the result is sorted.</p><h3 id="What-might-be-the-case"><a class="header-anchor" href="#What-might-be-the-case">¶</a>What might be the case?</h3><h4 id="Lucky-case"><a class="header-anchor" href="#Lucky-case">¶</a>Lucky case:</h4><h4 id="S-i-is-always-medium"><a class="header-anchor" href="#S-i-is-always-medium">¶</a>$S_i$ is always medium</h4><p>Running time: T(n) =O(n)+2T(n/2)=…=O(n)+2O(n/2)+4O(n/4)+…+nO(1)</p><p>O(nlogn)</p><h4 id="Unlucky-case"><a class="header-anchor" href="#Unlucky-case">¶</a>Unlucky case:</h4><h4 id="S-i-is-always-minimum"><a class="header-anchor" href="#S-i-is-always-minimum">¶</a>$S_i$ is always minimum</h4><p>O(n^2)</p><h4 id="average-case"><a class="header-anchor" href="#average-case">¶</a>average case:</h4><p>O(nlogn). proof</p><p>$\mathbb{E}[#$ comparisons $]=\mathbb{E}\left[\sum_{i&lt;j} X_{i j}\right]=\sum_{i&lt;j} \mathbb{E}\left[X_{i j}\right]$</p><p>$\mathbb{E}\left[X_{i j}\right]=\left(1-p_{i j}\right) \cdot 0+p_{i j} \cdot 1=p_{i j}$</p><p>$\mathbb{E}[#$ comparisons $]=\sum_{i&lt;j} \mathbb{E}\left[X_{i j}\right]=\sum_{i&lt;j} p_{i j}$</p><p>$\begin{aligned} p_{i j} &amp; =\operatorname{Pr}[c \in{i, j} \mid c \in{i, i+1, \ldots, j} \text { u.a.r. }] \ &amp; =\frac{2}{|{i, i+1, \ldots, j}|}=\frac{2}{j+1-i}\end{aligned}$</p><p>$\mathbb{E}[#$ comparisons $]=\sum_{i&lt;j} p_{i j}=\sum_{i&lt;j} \frac{2}{j+1-i}$</p><p>$=\sum_{i&lt;j} \frac{2}{j+1-i}$<br>$=\sum_{i=1}^{n-1} \sum_{j=i+1}^n \frac{2}{j+1-i}$<br>$=\sum_{i=1}^{n-1} \sum_{k=2}^{n+1-i} \frac{2}{k}&lt;\sum_{i=1}^n \sum_{k=2}^n \frac{2}{k}$<br>$=2 n \sum_{k=2}^n \frac{1}{k}=2 n\left(\left(\sum_{k=1}^n \frac{1}{k}\right)-1\right)=2 n\left(H_n-1\right)$<br>$\leq 2 n \int_1^n \frac{1}{x} d x=2 n \ln n=\mathcal{O}(n \log n)$</p><h2 id="Randomized-min-cut"><a class="header-anchor" href="#Randomized-min-cut">¶</a>Randomized min-cut</h2><ul><li>Why it return a cut?</li></ul><p>Prove by induction on the number k of iterations of the loop.If k = 0 then it returnall edges in the graph.suppose it is true for up to k-1 iterations, we can get a graph $G’$ after first iteration and do k-1 iterations, it’s a cut in G’, but such cut is also a cut in G because it’s the same with do K iterations.</p><ul><li>For any min-cut C, the probability that RandMinCut(G) returns C is $\ge \frac{2}{n(n-1)}$</li></ul><p>Proof :</p><ol><li><p>Let Ei be the event that the edge to be contracted isn’t part of C,Then we need to prove 当且仅当每一步都不删除C里的边才会返回C<img data-src="https://i.imgur.com/VRix2iJ.png" alt="image-20230114110202228 PM"></p></li><li><p>With conditional probability formula we can know</p><p><img data-src="https://i.imgur.com/a6fdqGV.png" alt="image-20230114110348933 PM"></p><p>Then the pr before can be defined as 此时pi是前i-1步都不删除的前提下第i步也不删除</p><p><img data-src="https://i.imgur.com/8QCX1a3.png" alt="image-20230114110440511 PM"></p></li><li><p>With observation we can know</p><ol><li><p>$G_i = (V_i,E_i)$has ni = n - i vertices</p></li><li><p>The min-cut size of ith procedure is &gt;= |C|</p></li><li><p>每个点的degree 都&gt;= |C|</p><p>$\left|E_i\right|=\frac{1}{2} \sum_{v \in V_i} d_i(v) \geq \frac{1}{2} n_i|C|$</p><p>第i步后的边数等于总度数/2大于ni乘mincut</p><p>得到第i步后的边数与C的关系</p></li></ol></li><li><p>第i步选中C的概率是C的大小/边数，即</p><p>$\begin{aligned} 1-p_i &amp; =\operatorname{Pr}\left[\text { uniformly random } e \in E_{i-1} \text { is in } C \mid \cap_{j=1}^{i-1} \mathcal{E}<em>j\right] \ &amp; =\frac{|C|}{\left|E</em>{i-1}\right|} \leq \frac{|C|}{\frac{1}{2} n_{i-1}|C|}=\frac{2}{n_{i-1}}=\frac{2}{n-(i-1)} \ \Rightarrow p_i &amp; \geq 1-\frac{2}{n-i+1}=\frac{n-i-1}{n-i+1}\end{aligned}$</p></li><li><p>连乘逐项相消得到2/n(n-1)</p></li></ol><p>Trade Off:</p><p>call it $t \frac{n(n-1)}{2}$ times and let $C^*$ be the smallest cut returned(用到1+x&lt;=$e^x$ )</p><p>$\begin{aligned} \operatorname{Pr}\left[C^{\star} \text { is not a min-cut }\right] &amp; \leq\left(1-\frac{2}{n(n-1)}\right)^{t \frac{n(n-1)}{2}} \ &amp; \leq\left(e^{-\frac{2}{(n-1)}}\right)^{t \frac{n(n-1)}{2}}\end{aligned}$</p><p>$=e^{-t}$</p><p>$\begin{aligned} \operatorname{Pr}\left[C^{\star} \text { is a min-cut }\right] &amp; \geq 1-e^{-t} \ &amp; \left.=1-n^{-c} \quad \text { (If we set } t=c \ln n\right)\end{aligned}$</p><p>So we repeat it $c \cdot \frac{n(n-1)}{2} \cdot \ln n$ times then P[get a min-cut] is $1-n^{-c}$ .</p><h1>Hash</h1><h2 id="Hashing-fundamentals"><a class="header-anchor" href="#Hashing-fundamentals">¶</a>Hashing fundamentals</h2><p>Hash function: A hash function h : U-&gt;[m] for each x from U,h(x) in [m] is a random variable.</p><h3 id="Truly-random"><a class="header-anchor" href="#Truly-random">¶</a>Truly random:</h3><p>​if the variables h(x) for x in U are independent and uniform</p><p>​<strong>(Impractial, because it require |U|logm bits to represent)</strong></p><h3 id="Universal"><a class="header-anchor" href="#Universal">¶</a>Universal:</h3><p>​for any distinct values, their hash value are same has a small probability</p><p>​$x \neq y \in U: \operatorname{Pr}[h(x)=h(y)] \leq \frac{1}{m}$</p><h3 id="C-approximately-universal"><a class="header-anchor" href="#C-approximately-universal">¶</a>C-approximately universal:</h3><p>​Because sometime we need to compute faster so we need a slack version of universal.</p><p>​h is c-approximately if $x \neq y \in U: \operatorname{Pr}[h(x)=h(y)] \leq \frac{c}{m}$</p><h3 id="strongly-universal-2-independent"><a class="header-anchor" href="#strongly-universal-2-independent">¶</a>strongly universal(2-independent)</h3><ul><li>Each key is hashed uniformly into [m]<ul><li>for any x and any q, $Pr[h(x) = q] = \frac{1}{m}$</li></ul></li><li>Any two distinct keys hash independently<ul><li>there’s two keys x,y. If you know h(x) = q you don’t know anything about h(y) = ?</li></ul></li></ul><p>​for all $x \neq y \in U$ ,and $q, r \in[m]: \operatorname{Pr}[h(x)=q \wedge h(y)=r]=\frac{1}{m^2}$</p><p>​explaniation: (h(x)=q is 1/m,h(y)=r is 1/m)</p><h3 id="C-approximately-strongly-universal"><a class="header-anchor" href="#C-approximately-strongly-universal">¶</a>C-approximately strongly universal</h3><ul><li>each key has $Pr[h(x) = q] = \frac{1}{m}$</li></ul><p>​$q, r \in[m]: \operatorname{Pr}[h(x)=q \wedge h(y)=r]=\frac{c}{m^2}$</p><h2 id="Application-Unordered-sets"><a class="header-anchor" href="#Application-Unordered-sets">¶</a>Application:Unordered sets</h2><p>Maintain a set S with at most n keys</p><p>need to insert,delete,member</p><h3 id="Hashing-with-chaining"><a class="header-anchor" href="#Hashing-with-chaining">¶</a>Hashing with chaining</h3><p>Define a store array L and $L[i]=$ linked list over ${y \in S \mid h(y)=i}$</p><p><img data-src="https://i.imgur.com/AhcNsP8.png" alt="image-20230115113819274 PM"></p><p>Each operation takes $\mathcal{O}(|L[h(x)]|+1)$ time (the first one is to find the element in the chain and the second one is to operate on it)</p><p>Prove it only use constant time.</p><h2 id="Application-Signatures"><a class="header-anchor" href="#Application-Signatures">¶</a>Application:Signatures</h2><p><img data-src="https://i.imgur.com/5ye5C1J.png" alt="image-20230116122232950 AM"></p><h2 id="Practial-hash-functions"><a class="header-anchor" href="#Practial-hash-functions">¶</a>Practial hash functions</h2><p>How to generate hash values</p><h3 id="Multiply-mod-prime"><a class="header-anchor" href="#Multiply-mod-prime">¶</a>Multiply-mod-prime</h3><p>Let $U=[u]$ and Pick prime $p \geq u$</p><p>for any $a, b \in[p]$, let $h_{a, b}^m: U \rightarrow[m]$ be:</p><p>$h_{a, b}^m(x)=((a x+b) \bmod p) \bmod m$</p><p>choose a,b independently and uniformly at random. h(x) is a 2-approximately strongly universal hash function</p><h3 id="Multiply-shift"><a class="header-anchor" href="#Multiply-shift">¶</a>Multiply-shift</h3><p>Let $U=\left[2^w\right]$ and $m=2^{\ell}$. For any odd $a \in\left[2^w\right]$ define</p><p>$h_a(x):=\left\lfloor\frac{(a x) \bmod 2^w}{2^{w-\ell}}\right\rfloor$</p><p>choose a randomly then h is 2-approximately universal hash function</p><h3 id="Strong-multiply-shift"><a class="header-anchor" href="#Strong-multiply-shift">¶</a>Strong multiply-shift</h3><p><img data-src="https://i.imgur.com/2mIS37y.png" alt="image-2023011635100504 PM"></p><h2 id="Application-Coordinated-sampling"><a class="header-anchor" href="#Application-Coordinated-sampling">¶</a>Application:Coordinated sampling</h2><h1>VEB tree</h1><ul><li>proof of O(lg lg u)</li><li>do some operation on the example of vEB</li></ul><p><img data-src="https://i.imgur.com/Iij29ei.png" alt="image-2023012440305148 PM"></p><h1>NP Completeness</h1><ul><li>Definition of verification, languages</li><li>Definition of NP, reduction,NPC</li><li>prove CLIQUE from 3-CNF-SAT</li><li>Prove VERTEX-COVER from CLIQUE</li><li>Prove TSP from HAM-CYCLE</li></ul><p><strong>Definition of a problem</strong>: there’s a set I of instances and a set S of solutions, a problem is a binary relation between I and S</p><p><strong>Definition of a decision problem</strong>: problem whose result is Yes or No, so S is {0,1}</p><p>optimal problems can be transformed into decision problems,e.g. you want to find the shortest path, instead of finding its shortest we can iterate over all the possible results and get the last Yes result instance</p><p><strong>Definition of Languages</strong>:</p><ol><li>Alphabet: a finite set $\Sigma$ of symbols</li><li>language L over $\Sigma$ : a set of strings of symbols from $\Sigma$, e.g.: $\Sigma={a, b, c}$ and $L={a, b a, c a b, b b a c, \ldots}$. The empty string is denoted by(epsilon) $\epsilon$ and empty language is denoted by (emptyset) $\emptyset$ and all strings are denoted by $\Sigma^*$</li><li>Language acceptance: Let A be an algorithm for a decision problem and denote by $A(x) \in{0,1}$, A accepts a string x if A(x) = 1 and rejects a string x if A(x) = 0.The language accepted by A is$L=\left{x \in{0,1}^* \mid A(x)=1\right}$ .We say all strings not in L are rejected by A, so $A(x)=0 \forall x \in{0,1}^* \backslash L$.</li></ol><p><strong>Definition of P and NP:</strong></p><p>$P=\left{L \subseteq{0,1}^* \mid\right.$ there exists an algorithm $A$ that decides $L$ in polynomial time $}$.</p><p>NP is the class of languages that can be veriﬁed in polynomial time. More precisely, L ∈ NP if and only if there is a polynomial-time veriﬁcation algorithm A and a constant c such that $L=\left{x \in{0,1}^* \mid\right.$ there is a $y \in{0,1}^{*}$ with $|y|=O\left(|x|^{c}\right)$ such that $\left.A(x, y)=1\right}$.</p><p><strong>Verification</strong></p><p>Consider algorithm A taking two parameters, instead of trying to ﬁnd a solution to x (which may take a long time), A instead veriﬁes that c is a solution to x.</p><p>The language verified by A is $L=\left{x \in{0,1}^* \mid\right.$ there is a $y \in{0,1}^*$ such that $\left.A(x, y)=1\right}$.</p><p><strong>Reducibility</strong></p><p>Language L 1is polynomial-time reducible to language L 2if there is a polynomial-time computible function f ∶ {0, 1} ∗ → {0, 1} ∗ such that for all x ∈ {0, 1} ∗ ,$x \in L_1 \Longleftrightarrow f(x) \in L_2$. In this case, we write $L_1 \leq p L_2$ , and it shows L1 is no harder to solve than L2.</p><h4 id="prove-CLIQUE-from-3-CNF-SAT"><a class="header-anchor" href="#prove-CLIQUE-from-3-CNF-SAT">¶</a>prove CLIQUE from 3-CNF-SAT</h4><ul><li>Prove NP<ul><li>consider an algorithm A taking two inputs, &lt;G, k &gt; and a certiﬁcate y.</li><li>y speciﬁes a subset V ′ of vertices of G.</li><li>A check that | V ′ | = k and that V ′ is a clique in G.</li><li>This can easily be done in polynomial time.</li></ul></li><li>Prove $3-\mathrm{CNF}-\mathrm{SAT} \leq{ }_P$ CLIQUE<ul><li>Given a formula f = C 1∧ C 2∧ . . . ∧ C kin 3-CNF.</li><li>We will construct a graph G such that f is satisﬁable if and only if G has a clique of size k.</li><li>For each $C_r=\ell_1^r \vee \ell_2^r \vee \ell_3^r$ , we include three vertices to G.</li><li>There is an edge $\left(v_i^r, v_j^s\right)$ in $G$ if and only if $r \neq s$ and $\ell_i^r$ is not the negation of $\ell_j^s$.</li></ul></li><li><img data-src="https://i.imgur.com/zM8753X.png" alt="image-20230118124407756 AM"></li></ul><p><strong>Prove TSP from HAM-CYCLE</strong></p><ul><li>prove NP<ul><li>consider an algorithm A taking two inputs, G.= &lt;V,E,c&gt; and a certificate y.</li><li>y specifies a tour in G</li><li>A check y’s cost and get the minimum</li><li>This can easily be done in polynomial time</li></ul></li><li>Prove $\mathrm{HAM}-\mathrm{CYCLE} \leq_P$ TSP<ul><li><img data-src="https://i.imgur.com/wIZVHAb.png" alt="image-2023011810156956 AM"></li></ul></li></ul><h1>Exact exponential algorithms</h1><ul><li>TSP via DP</li></ul><p>Problem: Given cities $c_1, \ldots, c_n$, and distances $d_{i j}=d\left(c_i, c_j\right)$, find tour of minimal length, visiting all cities exactly once.</p><p>We can define a set S which is the subset of the set of points from c2 to cn and select a ci from set S.Then as we are using Dynamic Programming we need to define the structure OPT[s,ci] = minimum length of all paths in $S \cup\left{c_1\right}$ that starts from c1, visits all vertexes in S once and ends in ci. Then $\min \left{\operatorname{OPT}\left[\left{c_2, \ldots c_n\right}, c_i\right]+d\left(c_i, c_1\right) \mid c_i \in\left{c_2, \ldots, c_n\right}\right}$ is the length of the minimal tour</p><p>We have</p><p>OPT $\left[S, c_i\right]= \begin{cases}d\left(c_1, c_i\right) &amp; \text { if } S=\left{c_i\right} \ \min \left{\text { OPT }\left[S \backslash\left{c_i\right}, c_k\right]+d\left(c_k, c_i\right) \mid c_k \in S \backslash\left{c_i\right}\right} &amp; \text { if }\left{c_i\right} \subset S\end{cases}$</p><p>To prove this, we first let e = (ck,ci) to be the last edge on this path. If k = 1 we just use the distance from c1 to ci. If k &gt; 1 then the shortest length through e must be OPT $\left[S \backslash\left{c_i\right}, c_k\right]+d\left(c_k, c_i\right)$.The shortest such path must use the minimum over all $c_k \in S \backslash\left{c_i\right}$.</p><p>So we know the formula is correct and we can get shortet path throught it.What about time it consume?</p><p>We can get the solution with this method by computing $O(n^2*2^n)$ shortest paths.Here I’ll give the proof.</p><p>We enlarge the set where we want to go through from 2 to n-1 and we choose a set of size n-1 from j citys.Then we need to pick one as the last.We can observe it’s bounded by $n^2$ and this one we can add more into this and this equals to $n^2*2^n$. And then we return $\min \left{\operatorname{OPT}\left[\left{c_2, \ldots c_n\right}, c_i\right]+d\left(c_i, c_1\right) \mid c_i \in\left{c_2, \ldots, c_n\right}\right}$ and we only compute n-1 times at most.</p><p>we assume basic operations take polynomial time in n and the algorithm costs $O^<em>(2^n)$. We also need to specify what $O^</em>$​ is</p><p>for any a &gt; 1 we have $O(n^c*a^n)\subset O((a+\epsilon)^n)$</p><p>So when comparing exact exponential algorithms the polynomial factors are mostly irrelevant.</p><p>$f(n) \in O^*(g(n)) &lt;=&gt; \exists c \in \mathbb{R}: f(n) \in \mathcal{O}\left(n^c \cdot g(n)\right)$</p><p>So $O^*$ is the same as O but ignores polynomial factors.</p><ul><li>Bar fight prevention</li></ul><h1>Approximation algorithms</h1><ul><li>approximation ratio</li><li>Vertex cover</li><li>3-CNF-SAT</li></ul><p>易错点：ratio证明，3-SAT写X=sum。</p><p>There are some optimization problems which will take exponential time to get the exact result, but sometimes a solution which is not that good is also acceptable, and it will become much faster to get these results. So we need to use approximation algorithms.</p><p><strong>approximation ratio</strong></p><p>we say that an algorithm for an optimization problem has an approximation ratio of $\rho(n)$ if, for any input of size n:</p><p>$\max \left(\frac{C}{C^<em>}, \frac{C^</em>}{C}\right) \leq \rho(n)$</p><p>If an algorithm achieves an approximation ratio of  (n), we call it a  $\rho(n)$-approximation algorithm.</p><p><strong>Vertex cover</strong></p><p>The following algorithm is a polynomial-time 2-approximation algorithm:</p><p><img data-src="https://i.imgur.com/JeozAY1.png" alt="image-20230119124119184 PM"></p><p>The running time in worst case is O(|V| + |E|) as we will add all vertexs and remove all edges.Now I’d like to prove it’s a 2-approximation algorithm:</p><p>First let $C^<em>$ to be an optimal cover, and let $A \subset E$ be the edges chosen by the algorithm. Each edges have two endpoints and one of them must be in $C^</em>$ ,so $|C^*| \ge |A| = |C|/2$  (|C| =return vertex’s number) ,so it’s 2-approximate.</p><p><strong>MAX-3-SAT</strong></p><p>There’s also another problem called Max-3-CNF which input is some clauses combined with logic connections, the goal is to return an assignment of the variables that maximize the number of clauses evaluating to 1.</p><p>The following algorithm is a polynomial time algorithm:</p><p><img data-src="https://i.imgur.com/XDOS5Vk.png" alt="image-2023011914701123 PM"></p><p>The running time of that is O(n) and n is the number of the variables. So it is a polynomial algorithm. Now I will prove it is an 8/7 approximation algorithm.</p><p>First, let phi$\Phi=C_1 \wedge \ldots \wedge C_n$ and each of the clauses $C_i=\ell_1 \vee \ell_2 \vee \ell_3$.</p><p>So the clause is not satisfied if and only if all three variables are 0, in other words $\neg \ell_1 \wedge \neg \ell_2 \wedge \neg \ell_3$.</p><p>So $\operatorname{Pr}\left[\neg C_i\right]=\operatorname{Pr}\left[\neg \ell_1\right] \cdot \operatorname{Pr}\left[\neg \ell_2\right] \cdot \operatorname{Pr}\left[\neg \ell_2\right]=\left(\frac{1}{2}\right)^3=1 / 8$</p><p>$\operatorname{Pr}\left[C_i\right]=1-\operatorname{Pr}\left[\neg C_i\right]=1-1 / 8=7 / 8$</p><p>And we define a variable X = $\sum_{i=1}^n\left[C_i\right]$ which is the number of satisfied clauses</p><p>We want to calculate the expect of X, which is $\mathbf{E}[X]=\mathbf{E}\left[\sum_{i=1}^n\left[C_i\right]\right] {=} \sum_{i=1}^n \mathbf{E}\left[C_i\right]=\sum_{i=1}^n \frac{7}{8}=7 n / 8$</p><p>So we can know in this algorithm C is 7n/8, and the optimal solution should be n,so it’s approximation ratio is $\frac{\mathcal{C}^<em>}{\mathcal{C}}=\frac{\mathcal{C}^</em>}{7 n / 8} \leq \frac{n}{7 n / 8}=8 / 7$</p><p><strong>TSP</strong></p><p>Last I want to give another algorithm, TSP, given a complete undirected graph and each edge has a capacity. we want to find a minimum weight cycle through all vertices.</p><p>The approx-tsp algorithm is as follows: first it find the minimum spanning tree in the graph, and make a euler tour W along the MST so it goes through each edge twice,and then we shortcut W to get H and return it.</p><p>It’s a polynomial time algorithm because each step in it consumes polynomial time. Then I’d like to prove it’s a 2-approximation problem.</p><p>Let $H^<em>$ to be the optimal solution, then $c(T)\le c((H^</em>))$.And we know $c(W) = 2c(T)$, and $c(H) \le c(W)$ because of the triangle inequality.</p><p>So we have $c(H) \le 2c(H^*)$ , and it’s proven.</p><h1>Polygon triangulation</h1><ul><li>definition of a monotone polygon</li><li>partitioning into monotone pieces</li><li>Triangulating a monotone polygon</li></ul><p>example:<img data-src="https://i.imgur.com/EefMoDj.png" alt="image-2023011934120613 PM"></p><p>There are some problems like the art gallery problem we need to solve, and in order to solve the problem we need to first triangulate the polygon. Then I’ll introduce an algorithm that can efficiently triangulate a simple polygon.</p><p><strong>y-monotone polygon</strong></p><p>In geometry, a polygon <em>P</em> is called <strong>y-monotone</strong> with respect to a horizontal line <em>L</em>, if every line in the boundary of <em>P</em> intersects with L at most twice.</p><p>If we have a y-monotone polygon then it’s easy to triangulate it, which I will discuss it later. If the polygon is not y-monotone then we need to cut it into several parts, I’d like to show how we can do it.</p><p><strong>partitioning</strong></p><p>A simple polygon has several different types of vertices, like start, normal, merge split, and end. From the definition, we can know that a polygon without split and merge and only having one start and one end vertex is a y-monotone polygon, so we need to erase all the merge and split vertexes from our polygon.</p><p>First, we need to introduce the idea of sweeping. We construct a sweeping horizontal line that goes from top to bottom. As we can only explore the part above the line, we can only erase split vertexes when it sweeps down and we can erase merge vertexes when the sweep line goes up.</p><p>So, how can we remove the split vertex?</p><p>I’d like to introduce the helper of edges first. The helper for an edge e which has a polygon right of it is the lowest vertex v above the sweep line such that the horizontal line segment connecting e and v are inside the polygon. In another word, it’s the first vertex sweep line that will touch if it goes up.</p><p>We will also need a status structure to store all edges that have the polygon to the right with their helper and an event list storing all vertices by decreasing y-coordinate. While there are still events in the list we pop and handle them.</p><p>How do we handle the event?</p><p>**Start v: **</p><img data-src="https://i.imgur.com/kUUD7J2.png" alt="image-2023011940309588 PM" style="zoom:50%;" /><p>Insert the counterclockwise incident edge in T with v as the helper.</p><p><strong>Regular v:</strong></p><img data-src="https://i.imgur.com/UARzNQT.png" alt="image-2023011940322092 PM" style="zoom:50%;" /><p>If the polygon is right of the two incident edges, then replace the upper edge with the lower edge in T, and make v the helper</p><p>If the polygon is left of the two incident edges , then find the edge e directly left of v , and replace its helper by v</p><p><strong>Merge v:</strong></p><img data-src="https://i.imgur.com/RDR9vc9.png" alt="image-2023011940339625 PM" style="zoom:50%;" /><p>Remove the edge clockwise from v from T Find the edge e directly left of v , and replace its helper by v</p><p><strong>Split v:</strong></p><img data-src="https://i.imgur.com/LrUGAAq.png" alt="image-2023011940631161 PM" style="zoom:50%;" /><ol><li>add a diagonal from v to the helper of the edge directly left of v.</li><li>Replace the helper of e by v</li><li>Insert the edge counterclockwise from v in T with v as its helper</li></ol><p><strong>End v:</strong></p><p>Delete the clockwise incident edge and its helper from T</p><p><strong>How much time does it cost?</strong></p><p>Sorting events costs O(N log N) and if we use a binary search tree as a status structure every event costs O(logn).</p><p>So we partitioned the polygon into several y-monoton polygons, we need to trangulate it.</p><p><strong>Triangulate algorithm</strong></p><ol><li>Sort all vertices from top to bottom</li><li>init a stack and push the first two vertices</li><li>take the next vertex, triangulate as much as possible while popping the stack and push v into the stack</li></ol><p>It will take O(n) time.</p><p>Probable question: Can we immediately conclude: A simple polygon with n vertices can be triangulated O ( n log n) time?</p><p>We need to argue that all y - monotone polygons together that we will triangulate have O ( n ) vertices</p><p>Initially we had n edges . We add at most n - 3 diagonals in the sweeps . These diagonals are used on both sides as edges . So all monotone polygons together have at most 3n - 6 edges , and therefore at most 3n - 6 vertices</p><p>Hence we can conclude that triangulating all monotone polygons together takes only O ( n ) time</p>]]></content>
      
      
      <categories>
          
          <category> UCPH </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>new-in-bootstrap5</title>
      <link href="/2023/01/14/new-in-bootstrap5/"/>
      <url>/2023/01/14/new-in-bootstrap5/</url>
      
        <content type="html"><![CDATA[<ul><li>Nav-bar</li></ul><span id="more"></span><ul><li><p>Nav-bar toggle</p><blockquote><p>before:</p><p>​ data-toggle="" data-target=""</p><p>New:</p><p>​ data-bs-toggle="" data-bs-target=""</p></blockquote></li><li><p>Nav-bar margin</p><blockquote><p>Margin left auto &amp; margin right auto</p><p>ml-auto can make an item be at the right of the nav bar, and mr-autocan make the item be at the left of the nav bar.</p><p>Before:</p><p>​ ml-auto mr-auto</p><p>New:</p><p>​ ms-auto me-auto</p></blockquote></li></ul><p>Ref:https://stackoverflow.com/questions/19733447/bootstrap-navbar-with-left-center-or-right-aligned-items</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>monitor-csgo-item-price</title>
      <link href="/2023/01/06/monitor-csgo-item-price/"/>
      <url>/2023/01/06/monitor-csgo-item-price/</url>
      
        <content type="html"><![CDATA[<p>This article describes how to trace the items in your stock and get a summary of how much you profit/lose from it.</p><ul><li>Use a Web crawler to get the current item price</li><li>Save daily price into sqlite3 database</li><li>Use crontab to run the script daily</li><li>Use cronitor to monitor crontab</li><li>Call system notification after it’s done or fail</li><li>Use flask and echarts to visualize the data</li></ul><span id="more"></span><h2 id="Use-a-Web-crawler-to-get-the-current-item-price"><a class="header-anchor" href="#Use-a-Web-crawler-to-get-the-current-item-price">¶</a>Use a Web crawler to get the current item price</h2><p>First, log in to the NetEase BUFF platform, and find an item you want to trace. Open F12 and in Network, you’ll find a file named “sell_order?game=csgo&amp;goods_id=xxx”. In the preview of the file, you will find a JSON file containing all the information about its market.</p><p>First, you need to get the cookies and header in “Headers”, the header is its User-Agent.</p><p>Then, use Python to save this information</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;your header&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">cookie_str = <span class="string">&#x27;your cookie&#x27;</span></span><br><span class="line">cookies = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> cookie_str.split(<span class="string">&#x27;;&#x27;</span>):</span><br><span class="line">    name, value = line.strip().split(<span class="string">&#x27;=&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">    cookies[name] = value</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Then, define the URLs and the stock you have. The user can be found by right-clicking the file “sell_order” and selecting “copy-copy link address”.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">urls = &#123;</span><br><span class="line">    <span class="string">&#x27;火神&#x27;</span>: <span class="string">&#x27;https://buff.163.com/api/market/goods/buy_order?game=csgo&amp;goods_id=33976&amp;page_num=1&amp;_=1672999623684&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">stock = &#123;</span><br><span class="line">    <span class="string">&#x27;火神&#x27;</span>: [<span class="number">1099</span>,<span class="number">1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The list in stock value contains the price it originally bought and the number of items you have.</p><p>Then we use the requests to send the request and get the result. For this part, you need to import requests.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> name, status <span class="keyword">in</span> stock.items():</span><br><span class="line">        num = status[<span class="number">1</span>]</span><br><span class="line">        url = urls[name]</span><br><span class="line">        oldprice = status[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">while</span> num:</span><br><span class="line">            time.sleep(<span class="number">0.3</span>)</span><br><span class="line">            r = requests.get(url, headers=headers, cookies=cookies)</span><br><span class="line">            data = r.json()</span><br><span class="line">    <span class="comment">#do sth here</span></span><br><span class="line">            num -=<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="Save-daily-price-into-sqlite3-database"><a class="header-anchor" href="#Save-daily-price-into-sqlite3-database">¶</a>Save daily price into sqlite3 database</h2><p>First import sqlite3.</p><p>Connect to database:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db = <span class="string">&#x27;/Users/xuanlang/study/python/csgo.db&#x27;</span></span><br><span class="line">conn = sqlite3.connect(db)</span><br></pre></td></tr></table></figure><p>Start cursor:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c = conn.cursor()</span><br></pre></td></tr></table></figure><p>Create database:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">text_create_table = <span class="string">&#x27;&#x27;&#x27;CREATE TABLE IF NOT EXISTS stock (</span></span><br><span class="line"><span class="string">    Date DATE,</span></span><br><span class="line"><span class="string">    Name TEXT,</span></span><br><span class="line"><span class="string">    CurrentPrice REAL,</span></span><br><span class="line"><span class="string">    OriginalPrice REAL</span></span><br><span class="line"><span class="string">)&#x27;&#x27;&#x27;</span></span><br><span class="line">c.execute(text_create_table)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>write into the database:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sql_text_insert = <span class="string">&quot;INSERT INTO stock VALUES (&#x27;%s&#x27;, &#x27;%s&#x27;, &#x27;%s&#x27;, &#x27;%s&#x27;)&quot;</span> % (today,name, curprice, oldprice)</span><br><span class="line">c.execute(sql_text_insert)</span><br></pre></td></tr></table></figure><p>View current profit:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">conn = sqlite3.connect(db)</span><br><span class="line">c = conn.cursor()</span><br><span class="line">sql_text_select = <span class="string">&quot;SELECT SUM(OriginalPrice) FROM stock WHERE date = &#x27;%s&#x27;&quot;</span> % today</span><br><span class="line">c.execute(sql_text_select)</span><br><span class="line">cost = c.fetchall()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(cost)</span><br><span class="line">sql_text_select = <span class="string">&quot;SELECT SUM(CurrentPrice) FROM stock WHERE date = &#x27;%s&#x27;&quot;</span> % today</span><br><span class="line">c.execute(sql_text_select)</span><br><span class="line">cur = c.fetchall()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;成本&quot;</span>,cost,<span class="string">&quot;现价&quot;</span>,<span class="built_in">format</span>(cur,<span class="string">&quot;.2f&quot;</span>),<span class="string">&quot;盈利&quot;</span>,<span class="built_in">round</span>(cur-cost,<span class="number">2</span>),<span class="string">&quot;盈利率&quot;</span>,<span class="built_in">round</span>((cur-cost)/cost* <span class="number">100</span>,<span class="number">2</span>),<span class="string">&quot;%&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>There’s a point you need to be aware of which are you need to determine if today’s data has been written into the database you just need to update it, so you need to determine first:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断数据库中是否有今天的数据</span></span><br><span class="line">sql_text_select = <span class="string">&quot;SELECT * FROM stock WHERE date = &#x27;%s&#x27;&quot;</span> % today</span><br><span class="line">c.execute(sql_text_select)</span><br><span class="line">result = c.fetchall()</span><br><span class="line"><span class="keyword">if</span> result:</span><br><span class="line">  update()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  insert()</span><br></pre></td></tr></table></figure><h2 id="Use-crontab-to-run-the-script-daily"><a class="header-anchor" href="#Use-crontab-to-run-the-script-daily">¶</a>Use crontab to run the script daily</h2><p>To run the script automatically you need to use crontab(in macOS).</p><p>First use <code>crontab -e</code> to write a new cron with the format <code>* * * * * * ~/miniconda3/bin/python3 /Users/xuanlang/study/python/test.py</code></p><p>For more information about cron, you can go to <a href="https://crontab.guru/">https://crontab.guru/</a></p><p>The crontab’s log will be sent to macOS terminal mailbox, use <code>mail</code> to see them.</p><p>You can define cron’s environment variables in crontab itself, like:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LANG=nb_NO.UTF-8</span><br><span class="line">LC_ALL=nb_NO.UTF-8</span><br><span class="line"><span class="comment"># m h  dom mon dow   command</span></span><br><span class="line"></span><br><span class="line">* * * * * sleep 5s &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;yo&quot;</span></span><br></pre></td></tr></table></figure><p>There might be some problems occur, to solve them:</p><ol><li>Count the right number of * !!!</li><li>Check cron’s shell and env is the same as your terminal, or it won’t find some instruction sometimes.</li><li>Use mail to trace the log.</li></ol><h2 id="Use-cronitor-to-monitor-crontab"><a class="header-anchor" href="#Use-cronitor-to-monitor-crontab">¶</a>Use cronitor to monitor crontab</h2><p><a href="https://cronitor.io/app/welcome?env=production&amp;time=24h">cronitor</a> is a tool that can trace some jobs as well as some other things. We will use it to monitor cron work.</p><ol><li>install CronitorCLI</li><li>Run <code>cronitor discover</code> to find cron jobs</li></ol><p>for more information go to its document <a href="https://cronitor.io/docs">https://cronitor.io/docs</a>.</p><h2 id="Call-system-notification-after-it’s-done-or-fail"><a class="header-anchor" href="#Call-system-notification-after-it’s-done-or-fail">¶</a>Call system notification after it’s done or fail</h2><p>to do this you need to import os.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_notification</span>(<span class="params">title, text</span>):</span></span><br><span class="line">  os.system(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">              osascript -e &#x27;display notification &quot;&#123;&#125;&quot; with title &quot;&#123;&#125;&quot;&#x27;</span></span><br><span class="line"><span class="string">              &quot;&quot;&quot;</span>.<span class="built_in">format</span>(text, title))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Usage:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str_result = <span class="string">&quot;成本: %s 现价: %s 盈利: %s 盈利率: %s&quot;</span> % (cost, <span class="built_in">format</span>(cur,<span class="string">&quot;.2f&quot;</span>), <span class="built_in">round</span>(cur-cost,<span class="number">2</span>), <span class="built_in">round</span>((cur-cost)/cost* <span class="number">100</span>,<span class="number">2</span>))</span><br><span class="line">show_notification(<span class="string">&quot;csgo track result&quot;</span>, str_result)</span><br></pre></td></tr></table></figure><p>the system will pop up a notification when it’s called.</p><h2 id="Use-flask-and-echarts-to-visualize-the-data"><a class="header-anchor" href="#Use-flask-and-echarts-to-visualize-the-data">¶</a>Use flask and echarts to visualize the data</h2><h3 id="Flask"><a class="header-anchor" href="#Flask">¶</a>Flask</h3><p>First, install flask by <code>conda install flask</code></p><p>Then create dirs for flask:</p><ul><li>flask<ul><li>static<ul><li>CSS, js…etc</li></ul></li><li>templates<ul><li>index.html</li></ul></li><li><a href="http://app.py">app.py</a></li></ul></li></ul><p>in '<a href="http://app.py">app.py</a> ’ you need to fetch data from the database, host a server and pass the data to the front end. Here I made two routes, one is “/” for the Html page and the other is “/stock” to send the JSON data so it can catch those data and display them in the front end.</p><p>Then run the python file and go to the browser to check if the website works well. several problems may occur, check these solutions:</p><ul><li>If the flask is installed correctly. Use <code>flask run</code> in the flask dir to check this.</li><li>If the index.html is in the templates directory. the dir name must be right or it won’t be able to find the file.</li><li>If all the other resources like CSS and js files are placed in the static directory, otherwise the  HTML file may not be able to load them.</li></ul><h3 id="echarts"><a class="header-anchor" href="#echarts">¶</a>echarts</h3><p>go to the apache <a href="https://echarts.apache.org/examples/en/index.html">echarts website</a> and search for the one you want to use. I used the stacked line chart for my website. Just copy it into the index.html and read about its data to figure out its usage.</p><p>Import jquery into your HTML and use ajax to get data from the back end. Fit those data into eharts to show the result.</p><p>Then configure the page to make it look better.</p><p>Set the legend’s type to scroll can make show less at once on the page, and set its width and height and top to fit the view.</p><p>Set the grid to adjust the graph’s position.</p><p>Set the x-axis and y-axis’s names to show their names.</p><p>Set some other thing.</p><h2 id="Reference"><a class="header-anchor" href="#Reference">¶</a>Reference</h2><ul><li><a href="https://cloud.tencent.com/developer/article/1823287">https://cloud.tencent.com/developer/article/1823287</a></li><li><a href="https://echarts.apache.org/examples/en/index.html#chart-type-line">https://echarts.apache.org/examples/en/index.html#chart-type-line</a></li><li><a href="https://getbootstrap.com/docs/5.3/components/navbar/#how-it-works">https://getbootstrap.com/docs/5.3/components/navbar/#how-it-works</a></li><li><a href="https://www.w3cschool.cn/echarts_tutorial/echarts_tutorial-2dbe2cgw.html">https://www.w3cschool.cn/echarts_tutorial/echarts_tutorial-2dbe2cgw.html</a></li><li><a href="https://www.w3cschool.cn/echarts_tutorial/echarts_tutorial-5c3q2cj7.html">https://www.w3cschool.cn/echarts_tutorial/echarts_tutorial-5c3q2cj7.html</a></li><li><a href="https://blog.csdn.net/zSY_snake/article/details/105412370">https://blog.csdn.net/zSY_snake/article/details/105412370</a></li><li><a href="https://blog.csdn.net/chelen_jak/article/details/81131786">https://blog.csdn.net/chelen_jak/article/details/81131786</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crawler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Machine Learning</title>
      <link href="/2022/09/09/Machine-Learning/"/>
      <url>/2022/09/09/Machine-Learning/</url>
      
        <content type="html"><![CDATA[<p>A machine-Learning Learning notes</p><span id="more"></span><h1>Supervised learning</h1><h2 id="Linear-regression"><a class="header-anchor" href="#Linear-regression">¶</a>Linear regression</h2><h3 id="model"><a class="header-anchor" href="#model">¶</a>model</h3><p>$$<br>f_{\omega,b}(x) = wx+b<br>$$</p><p>change the w and b to optimize the algorithm.</p><h3 id="Cost-function"><a class="header-anchor" href="#Cost-function">¶</a>Cost function</h3><p>Used to evaluate the model. The goal is to use cost function to minimize it and to find the best parameters for the model.</p><p>used for linear regression is<br>$$<br>J(\omega,b) = \frac{1}{2m}\sum_{i=1}^{m}(f_{\omega,b}(x^{(i)})-y^{(i)})^2<br>$$<br>It’s related with w and b</p><p>Graph when J is only related to w:</p><p><img data-src="https://cdn.mathpix.com/snip/images/4PNilhlBG6Ar9npUJvpzHe04Da9TCX2XZTiS9frwkpk.original.fullsize.png" alt=""></p><h3 id="Gradient-descent"><a class="header-anchor" href="#Gradient-descent">¶</a>Gradient descent</h3><p>In a 3D plot which choose w,b as the ground,J(w,b)as the <a href="http://hight.To">hight.To</a> find the best w,b it needs to go down from a “hill” to a “valley”. You look around and go step by step from the hill untill can’t go down any further, that’s a valley.</p><h4 id="algorithm"><a class="header-anchor" href="#algorithm">¶</a>algorithm</h4><p>$$<br>w=w-\alpha \frac{\partial}{\partial w} J(w, b)<br>$$<br>$$<br>b=b-\alpha \frac{\partial}{\partial b} J(w, b)<br>$$</p><p>$\alpha$ means “Learning rate”, which controls how largh you take for each step downhill.</p><p>You need to update w and b simultaneously, the correct method are as follows:<br>$$<br>\begin{aligned}<br>&amp;t m p_{-} w=w-\alpha \frac{\partial}{\partial w} J(w, b) \<br>&amp;{tmp_{-}b=b-\alpha \frac{\partial}{\partial b} J\left(w,b\right)} \<br>&amp;w=t m p_{-} w\<br>&amp;b=tmp_{-}b<br>\end{aligned}<br>$$<br>Repeat doing this untile w and b convergence.</p><p>Why use derivative?</p><p>The learning rate is always positive,so if the derivative is negative, to make the J(w,b) smaller you need to increase w. If the derivative is positive, you need to decreate w.</p><p>The cost function usually shape like a bowl, so it only have one minimum point.</p><h2 id="Multiple-Linear-regression"><a class="header-anchor" href="#Multiple-Linear-regression">¶</a>Multiple Linear regression</h2><p>$\mathrm{x}_j$ = $j^{\text {th }}$ feature</p><p>$\overrightarrow{\mathrm{x}}^{(i)}$ = features of $i^{\text {th }}$ training example, this is a vector</p><p>$\mathrm{X}_j^{(i)}$ = value of feature j in $i^{\text {th }}$ training example</p><h3 id="Model"><a class="header-anchor" href="#Model">¶</a>Model:</h3><p>$$<br>f_{w, b}(x)=w_1 x_1+w_2 x_2+\cdots+w_n x_n+b<br>$$</p><p>$\vec{\omega}=\left[\begin{array}{lllll}w_1 &amp; w_2 &amp; w_3 &amp; \ldots &amp; w_n\end{array}\right]$</p><p>It can be rewritten as:</p><p>$f_{\overrightarrow{\mathrm{w}}, b}(\overrightarrow{\mathrm{x}})=\overrightarrow{\mathrm{w}} \cdot \overrightarrow{\mathrm{x}}+b$</p><h3 id="Vectorization"><a class="header-anchor" href="#Vectorization">¶</a>Vectorization</h3><p>overall: use numpy as much as possible to make the program run faster.</p><p>Without vectorization you need to use for loop to calculate f</p><p>With vectorization you can use np.dot(w,x) to get the result.</p><h3 id="Multiple-Gradient-descent"><a class="header-anchor" href="#Multiple-Gradient-descent">¶</a>Multiple Gradient descent</h3><p>Repeat{</p><p>$\left.w_1=w_1-\alpha \frac{1}{m} \sum_{i=1}^m\left(f_{\overrightarrow{\mathrm{w}}, b}\left(\overrightarrow{\mathrm{x}}^{(i)}\right)-y^{(i)}\right) x_1^{(i)}\right)$</p><p>​=&gt;$\frac{\partial}{\partial w_1} J(\overrightarrow{\mathrm{w}}, b)$</p><p>$\vdots$</p><p>$w_n=w_n-\alpha \frac{1}{m} \sum_{i=1}^m\left(f_{\overrightarrow{\mathrm{w}}, b}\left(\overrightarrow{\mathrm{x}}^{(i)}\right)-y^{(i)}\right) x_n^{(i)}$</p><p>$b=b-\alpha \frac{1}{m} \sum_{i=1}^m\left(f_{\overrightarrow{\mathrm{w}}, b}\left(\overrightarrow{\mathrm{x}}^{(i)}\right)-y^{(i)}\right)$</p><p>simultaneously update<br>$w_j($ for $j=1, \cdots, n)$ and $b$</p><p>}</p><h3 id="Feature-scaling"><a class="header-anchor" href="#Feature-scaling">¶</a>Feature scaling</h3><p>Choose proper w1,w2…can make gradient descent faster.</p><h2 id="Logistic-regression"><a class="header-anchor" href="#Logistic-regression">¶</a>Logistic regression</h2><p>use sigmoid function to make classifition.</p><p>Sigmoid function:</p><p>$g(z)=\frac{1}{1+e^{-z}} \quad 0&lt;g(z)&lt;1$</p><p>Logistic regression model:<br>$$<br>z=\overrightarrow{\mathrm{w}} \cdot \overrightarrow{\mathrm{x}}+b<br>\<br>g(z)=\frac{1}{1+e^{-z}}<br>$$</p><h3 id="Decision-boundary"><a class="header-anchor" href="#Decision-boundary">¶</a>Decision boundary</h3><p>choose a threshold to determin whether $\hat y$ is 0 or 1.</p><p>Normally use when $z=\overrightarrow{\mathrm{w}} \cdot \overrightarrow{\mathrm{x}}+b=0$ when it’s a linear situation.</p><p>When it’s a non-linear situation, use this one $z=x_1^2+x_2^2-1=0$</p><h3 id="Cost-Lost-function"><a class="header-anchor" href="#Cost-Lost-function">¶</a>Cost/Lost function</h3><p>Previous: $J(\overrightarrow{\mathrm{w}}, b)=\frac{1}{m} \sum_{i=1}^m \frac{1}{2}\left(f_{\overrightarrow{\mathrm{w}}, b}\left(\overrightarrow{\mathrm{x}}^{(i)}\right)-y^{(i)}\right)^2$ squared error.</p><p>It’s cost function is a non-convex, so need a new function.</p><p>new version:<br>$$<br>L\left(f_{\overrightarrow{\mathrm{w}}, b}\left(\overrightarrow{\mathrm{x}}^{(i)}\right), y^{(i)}\right)=\left{\begin{aligned}<br>-\log \left(f_{\overrightarrow{\mathrm{w}}, b}\left(\overrightarrow{\mathrm{x}}^{(i)}\right)\right) &amp; \text { if } y^{(i)}=1 \<br>-\log \left(1-f_{\overrightarrow{\mathrm{w}}, b}\left(\overrightarrow{\mathrm{x}}^{(i)}\right)\right) &amp; \text { if } y^{(i)}=0<br>\end{aligned}\right.<br>$$</p><p><img data-src="https://i.imgur.com/zRvpK1r.png" alt="image-2022101512523502 AM"></p><p>simplified version:<br>$$<br>L\left(f_{\overrightarrow{\mathrm{w}}, b}\left(\overrightarrow{\mathrm{x}}^{(i)}\right), y^{(i)}\right)=-y^{(i)} \log \left(f_{\overrightarrow{\mathrm{w}}, b}\left(\overrightarrow{\mathrm{x}}^{(i)}\right)\right)-\left(1-y^{(i)}\right) \log \left(1-f_{\overrightarrow{\mathrm{w}}, b}\left(\overrightarrow{\mathrm{x}}^{(i)}\right)\right)<br>$$<br>It’s cost function:<br>$$<br>J(\mathbf{w}, b)=\frac{1}{m} \sum_{i=0}^{m-1}\left[\operatorname{loss}\left(f_{\mathbf{w}, b}\left(\mathbf{x}^{(i)}\right), y^{(i)}\right)\right]<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_cost_logistic</span>(<span class="params">X, y, w, b</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Computes cost</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">      X (ndarray (m,n)): Data, m examples with n features</span></span><br><span class="line"><span class="string">      y (ndarray (m,)) : target values</span></span><br><span class="line"><span class="string">      w (ndarray (n,)) : model parameters  </span></span><br><span class="line"><span class="string">      b (scalar)       : model parameter</span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">      cost (scalar): cost</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    m = X.shape[<span class="number">0</span>]</span><br><span class="line">    cost = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        z_i = np.dot(X[i],w) + b</span><br><span class="line">        f_wb_i = sigmoid(z_i)</span><br><span class="line">        cost +=  -y[i]*np.log(f_wb_i) - (<span class="number">1</span>-y[i])*np.log(<span class="number">1</span>-f_wb_i)</span><br><span class="line">             </span><br><span class="line">    cost = cost / m</span><br><span class="line">    <span class="keyword">return</span> cost</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="overfitting"><a class="header-anchor" href="#overfitting">¶</a>overfitting</h3><ul><li>Underfit:the model doesn’t fit the training set well.(high bias in prediction result)</li><li>Overfit : the model fits the training set extremely well.(high variance in result, small change cause huge difference)</li></ul><p>How to deal with it?</p><ul><li>collect more training examples</li><li>Reduce features to use</li><li>reduce the size of parameters(regularization)</li></ul><h3 id="Gradient-decent"><a class="header-anchor" href="#Gradient-decent">¶</a>Gradient decent</h3><p>repeat until convergence: {<br>$$<br>\begin{aligned}<br>&amp;b:=b-\alpha \frac{\partial J(\mathbf{w}, b)}{\partial b} \<br>&amp;w_j:=w_j-\alpha \frac{\partial J(\mathbf{w}, b)}{\partial w_j} \quad \text { for } \mathrm{j}:=0 . . \mathrm{n}-1<br>\end{aligned}<br>$$<br>}<br>$$<br>\begin{gathered}<br>\frac{\partial J(\mathbf{w}, b)}{\partial b}=\frac{1}{m} \sum_{i=0}^{m-1}\left(f_{\mathbf{w}, b}\left(\mathbf{x}^{(i)}\right)-\mathbf{y}^{(i)}\right) \<br>\frac{\partial J(\mathbf{w}, b)}{\partial w_j}=\frac{1}{m} \sum_{i=0}^{m-1}\left(f_{\mathbf{w}, b}\left(\mathbf{x}^{(i)}\right)-\mathbf{y}^{(i)}\right) x_j^{(i)}<br>\end{gathered}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_gradient_logistic</span>(<span class="params">X, y, w, b</span>):</span> </span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Computes the gradient for linear regression </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">      X (ndarray (m,n): Data, m examples with n features</span></span><br><span class="line"><span class="string">      y (ndarray (m,)): target values</span></span><br><span class="line"><span class="string">      w (ndarray (n,)): model parameters  </span></span><br><span class="line"><span class="string">      b (scalar)      : model parameter</span></span><br><span class="line"><span class="string">    Returns</span></span><br><span class="line"><span class="string">      dj_dw (ndarray (n,)): The gradient of the cost w.r.t. the parameters w. </span></span><br><span class="line"><span class="string">      dj_db (scalar)      : The gradient of the cost w.r.t. the parameter b. </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    m,n = X.shape</span><br><span class="line">    dj_dw = np.zeros((n,))                           <span class="comment">#(n,)</span></span><br><span class="line">    dj_db = <span class="number">0.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        f_wb_i = sigmoid(np.dot(X[i],w) + b)          <span class="comment">#(n,)(n,)=scalar</span></span><br><span class="line">        err_i  = f_wb_i  - y[i]                       <span class="comment">#scalar</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            dj_dw[j] = dj_dw[j] + err_i * X[i,j]      <span class="comment">#scalar</span></span><br><span class="line">        dj_db = dj_db + err_i</span><br><span class="line">    dj_dw = dj_dw/m                                   <span class="comment">#(n,)</span></span><br><span class="line">    dj_db = dj_db/m                                   <span class="comment">#scalar</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> dj_db, dj_dw  </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_descent</span>(<span class="params">X, y, w_in, b_in, cost_function, gradient_function, alpha, num_iters, lambda_</span>):</span> </span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Performs batch gradient descent to learn theta. Updates theta by taking </span></span><br><span class="line"><span class="string">    num_iters gradient steps with learning rate alpha</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">      X :    (array_like Shape (m, n)</span></span><br><span class="line"><span class="string">      y :    (array_like Shape (m,))</span></span><br><span class="line"><span class="string">      w_in : (array_like Shape (n,))  Initial values of parameters of the model</span></span><br><span class="line"><span class="string">      b_in : (scalar)                 Initial value of parameter of the model</span></span><br><span class="line"><span class="string">      cost_function:                  function to compute cost</span></span><br><span class="line"><span class="string">      alpha : (float)                 Learning rate</span></span><br><span class="line"><span class="string">      num_iters : (int)               number of iterations to run gradient descent</span></span><br><span class="line"><span class="string">      lambda_ (scalar, float)         regularization constant</span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">      w : (array_like Shape (n,)) Updated values of parameters of the model after</span></span><br><span class="line"><span class="string">          running gradient descent</span></span><br><span class="line"><span class="string">      b : (scalar)                Updated value of parameter of the model after</span></span><br><span class="line"><span class="string">          running gradient descent</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># number of training examples</span></span><br><span class="line">    m = <span class="built_in">len</span>(X)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># An array to store cost J and w&#x27;s at each iteration primarily for graphing later</span></span><br><span class="line">    J_history = []</span><br><span class="line">    w_history = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_iters):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Calculate the gradient and update the parameters</span></span><br><span class="line">        dj_db, dj_dw = gradient_function(X, y, w_in, b_in, lambda_)   </span><br><span class="line"></span><br><span class="line">        <span class="comment"># Update Parameters using w, b, alpha and gradient</span></span><br><span class="line">        w_in = w_in - alpha * dj_dw               </span><br><span class="line">        b_in = b_in - alpha * dj_db              </span><br><span class="line">       </span><br><span class="line">        <span class="comment"># Save cost J at each iteration</span></span><br><span class="line">        <span class="keyword">if</span> i&lt;<span class="number">100000</span>:      <span class="comment"># prevent resource exhaustion </span></span><br><span class="line">            cost =  cost_function(X, y, w_in, b_in, lambda_)</span><br><span class="line">            J_history.append(cost)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Print cost every at intervals 10 times or as many iterations if &lt; 10</span></span><br><span class="line">        <span class="keyword">if</span> i% math.ceil(num_iters/<span class="number">10</span>) == <span class="number">0</span> <span class="keyword">or</span> i == (num_iters-<span class="number">1</span>):</span><br><span class="line">            w_history.append(w_in)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Iteration <span class="subst">&#123;i:<span class="number">4</span>&#125;</span>: Cost <span class="subst">&#123;<span class="built_in">float</span>(J_history[-<span class="number">1</span>]):<span class="number">8.2</span>f&#125;</span>   &quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> w_in, b_in, J_history, w_history <span class="comment">#return w and J,w history for graphing</span></span><br></pre></td></tr></table></figure><h2 id="Decision-tree"><a class="header-anchor" href="#Decision-tree">¶</a>Decision tree</h2><p>A predict which features are discrete values.</p><p>Questions about the algorithm:</p><ol><li>How to choose parameters?<ol><li>Maximize purity</li></ol></li><li>When to stop splitting<ol><li>When a node is 100% one class</li><li>When splitting a node will result in the tree exceeding a maximum depth</li><li>When improvements in purity score are below a threshold</li></ol></li></ol><h3 id="use-Entropy-to-measure-purity"><a class="header-anchor" href="#use-Entropy-to-measure-purity">¶</a>use Entropy to measure purity</h3><p><img data-src="https://i.imgur.com/Orti8J9.png" alt="image-2022110314327111 PM"></p><p>$\begin{aligned} H\left(p_1\right) &amp;=-p_1 \log _2\left(p_1\right)-p_0 \log _2\left(p_0\right) \ &amp;=-p_1 \log _2\left(p_1\right)-\left(1-p_1\right) \log _2\left(1-p_1\right) \end{aligned}$</p><h1>Neural Networks</h1><h2 id="Neural-Network-Model"><a class="header-anchor" href="#Neural-Network-Model">¶</a>Neural Network Model</h2><p>activation function:$a=f(x)=\frac{1}{1+e^{-(w x+b)}}$</p><p>If a vector X begin input into the first layer which consists three neurons.</p><p>Each neuron will return $a_1=g(\overrightarrow{\mathrm{w}} \cdot \overrightarrow{\mathrm{x}}+b)*weight$ and composits a vector of three numbers, which is the output of this layer.</p><p>$w_1^{\text {[1] }}$ denotes the first layer’s  first w.</p><h2 id="Mutiple-layers-neural-networks"><a class="header-anchor" href="#Mutiple-layers-neural-networks">¶</a>Mutiple layers neural networks</h2><p>Notation:</p><p>$a_j^{[l]}=g\left(\vec{w}_j^{[l]} \cdot \vec{a}^{[l-1]}+b_j^{[l]}\right)$</p><p><img data-src="https://i.imgur.com/k006QFs.png" alt="image-20221018111702509 AM"></p><h2 id="Forward-propagation"><a class="header-anchor" href="#Forward-propagation">¶</a>Forward propagation</h2><p><img data-src="https://i.imgur.com/chW6p6H.png" alt="image-2022101815035177 PM"></p><h3 id="specific-calculation"><a class="header-anchor" href="#specific-calculation">¶</a>specific calculation:</h3><p>$x=n p \cdot \operatorname{array}([200,17])$</p><p>$a_1^{[1]}=g\left(\overrightarrow{\mathrm{w}}_1^{[1]} \cdot \overrightarrow{\mathrm{x}}+b_1^{[1]}\right)$</p><p>w1_1 $=$ np. array $([1,2])$<br>b1_1 $=$ np. $\operatorname{array}([-1])$<br>$z 11=n p \cdot \operatorname{dot}(w 11, x)+b 11$<br>a1_1 = sigmoid $\left(z 1_{-1}\right)$</p><p>and then a1 = np. array( [a1_1,a1_2,a1_3]</p><h2 id="Training-a-neural-network"><a class="header-anchor" href="#Training-a-neural-network">¶</a>Training a neural network</h2><ol><li>specify how to compute output</li><li>specify loss and cost</li><li>Train to minimize lost</li></ol><h3 id="Create-model"><a class="header-anchor" href="#Create-model">¶</a>Create model</h3><p>use sequence and dense func</p><h3 id="Train-model"><a class="header-anchor" href="#Train-model">¶</a>Train model</h3><p>repeat {<br>$$<br>\begin{aligned}<br>&amp;w_j^{[l]}=w_j^{[l]}-\alpha \frac{\partial}{\partial w_j} J(\overrightarrow{\mathrm{w}}, b) \<br>&amp;b_j^{[l]}=b_j^{[l]}-\alpha \frac{\partial}{\partial b j} J(\overrightarrow{\mathrm{w}}, b)<br>\end{aligned}<br>$$<br>$$<br>\text { } }<br>$$</p><p><code>model.fit(X,y,epochs=100)</code></p><h2 id="Activation-functions"><a class="header-anchor" href="#Activation-functions">¶</a>Activation functions</h2><p>Linear activation function $g(z)=z$</p><p>Sigmoid $g(z)=\frac{1}{1+e^{-z}}$</p><p>ReLU $g(z)=\max (0, z)$</p><p><img data-src="https://i.imgur.com/5AyiP2i.png" alt="image-2022101985528546 PM"></p><h3 id="How-to-choose"><a class="header-anchor" href="#How-to-choose">¶</a>How to choose?</h3><p>output layer:</p><p>Binary cassification: Signoid</p><p>Regression:Linear activation</p><p>Regression with all positive:ReLU</p><p>Hidden layer</p><p>in hidden layer mostly ReLU</p><h2 id="Multiclass-Classification"><a class="header-anchor" href="#Multiclass-Classification">¶</a>Multiclass Classification</h2><h3 id="Softmax-regression"><a class="header-anchor" href="#Softmax-regression">¶</a>Softmax regression</h3><p>$z_1=\overrightarrow{\mathrm{w}}_1 \cdot \overrightarrow{\mathrm{x}}+b_1$</p><p>$a_1=\frac{e^{z_1}}{e^{z_1}+e^{z_2}+e^{z_3}+e^{z_4}}$<br>$$<br>z_j=\overrightarrow{\mathrm{w}}_j \cdot \overrightarrow{\mathrm{x}}+b_j \quad \mathrm{j}=1, \ldots, \mathrm{N}<br>$$</p><p>$$<br>a_j=\frac{e^{z_j}}{\sum_{k=1}^N e^{z_k}}=\mathrm{P}(\mathrm{y}=j \mid \overrightarrow{\mathrm{x}})<br>$$</p><h3 id="Cost"><a class="header-anchor" href="#Cost">¶</a>Cost</h3><p>$$<br>a_N=\frac{e^{z_N}}{e^{z_1}+e^{z_2}+\cdots+e^{z_N}}=P(y=N \mid \overrightarrow{\mathrm{x}})<br>$$</p><p>$$<br>\operatorname{loss}\left(a_1, \ldots, a_N, y\right)=\left{\begin{array}{lc}<br>-\log a_1 &amp; \text { if } y=1 \<br>-\log a_2 &amp; \text { if } y=2 \<br>&amp; \vdots \<br>-\log a_N &amp; \text { if } y=N<br>\end{array}\right.<br>$$</p><h3 id="Programming"><a class="header-anchor" href="#Programming">¶</a>Programming</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Dense(units=<span class="number">10</span>,activation=<span class="string">&#x27;softmax&#x27;</span>)<span class="comment">#output layer</span></span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(loss=SparseCategoricalCrossentropy())</span><br></pre></td></tr></table></figure><p>Better way(recommended):</p><p>To make it more numerically accurate.</p><p>From $\operatorname{loss}=-y \log (a)-(1-y) \log (1-a)$</p><p>to $\operatorname{loss}=-y \log \left(\frac{1}{1+e^{-z}}\right)-(1-y) \log \left(1-\frac{1}{1+e^{-z}}\right)$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Dense(units=<span class="number">10</span>,activation=<span class="string">&#x27;linear&#x27;</span>)</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(loss=SparseCategoricalCrossEntropy(from_logits=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure><h2 id="Optimization-and-Diagnosing"><a class="header-anchor" href="#Optimization-and-Diagnosing">¶</a>Optimization and Diagnosing</h2><h3 id="Adam-algorithm"><a class="header-anchor" href="#Adam-algorithm">¶</a>Adam algorithm</h3><p>Adaptive Moment estimation</p><p>automatically change alpha while doing learning.Has a lot of alpha for different parameters.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">compile</span>(tf.keras.optimizers.Adam(learning_rate=<span class="number">1e-3</span>))</span><br></pre></td></tr></table></figure><h2 id="Layer-types"><a class="header-anchor" href="#Layer-types">¶</a>Layer types</h2><h3 id="Dense-Layer"><a class="header-anchor" href="#Dense-Layer">¶</a>Dense Layer</h3><p>output is a function of all the activation function result</p><h3 id="Convolutional-Layer"><a class="header-anchor" href="#Convolutional-Layer">¶</a>Convolutional Layer</h3><p>Each neuron only looks at part of the previous layer’s output</p><h1>Unsupervised Learning</h1><h2 id="PCA-principle-component-analysis"><a class="header-anchor" href="#PCA-principle-component-analysis">¶</a>PCA(principle component analysis)</h2><h3 id="theoretical-part"><a class="header-anchor" href="#theoretical-part">¶</a>theoretical part</h3><p>It’s propose is to reduce dimension of input data. Suppose we have sample X with n dimensions $X=\left{x_0, x_1, \ldots, x_m\right}$ and we want to have a transformation $y=P x$ in which P is a matrix. Then we get some data Y with k dimensions $Y=\left{y_0, y_1, \ldots, y_m\right}$ .</p><ol><li><p>preprocessing data</p><p>normolize input data by subtracting their mean of each column.</p></li><li><p>Do the PCA as follows:</p></li></ol><p>we need to make sure these two laws of PCA:</p><ul><li>After reducing, each of the dimensions should be independent, which means every axis are orthogonal after PCA.</li><li>maximize the variance of each dimensions, which means keeping the original data as much as possible.</li></ul><p>First we can denote the covariance matrix after transportation as $B_{k \times k}=\frac{1}{m} Y Y^T$ , to make each dimensions independent B should be a diagonal matrix, which means it’s all 0 except for it’s diagonal.</p><p>Let’s substitute this equation $y=P x$  into the equation $B_{k \times k}=\frac{1}{m} Y Y^T$ and get:<br>$$<br>B_{k \times k}=\frac{1}{m} Y Y^T=\frac{1}{m} P X(P X)^T=P \frac{1}{m} X X^T P^T=P_{k \times n} C_{n \times n} P_{n \times k}^T<br>$$<br>in which $C_{n \times n}=\frac{1}{m} X X^T$ is the covariance matrix of training data.</p><p>Use eigenvalue decomposition on C and get $D_{n \times n}=Q_{n \times n} C_{n \times n} Q_{n \times n}^T$ and D is a diagonal matrix.</p><p>So we can know P is a matrix composed by k-th big eigenvectors in line. Each item in B is the eigenvalues sorted in descending order. Eigenvalues shows the degree of confidence of each eigenvectors.</p><h3 id="practical-part"><a class="header-anchor" href="#practical-part">¶</a>practical part</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line">pca = PCA(n_components=<span class="literal">None</span>, copy=<span class="literal">True</span>, whiten=<span class="literal">False</span>)</span><br><span class="line">pca.fit(X)</span><br></pre></td></tr></table></figure><p>parameters:</p><blockquote><p>n_ components : the component number needs to be kept in the result.</p><p>​None: keep all components<br>​int : number of components<br>​String: choose components automatically</p><p>copy: whether keep the original data</p><p>​true : original data keep same<br>​false: original data changes into lower dimension</p><p>whiten: if whiten the data</p></blockquote><p>pca’s parameters :</p><blockquote><p>components_ : return those includes max variance.</p><p>explained_variance_ratio : return their variance’s percentage</p><p>n_ components_ :return the number of components</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pca = PCA()</span><br><span class="line">pca.fit(normed)</span><br><span class="line">x = pca.components_</span><br><span class="line">pca_2_compo = pca.components_[<span class="number">0</span>:<span class="number">2</span>, :]</span><br><span class="line">mapped_input = np.dot(normed, pca_2_compo.T)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">explained_variance = pca.explained_variance_ratio_</span><br><span class="line">top_10 = np.<span class="built_in">sum</span>(explained_variance[:<span class="number">10</span>])</span><br><span class="line"></span><br><span class="line">plt.plot(np.cumsum(pca.explained_variance_ratio_))</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Number of components&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;explained variance&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Explained Variance&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(np.arange(<span class="number">1</span>,<span class="number">65</span>), np.log(pca.explained_variance_ratio_), <span class="string">&#x27;r--&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Number of components&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;eigenspectrum&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Eigenspectrum&#x27;</span>)</span><br><span class="line"></span><br><span class="line">top5 = pca.components_[:<span class="number">5</span>]</span><br><span class="line">top5 = top5.reshape(<span class="number">5</span>,<span class="number">8</span>,<span class="number">8</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    plt.subplot(<span class="number">1</span>,<span class="number">5</span>,i+<span class="number">1</span>)</span><br><span class="line">    plt.imshow(top5[i], cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img data-src="https://i.imgur.com/ehen9BU.png" alt="image-2022101813109545 AM"></p><p><img data-src="https://i.imgur.com/BR91KWS.png" alt="image-2022101813118956 AM"></p><p><img data-src="https://i.imgur.com/EqBTzcH.png" alt="image-2022101813125171 AM"></p><h2 id="Kmeans"><a class="header-anchor" href="#Kmeans">¶</a>Kmeans</h2><p>used for clustering.</p><h1>TensorFlow</h1><h2 id="Simple-example"><a class="header-anchor" href="#Simple-example">¶</a>Simple example:</h2><p><img data-src="https://i.imgur.com/gGdUowO.png" alt="image-2022101835321992 PM"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([[<span class="number">200.0</span>,<span class="number">17.0</span>]])</span><br><span class="line">layer_1 = Dense(units=<span class="number">3</span>,activation=<span class="string">&#x27;sigmoid&#x27;</span>)</span><br><span class="line">a1 = layer_1(x)</span><br><span class="line">layer_2 = Dense(units=<span class="number">1</span>,activation=<span class="string">&#x27;sigmoid&#x27;</span>)</span><br><span class="line">a2 = layer_2(a1)</span><br><span class="line"><span class="keyword">if</span> a2 &gt;= <span class="number">0.5</span>:</span><br><span class="line">  yhat = <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  yhat = <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Train-a-neural-network"><a class="header-anchor" href="#Train-a-neural-network">¶</a>Train a neural network:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">layer_1 = Dense(units=<span class="number">3</span>,activation=<span class="string">&#x27;sigmoid&#x27;</span>)</span><br><span class="line">layer_2 = Dense(units=<span class="number">1</span>,activation=<span class="string">&#x27;sigmoid&#x27;</span>)</span><br><span class="line">model = Sequential([layer_1,layer_2])</span><br><span class="line">model.<span class="built_in">compile</span>(...)</span><br><span class="line">model.fit(x,y)<span class="comment">#x is data, y is label</span></span><br><span class="line">model.predict(x_new)<span class="comment"># get the new data </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Or in a simple way:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential([</span><br><span class="line">  Dense(units=<span class="number">3</span>,activation=<span class="string">&#x27;sigmoid&#x27;</span>),</span><br><span class="line">  Dense(units=<span class="number">1</span>,activation=<span class="string">&#x27;sigmoid&#x27;</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>in compile we need to specify loss function.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">model.<span class="built_in">compile</span>(</span><br><span class="line"> loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">True</span>),</span><br><span class="line">    optimizer=tf.keras.optimizers.Adam(<span class="number">0.01</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MachineLearning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>conda相关使用</title>
      <link href="/2022/08/16/conda%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/08/16/conda%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>在管理本地Python环境的时候经常用到的就是conda，它可以简单快捷地切换Python环境。</p><span id="more"></span><h1 id="安装">1. 安装</h1><p>我之前使用过完整版的Anaconda，但是感觉有点太大了，并且也用不到哪些功能，所以就用miniconda来管理。</p><p>下载链接：</p><p>https://docs.conda.io/en/latest/miniconda.html</p><h1 id="指令">2. 指令</h1><ul><li><p>查看当前所有环境<code>conda env list</code></p></li><li><p>创建新的环境<code>conda create -n ENVNAME python=3.10</code></p></li><li><p>删除环境 <code>conda remove -n ENVNAME --all</code></p></li><li><p>克隆环境 <code>conda create --clone ENVNAME -n NEWENV</code></p></li><li><p>安装包<code>conda install xxx</code></p></li><li><p>删除包<code>conda uninstall xxx</code></p></li><li><p>查看包<code>conda list</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> conda </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>下载kindle购买书籍</title>
      <link href="/2022/06/22/%E4%B8%8B%E8%BD%BDkindle%E8%B4%AD%E4%B9%B0%E4%B9%A6%E7%B1%8D/"/>
      <url>/2022/06/22/%E4%B8%8B%E8%BD%BDkindle%E8%B4%AD%E4%B9%B0%E4%B9%A6%E7%B1%8D/</url>
      
        <content type="html"><![CDATA[<p>随着kindle在大陆退出市场，我们需要把之前购买过的书籍都下载下来以防万一。</p><span id="more"></span><h1 id="批量下载图书">1.批量下载图书</h1><p>访问 <a href="https://z.cn/myk">http://z.cn/myk</a> 并登录你的账号，进入电子书列表。把下列js代码保存成书签后在“内容”页点击书签就可以自动批量下载。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)%7<span class="title">Bif</span>(<span class="params">!<span class="built_in">window</span>.location.hash.startsWith(<span class="string">&#x27;%23%2Fhome%2Fcontent%2FbooksAll&#x27;</span>)</span>)%7<span class="title">Balert</span>(<span class="params"><span class="string">&#x27;Need%20to%20visit%3A%20https%3A%2F%2Fz.cn%2Fmyk&#x27;</span></span>)%3<span class="title">Breturn</span>%3<span class="title">B</span>%7<span class="title">Dif</span>(<span class="params">!confirm(<span class="string">&#x27;Start%20now%3F&#x27;</span>)</span>)<span class="title">return</span>%3<span class="title">Bconst</span>%20<span class="title">h</span>%3<span class="title">Dz</span>%3<span class="title">D</span>%3<span class="title">Ez</span>.<span class="title">replace</span>(<span class="params">%2F%5B%EF%BC%<span class="number">88</span>%EF%BC%<span class="number">89</span>()%<span class="number">22</span>%E2%<span class="number">80</span>%9C%E2%<span class="number">80</span>%9D%E3%<span class="number">80</span>%8A%E3%<span class="number">80</span>%8B%E3%<span class="number">80</span>%<span class="number">90</span>%E3%<span class="number">80</span>%<span class="number">91</span>%3A%EF%BC%9A%3B%EF%BC%9B%EF%BC%8C%2C.%E3%<span class="number">80</span>%<span class="number">81</span>%5C%2F%E2%<span class="number">80</span>%A2%E3%<span class="number">80</span>%<span class="number">82</span>!%EF%BC%<span class="number">81</span>%3F%EF%BC%9F_%<span class="number">26</span>%C2%B7%E2%<span class="number">80</span>%<span class="number">94</span>%5Cs%2B-%5D%2Fg%2C<span class="string">&#x27;&#x27;</span></span>).<span class="title">replace</span>(<span class="params"><span class="string">&#x27;EnglishEdition&#x27;</span>%2C<span class="string">&#x27;&#x27;</span></span>).<span class="title">toLowerCase</span>(<span class="params"></span>)%3<span class="title">Bw</span>%3<span class="title">Dms</span>%3<span class="title">D</span>%3<span class="title">Enew</span>%20<span class="title">Promise</span>(<span class="params">r%3D%3EsetTimeout(r%2Cms)</span>)%2<span class="title">Cn</span>%3<span class="title">Dz</span>%3<span class="title">D</span>%3<span class="title">EparseInt</span>(<span class="params">%<span class="number">24</span>(<span class="string">&#x27;.contentCount_myx&#x27;</span>).text().match(%2F(%5Cd%2B)%2Fg)%5Bz%5D</span>)%2<span class="title">Ca</span>%3<span class="title">Dn</span>(<span class="params"><span class="number">0</span></span>)%2<span class="title">Cp</span>%3<span class="title">Dz</span>%3<span class="title">D</span>%3<span class="title">Econsole</span>.<span class="title">log</span>(<span class="params">z</span>)%3<span class="title">Blet</span>%20<span class="title">c</span>%3<span class="title">D0</span>%2<span class="title">Cv</span>%3<span class="title">D0</span>%2<span class="title">Co</span>%3<span class="title">D0</span>%2<span class="title">Cx</span>%3<span class="title">D</span>%5<span class="title">B</span>%5<span class="title">D</span>%3<span class="title">Basync</span>%20<span class="title">function</span>%20<span class="title">d</span>(<span class="params"></span>)%7<span class="title">Blet</span>%20<span class="title">ls</span>%3<span class="title">D</span>%24(<span class="params"><span class="string">&#x27;.contentTableListRow_myx%20li&#x27;</span></span>)%2<span class="title">Cl</span>%3<span class="title">Dls</span>.<span class="title">length</span>%2<span class="title">Cs</span>%3<span class="title">Dn</span>(<span class="params"><span class="number">2</span></span>)%3<span class="title">Bif</span>(<span class="params">l%3C200%<span class="number">26</span>%26s%3Ca</span>)%7<span class="title">Bwindow</span>.<span class="title">scrollTo</span>(<span class="params"><span class="number">0</span>%2C%<span class="number">24</span>(<span class="string">&#x27;body&#x27;</span>).outerHeight()</span>)%3<span class="title">B</span>%7<span class="title">Delse</span>%7<span class="title">Bc</span>%2<span class="title">B</span>%3<span class="title">Dl</span>%3<span class="title">Bfor</span>(<span class="params"><span class="keyword">const</span>%20j%20of%20ls.get()</span>)%7<span class="title">Bconst</span>%20<span class="title">t</span>%3<span class="title">D</span>%24(<span class="params">j</span>).<span class="title">find</span>(<span class="params"><span class="string">&#x27;div%5Bbo-text%3D%22tab.title%22%5D&#x27;</span></span>).<span class="title">text</span>(<span class="params"></span>)%3<span class="title">Bp</span>(<span class="params"><span class="string">&#x27;Downloading%3A%20&#x27;</span>%2Bt</span>)%3<span class="title">B</span>%24(<span class="params">j</span>).<span class="title">find</span>(<span class="params"><span class="string">&#x27;button%5Baria-label%3D%22actions%22%5D&#x27;</span></span>).<span class="title">click</span>(<span class="params"></span>)%3<span class="title">Bconst</span>%20<span class="title">u</span>%3<span class="title">D</span>%24(<span class="params"><span class="string">&#x27;%23contentAction_download_myx&#x27;</span></span>)%3<span class="title">Bif</span>(<span class="params">u.is(<span class="string">&#x27;%3Ahidden&#x27;</span>)</span>)%7<span class="title">Bo</span>%2<span class="title">B</span>%3<span class="title">D1</span>%3<span class="title">Bp</span>(<span class="params"><span class="string">&#x27;sample%2C%20ignore&#x27;</span></span>)%3<span class="title">Bcontinue</span>%3<span class="title">B</span>%7<span class="title">Dif</span>(<span class="params">x.length%<span class="number">26</span>%26x.includes(h(t))</span>)%7<span class="title">Bo</span>%2<span class="title">B</span>%3<span class="title">D1</span>%3<span class="title">Bp</span>(<span class="params"><span class="string">&#x27;duplicate%2C%20ignore&#x27;</span></span>)%3<span class="title">Bcontinue</span>%3<span class="title">B</span>%7<span class="title">Du</span>.<span class="title">click</span>(<span class="params"></span>)%3<span class="title">Bif</span>(<span class="params">%<span class="number">24</span>(<span class="string">&#x27;div%5Bng-show%3D%22noDeviceEligible%22%5D&#x27;</span>).is(<span class="string">&#x27;%3Avisible&#x27;</span>)</span>)%7<span class="title">Bconst</span>%20<span class="title">m</span>%3<span class="title">D</span>&#x27;<span class="title">No</span>%20<span class="title">available</span>%20<span class="title">Kindle</span>%20<span class="title">device</span>.&#x27;%3<span class="title">Balert</span>(<span class="params">m</span>)%3<span class="title">Bp</span>(<span class="params">m%2B<span class="string">&#x27;%20Exit.&#x27;</span></span>)%3<span class="title">Breturn</span>%3<span class="title">B</span>%7<span class="title">D</span>%24(<span class="params"><span class="string">&#x27;a%5Bid%3D%22dialogButton_ok_myx%20%22&#x27;</span></span>).<span class="title">click</span>(<span class="params"></span>)%3<span class="title">Bv</span>%2<span class="title">B</span>%3<span class="title">D1</span>%3<span class="title">Bp</span>(<span class="params">%60Total%3A%<span class="number">20</span>%<span class="number">24</span>%7Ba%7D%2C%20Done%3A%<span class="number">20</span>%<span class="number">24</span>%7Bv%7D%2C%20Ignore%3A%<span class="number">20</span>%<span class="number">24</span>%7Bo%7D%<span class="number">60</span></span>)%3<span class="title">Bawait</span>%20<span class="title">w</span>(<span class="params"><span class="number">10000</span></span>)%3<span class="title">B</span>%7<span class="title">Dif</span>(<span class="params">s%3D%3Da</span>)%7<span class="title">Bp</span>(<span class="params"><span class="string">&#x27;Done.&#x27;</span></span>)%3<span class="title">Breturn</span>%3<span class="title">B</span>%7<span class="title">Delse</span>%7<span class="title">B</span>%24(<span class="params"><span class="string">&#x27;.contentTableShowMore_myx&#x27;</span></span>).<span class="title">eq</span>(<span class="params"><span class="number">1</span></span>).<span class="title">click</span>(<span class="params"></span>)%3<span class="title">B</span>%7<span class="title">D</span>%7<span class="title">Dawait</span>%20<span class="title">w</span>(<span class="params"><span class="number">2000</span></span>)%3<span class="title">Bawait</span>%20<span class="title">d</span>(<span class="params"></span>)%3<span class="title">B</span>%7<span class="title">Dfunction</span>%20<span class="title">q</span>(<span class="params"></span>)%7<span class="title">Bif</span>(<span class="params">confirm(<span class="string">&#x27;Need%20to%20exclude%20files%3F&#x27;</span>)</span>)%7<span class="title">B</span>%24(<span class="params"><span class="string">&#x27;body&#x27;</span></span>).<span class="title">append</span>(<span class="params"><span class="string">&#x27;%3Cinput%20id%3D%22e%22%20type%3D%22file%22%20style%3D%22display%3Anone%3B%22%20webkitdirectory%3E&#x27;</span></span>)%3<span class="title">Bconst</span>%20<span class="title">e</span>%3<span class="title">D</span>%24(<span class="params"><span class="string">&#x27;%23e&#x27;</span></span>)%3<span class="title">Be</span>.<span class="title">change</span>(<span class="params">(ev)%3D%3E%7Bfor(<span class="keyword">const</span>%20f%20of%20ev.target.files)%7Bx.push(h(f.name.replace(%2F%5C.azw.*%<span class="number">24</span>%2F%2C<span class="string">&#x27;&#x27;</span>)))%3B%7Dd()%3B%7D</span>)%3<span class="title">Be</span>.<span class="title">click</span>(<span class="params"></span>)%3<span class="title">B</span>%7<span class="title">Delse</span>%7<span class="title">Bd</span>(<span class="params"></span>)%3<span class="title">B</span>%7<span class="title">D</span>%7<span class="title">Dq</span>(<span class="params"></span>)%7<span class="title">D</span>)(<span class="params"></span>)</span>;</span><br></pre></td></tr></table></figure><h1 id="解密与转换格式">2.解密与转换格式</h1><p>由于直接从官网下载的图书是DRM加密的，我们需要解密并且更换格式。这里需要用到两个工具：</p><ul><li><strong>下载 Calibre</strong>：<a href="https://calibre-ebook.com/download">官方下载页面</a> ｜ <a href="https://github.com/kovidgoyal/calibre/releases">Github 发布页</a></li><li><strong>下载 DeDRM 插件</strong>：<a href="https://github.com/noDRM/DeDRM_tools/releases">分叉版本</a> ｜ <a href="https://github.com/apprenticeharper/DeDRM_tools/releases">原始版本</a>（已停止维护）</li></ul><p>注意，移除 DRM 是为了维护自己的合法权益，为避免触犯版权方的权益，请勿分发到互联网上。为保护个人隐私及电子书文件不被外泄，建议避免使用任何在线形式的 DRM 去除工具。</p><p>下载后先安装Calibre，这一步需要选kindle，其他步骤下一步即可。</p><figure><img data-src="https://img.zhaoxuanlang.cn/v2-e66ea24afe92775b4dc3bc24f3f4fa7a_1440w.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>DeDRM插件解压缩后有一个DeDRM_plugin.zip文件，去calibre中首选项-插件-从文件加载插件-选择刚刚那个zip文件-确定-确定-选择这个插件-自定义-eInk Kindle ebooks-点加号，输入你kindle的 序列号（16位）-保存关闭设置页面</p><figure><img data-src="https://img.zhaoxuanlang.cn/v2-9b2a9caf7ec2d635a9ad71fec604f9fa_1440w.jpg" alt="选择插件" /><figcaption aria-hidden="true">选择插件</figcaption></figure><p>这里就设置完成了，现在可以把刚刚下好的书籍直接拖进软件中，点上边转换书籍，右上角可以选输出格式，输出即可。</p><figure><img data-src="https://img.zhaoxuanlang.cn/image-20220622%E4%B8%8A%E5%8D%88121826096.png" alt="image-20220622上午121826096" /><figcaption aria-hidden="true">image-20220622上午121826096</figcaption></figure><h1 id="用脚本提取epub图书">3.用脚本提取epub图书</h1><p>刚刚转换出来的目录格式很不人性化，类似这样：</p><p>-dir -a/a.epub -b/b.epub -c/c.epub</p><p>这样手工选择就很麻烦，所以需要写个脚本来自动遍历，脚本内容如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="comment"># 更改IFS变量，以换号符作为for循环的分隔符</span></span><br><span class="line">oldIFS=<span class="variable">$IFS</span></span><br><span class="line">IFS=$<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">mkdir epubs azw3s</span><br><span class="line"><span class="keyword">for</span> dir1 <span class="keyword">in</span> `ls /Users/zxl/Calibre\ 书库/`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> dir2 <span class="keyword">in</span> `ls /Users/zxl/Calibre\ 书库/<span class="variable">$dir1</span>`</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">cd</span> /Users/zxl/Calibre\ 书库/<span class="variable">$dir1</span>/<span class="variable">$dir2</span></span><br><span class="line">        book=`ls | grep <span class="string">&quot;.epub&quot;</span>`</span><br><span class="line">        <span class="built_in">echo</span> processing <span class="variable">$book</span> .......</span><br><span class="line">        sudo cp <span class="variable">$book</span> ~/epubs/<span class="variable">$book</span></span><br><span class="line">        azw3=`ls | grep <span class="string">&quot;.azw3&quot;</span>`</span><br><span class="line">        <span class="built_in">echo</span> processing <span class="variable">$azw3</span> .......</span><br><span class="line">        sudo cp <span class="variable">$azw3</span> ~/azw3s/<span class="variable">$azw3</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;done&quot;</span></span><br></pre></td></tr></table></figure><p>运行即可自动把epub和azw3文件分类放好。</p>]]></content>
      
      
      <categories>
          
          <category> 其他笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Amazon-kindle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新建hexo文章的优化操作</title>
      <link href="/2022/06/04/%E6%96%B0%E5%BB%BAhexo%E6%96%87%E7%AB%A0%E7%9A%84%E4%BC%98%E5%8C%96%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/06/04/%E6%96%B0%E5%BB%BAhexo%E6%96%87%E7%AB%A0%E7%9A%84%E4%BC%98%E5%8C%96%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>在新建hexo文章的时候需要先进入hexo的目录再新建，而且新建的文章常常不知道该给他加什么标签和分类，还得去网站上看现在有啥。这篇文章介绍了快速新建文章并且显示辅助信息的一系列操作。</p><span id="more"></span><h1 id="显示当前有的标签和分类">显示当前有的标签和分类</h1><p>首先需要获取到所有的信息，由于hexo文章结构都是固定的，因此获得信息页不是很难。</p><p>首先使用<img data-src="https://img.zhaoxuanlang.cn/image-20220607%E4%B8%8B%E5%8D%8842609348.png" alt="image-20220607下午42609348" /></p><p>获取到tags和categories之间的文本并且保存在test文件中。<sup><a href="https://blog.csdn.net/ichen820/article/details/118112985" title="sed截取字符串之间内容">1</a></sup></p><p>在观察这个文件的时候我发现里边有很多不需要的内容，所以又使用了</p><figure><img data-src="https://img.zhaoxuanlang.cn/image-20220607%E4%B8%8B%E5%8D%8842638905.png" alt="image-20220607下午42638905" /><figcaption aria-hidden="true">image-20220607下午42638905</figcaption></figure><p>来删除以id和date开头的行并保存在test2中。<sup><a href="https://os.51cto.com/article/624709.html" title="使用sed删除特定行">2</a></sup></p><p>之后再使用</p><figure><img data-src="https://img.zhaoxuanlang.cn/image-20220607%E4%B8%8B%E5%8D%8842704465.png" alt="image-20220607下午42704465" /><figcaption aria-hidden="true">image-20220607下午42704465</figcaption></figure><p>将数据排序去重得到粗加工产物test3.<sup><a href="https://cloud.tencent.com/developer/article/1392949?from=15425" title="Linux去重">3</a></sup></p><p>然后使用python来读取这个文件并且进行细分，代码如下</p><figure><img data-src="https://img.zhaoxuanlang.cn/image-20220607%E4%B8%8B%E5%8D%8843214237.png" alt="image-20220607下午43214237" /><figcaption aria-hidden="true">image-20220607下午43214237</figcaption></figure><p><img data-src="https://img.zhaoxuanlang.cn/image-20220607%E4%B8%8B%E5%8D%8843232975.png" alt="image-20220607下午43232975" />开头的一行是因为在使用脚本调用的时候括号需要转义，如果加上用环境中的python去运行的话也可以实现并且简洁不少。<sup><a href="https://www.jianshu.com/p/b1a8264c2043" title="编写shell脚本运行python文件">4</a></sup></p><p>最后把他们整合到一个sh文件中：</p><figure><img data-src="https://img.zhaoxuanlang.cn/image-20220607%E4%B8%8B%E5%8D%8842746654.png" alt="image-20220607下午42746654" /><figcaption aria-hidden="true">image-20220607下午42746654</figcaption></figure><p>这个文件要放在_posts目录下运行。</p><p>现在运行new.sh就可以看到结果。</p><figure><img data-src="https://img.zhaoxuanlang.cn/image-20220607%E4%B8%8B%E5%8D%8843316861.png" alt="image-20220607下午43316861" /><figcaption aria-hidden="true">image-20220607下午43316861</figcaption></figure><h1 id="快速新建文章">快速新建文章</h1><p>利用了别名的传参技巧<sup><a href="https://www.qianjinyike.com/alias-%E5%88%AB%E5%90%8D%E5%91%BD%E4%BB%A4%E6%97%B6%E5%80%99%EF%BC%8C%E5%A6%82%E4%BD%95%E6%94%AF%E6%8C%81%E4%BC%A0%E5%8F%82%EF%BC%9F/" title="别名传参">5</a></sup>，具体别名实现如下：</p><p><code>hexo='func()&#123; cd ~/study/newblog/source/_posts/ &amp;&amp; hexo $1 $2 &amp;&amp; sh new.sh &amp;&amp; cd ~&#125;;func'</code></p><p>现在在任何位置都可以使用hexo相关命令，并且创建文件后会先打开这个文章便于编辑，并且提示你当前有的所有信息，最后回到~目录下。效果如下:</p><figure><img data-src="https://img.zhaoxuanlang.cn/image-20220604%E4%B8%8B%E5%8D%8814039888.png" alt="image-20220604下午14039888" /><figcaption aria-hidden="true">image-20220604下午14039888</figcaption></figure><h1 id="参考文献">参考文献：</h1>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用meta实现定时跳转链接</title>
      <link href="/2022/05/29/%E4%BD%BF%E7%94%A8meta%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E8%B7%B3%E8%BD%AC%E9%93%BE%E6%8E%A5/"/>
      <url>/2022/05/29/%E4%BD%BF%E7%94%A8meta%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E8%B7%B3%E8%BD%AC%E9%93%BE%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<p>利用了meta标签的一个功能。</p><span id="more"></span><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;5; url=http://www.baidu.com&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>页面将在 <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;time&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">span</span>&gt;</span> 秒后重定向<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;111.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">legend</span>&gt;</span>health information<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">          height: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">          weight: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;time&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> t = <span class="number">5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeTIme</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        t--;</span><br><span class="line">        num.innerHTML = t;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">&#x27;Time out&#x27;</span>);</span><br><span class="line">        <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(changeTIme, <span class="number">1000</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>统计代码行数</title>
      <link href="/2022/05/26/%E7%BB%9F%E8%AE%A1%E4%BB%A3%E7%A0%81%E8%A1%8C%E6%95%B0/"/>
      <url>/2022/05/26/%E7%BB%9F%E8%AE%A1%E4%BB%A3%E7%A0%81%E8%A1%8C%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>虽然用行数来统计代码量很蠢，但是很多情况下又想看看这个项目中一共有多少行代码，自己数就变得更蠢了，所以需要一个统计行数的小插件。</p><span id="more"></span><h2 id="下载安装">下载安装</h2><p>mac系统使用brew下载<code>brew install cloc</code></p><p>github链接：https://github.com/AlDanial/cloc</p><h2 id="使用">使用</h2><p><code>cloc ./</code>统计当前文件夹行数</p>]]></content>
      
      
      <categories>
          
          <category> 其他笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码统计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++ stack/queue方法集</title>
      <link href="/2022/05/09/c-stack-queue%E6%96%B9%E6%B3%95%E9%9B%86/"/>
      <url>/2022/05/09/c-stack-queue%E6%96%B9%E6%B3%95%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>增删查改</p><span id="more"></span><h1 id="stack">stack</h1><figure><img data-src="https://img.zhaoxuanlang.cn/2-1P913101Q4T2.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h1 id="queue">queue</h1><figure><img data-src="https://img.zhaoxuanlang.cn/2-1P913113140553.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>haskell 学习</title>
      <link href="/2022/04/13/haskell-%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/04/13/haskell-%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>haskell笔记</p><span id="more"></span><h1 id="基础">基础</h1><h2 id="变量">变量</h2><p>变量命名使用驼峰式</p><h2 id="函数">函数</h2><h3 id="调用">调用</h3><p>先写函数名后加参数，如<code>min 1 2</code></p><h3 id="声明">声明</h3><p>先函数名，后跟空格分隔的参数表，然后加=后定义函数行为</p><p><code>doubleme x = x+x</code></p><h3 id="常用函数">常用函数</h3><p>replicate n m 复制n个m</p><h2 id="if语句">if语句</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">doubleme</span> x = <span class="keyword">if</span> x&gt;<span class="number">100</span></span><br><span class="line"><span class="keyword">then</span> x</span><br><span class="line"><span class="keyword">else</span> x*<span class="number">2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>if里 else部分不能省略</p><p><strong>if语句是一个表达式</strong>，即返回一个值的代码。</p><h2 id="变量-1">变量</h2><p>在ghci下使用let或在脚本中直接写a=1定义</p><h3 id="list">List</h3><p>[_x]匹配只有一个元素时的元素</p><p><code>let a = [1,2,3,4]</code> 记得用逗号隔开</p><p>字符串就是字符的list</p><ul><li>合并list：<code>[1,2,3] ++ [4,5,6]</code><code>"hello" ++ "world"</code></li></ul><p>合并时会遍历整个list，长字符串性能差</p><ul><li>前插元素： <code>1:[2,3,4,5]</code></li></ul><p>++操作需要两个操作数都是list，因此需要<code>[1] ++ [2]</code></p><p>:操作是将一个字符前插到一个list，因此<code>[1,2,3]</code>实质上就是<code>1:2:3:[]</code></p><ul><li>索引元素：<code>[1,2,3,4] !! 1</code>,<code>[[[],[]],[]] !! 0 !! 1</code></li><li>Head 获取第一个元素</li><li>tail 获取除去第一个剩下的</li><li>last 获取最后一个</li><li>init 获取除去最后一个剩下的</li><li>length 获取长度</li><li>null 获取是否为空</li><li>Reverse 反转列表</li><li>take n list 获取前n个元素<ul><li><code>take 10 (repeat 5)</code></li><li><code>replicate 3 10</code></li></ul></li><li>drop n list 删除前n个元素</li><li>n elem list 判断n是否在list里</li></ul><h3 id="range">Range</h3><p><code>[1..20]</code></p><p><code>[1,2..20]</code>只会按照特定加法步长生成list，不要使用浮点数</p><p>可以定义无限长度list，如取前24个3的倍数。<code>take 24 [3,6..]</code>由于Haskell是懒惰的，所以他只会在你取值的时候进行计算。</p><h3 id="元组tuple">元组Tuple</h3><p>用小括号定义</p><p>与list区别：可以存入多种元素，可以包含多种类别的元素</p><p>zip函数接受两个list，生成一个包含tuple的list。若长短不一则长的适配短的</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> ghci&gt; zip [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] [<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">[(<span class="number">1</span>,<span class="number">5</span>),(<span class="number">2</span>,<span class="number">5</span>),(<span class="number">3</span>,<span class="number">5</span>),(<span class="number">4</span>,<span class="number">5</span>),(<span class="number">5</span>,<span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line"><span class="title">ghci</span>&gt; zip [<span class="number">1</span> .. <span class="number">5</span>] [<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>, <span class="string">&quot;five&quot;</span>]</span><br><span class="line"></span><br><span class="line">[(<span class="number">1</span>,<span class="string">&quot;one&quot;</span>),(<span class="number">2</span>,<span class="string">&quot;two&quot;</span>),(<span class="number">3</span>,<span class="string">&quot;three&quot;</span>),(<span class="number">4</span>,<span class="string">&quot;four&quot;</span>),(<span class="number">5</span>,<span class="string">&quot;five&quot;</span>)]</span><br></pre></td></tr></table></figure><h1 id="函数语法">函数语法</h1><h2 id="模式匹配">模式匹配</h2><p>模式匹配通过检查数据的特定结构来检查其是否匹配，并按模式从中取得数据。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sayMe</span> :: (<span class="type">Integral</span> a) =&gt; a -&gt; <span class="type">String</span>  </span><br><span class="line"><span class="title">sayMe</span> <span class="number">1</span> = <span class="string">&quot;One!&quot;</span>  </span><br><span class="line"><span class="title">sayMe</span> <span class="number">2</span> = <span class="string">&quot;Two!&quot;</span>  </span><br><span class="line"><span class="title">sayMe</span> <span class="number">3</span> = <span class="string">&quot;Three!&quot;</span>  </span><br><span class="line"><span class="title">sayMe</span> <span class="number">4</span> = <span class="string">&quot;Four!&quot;</span>  </span><br><span class="line"><span class="title">sayMe</span> <span class="number">5</span> = <span class="string">&quot;Five!&quot;</span>  </span><br><span class="line"><span class="title">sayMe</span> x = <span class="string">&quot;Not between 1 and 5&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>若想匹配不需要的东西就需要用括号括起来并且用_表示</p><p>递归常使用(x:xs)进行匹配</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sum&#x27;</span> :: (<span class="type">Num</span> a) =&gt; [a] -&gt; a  </span><br><span class="line"><span class="title">sum&#x27;</span> [] = <span class="number">0</span>  </span><br><span class="line"><span class="title">sum&#x27;</span> (x:xs) = x + sum&#x27; xs</span><br></pre></td></tr></table></figure><p>as模式：</p><p>将一个名字和 <code>@</code>置于模式前，可以在按模式分割什么东西时仍保留对其整体的引用。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">capital</span> :: <span class="type">String</span> -&gt; <span class="type">String</span>  </span><br><span class="line"><span class="title">capital</span> <span class="string">&quot;&quot;</span> = <span class="string">&quot;Empty string, whoops!&quot;</span>  </span><br><span class="line"><span class="title">capital</span> all@(x:xs) = <span class="string">&quot;The first letter of &quot;</span> ++ all ++ <span class="string">&quot; is &quot;</span> ++ [x]</span><br></pre></td></tr></table></figure><h2 id="guards">Guards</h2><p>用来检查一个值的某项属性是否为真</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">bmiTell</span> :: (<span class="type">RealFloat</span> a) =&gt; a -&gt; <span class="type">String</span>  </span><br><span class="line"><span class="title">bmiTell</span> bmi  </span><br><span class="line">    | bmi &lt;= <span class="number">18.5</span> = <span class="string">&quot;You&#x27;re underweight, you emo, you!&quot;</span>  </span><br><span class="line">    | bmi &lt;= <span class="number">25.0</span> = <span class="string">&quot;You&#x27;re supposedly normal. Pffft, I bet you&#x27;re ugly!&quot;</span>  </span><br><span class="line">    | bmi &lt;= <span class="number">30.0</span> = <span class="string">&quot;You&#x27;re fat! Lose some weight, fatty!&quot;</span>  </span><br><span class="line">    | otherwise   = <span class="string">&quot;You&#x27;re a whale, congratulations!&quot;</span></span><br></pre></td></tr></table></figure><p>竖线就是guards，若为真就使用，为假就往下</p><h2 id="where">Where</h2><p>写在guards下边</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">bmiTell</span> :: (<span class="type">RealFloat</span> a) =&gt; a -&gt; a -&gt; <span class="type">String</span>  </span><br><span class="line"><span class="title">bmiTell</span> weight height  </span><br><span class="line">    | bmi &lt;= skinny = <span class="string">&quot;You&#x27;re underweight, you emo, you!&quot;</span>  </span><br><span class="line">    | bmi &lt;= normal = <span class="string">&quot;You&#x27;re supposedly normal. Pffft, I bet you&#x27;re ugly!&quot;</span>  </span><br><span class="line">    | bmi &lt;= fat    = <span class="string">&quot;You&#x27;re fat! Lose some weight, fatty!&quot;</span>  </span><br><span class="line">    | otherwise     = <span class="string">&quot;You&#x27;re a whale, congratulations!&quot;</span>  </span><br><span class="line">    <span class="keyword">where</span> bmi = weight / height ^ <span class="number">2</span>  </span><br><span class="line">          skinny = <span class="number">18.5</span>  </span><br><span class="line">          normal = <span class="number">25.0</span>  </span><br><span class="line">          fat = <span class="number">30.0</span></span><br></pre></td></tr></table></figure><h2 id="let">let</h2><p>let必须跟一个in，在let里定义的变量可以在in里当成私有变量来使用。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">cylinder</span> :: (<span class="type">RealFloat</span> a) =&gt; a -&gt; a -&gt; a  </span><br><span class="line"><span class="title">cylinder</span> r h = </span><br><span class="line">    <span class="keyword">let</span> sideArea = <span class="number">2</span> * pi * r * h  </span><br><span class="line">        topArea = pi * r ^<span class="number">2</span>  </span><br><span class="line">    <span class="keyword">in</span>  sideArea + <span class="number">2</span> * topArea</span><br></pre></td></tr></table></figure><p>let是一个表达式，可以在任何地方使用。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; (<span class="keyword">let</span> (a,b,c) = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="keyword">in</span> a+b+c) * <span class="number">100</span>  </span><br><span class="line"><span class="number">600</span></span><br></pre></td></tr></table></figure><h2 id="case">case</h2><p>Case 类似switch</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">case</span> expression <span class="keyword">of</span> pattern -&gt; result  </span><br><span class="line">                   pattern -&gt; result  </span><br><span class="line">                   pattern -&gt; result  </span><br><span class="line">                   ...</span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">head&#x27;</span> :: [a] -&gt; a  </span><br><span class="line"><span class="title">head&#x27;</span> xs = <span class="keyword">case</span> xs <span class="keyword">of</span> [] -&gt; error <span class="string">&quot;No head for empty lists!&quot;</span>  </span><br><span class="line">                      (x:_) -&gt; x</span><br></pre></td></tr></table></figure><h1 id="常用函数-1">常用函数</h1><h2 id="zip-a-b">zip [a] [b]</h2><p>返回数组，将a，b组合起来，若长度不同则以短的为准</p><h2 id="replicate-a-b">replicate a b</h2><p>返回数组，把b重复a次</p><h2 id="flip-f-a-b">flip f a b</h2><p>返回f b a的结果</p><h2 id="div-a-b">div a b</h2><p>返回a/b , 只能用于整数</p><h2 id="zipwith-f-a-b">zipWith f [a] [b]</h2><p>返回数组，每一项是a，b中相应项经过f操作后的结果</p><h2 id="map-f-a">map f [a]</h2><p>返回数组，每一项是a经过f操作后的结果</p><h2 id="filter-a-bool-a">filter (a-&gt;bool) [a]</h2><p>返回数组，a数组经过限制条件后剩余元素</p><h2 id="takewhile-a-bool-a">takeWhile (a-&gt;bool) [a]</h2><p>返回符合限制条件的元素数组</p><h2 id="dropwhile-a-bool-a">dropWhile (a-&gt;bool) [a]</h2><p>返回去除条件后的数组</p><h2 id="odd">odd</h2><p>判断是不是基数</p><h2 id="even">even</h2><p>判断是不是偶数</p><h2 id="words">words</h2><p>把string中的单词拆出来成为数组</p><h2 id="unwords">unwords</h2><p>把单词数组组合成String</p><h1 id="计算函数">计算函数</h1><p>mod 取模</p><p>div 除</p><h1 id="自定义type">自定义type</h1><h2 id="继承类">继承类</h2><h3 id="show">show</h3><p>让他可以print</p><h3 id="eq">Eq</h3><p>可以做比较</p><h1 id="输入输出">输入输出</h1><h2 id="输入">输入</h2><p>putStrLn</p><h1 id="functorapplicative-functormonoids">Functor,ApplicativeFunctor,Monoids</h1><h2 id="functor">Functor</h2><p>Functors 是可以被 map over的对象，这个typeclass只有一个method是fmap</p><h3 id="fmap">fmap</h3><p>fmap :: (a -&gt; b) -&gt; f a -&gt; f b</p><p>提供一个函数和一个有盒子的值，输出装着新值的盒子</p><p>将输入的方程应用到a上，即 fmap f a = f a</p><h2 id="applicative-functor">Applicative Functor</h2><p>pure a = a</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&lt;*&gt;) :: <span class="type">Applicative</span> f =&gt; f (a -&gt; b) -&gt; f a -&gt; f b</span><br></pre></td></tr></table></figure><p>提供一个在盒子里的函数和一个盒子里的值，输出装着新值的盒子</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; pure (+) &lt;*&gt; <span class="type">Just</span> <span class="number">3</span> &lt;*&gt; <span class="type">Just</span> <span class="number">5</span>  </span><br><span class="line"><span class="type">Just</span> <span class="number">8</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; pure (+) &lt;*&gt; <span class="type">Just</span> <span class="number">3</span> &lt;*&gt; <span class="type">Nothing</span>  </span><br><span class="line"><span class="type">Nothing</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; pure (+) &lt;*&gt; <span class="type">Nothing</span> &lt;*&gt; <span class="type">Just</span> <span class="number">5</span>  </span><br><span class="line"><span class="type">Nothing</span></span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(&lt;$&gt;) :: (<span class="type">Functor</span> f) =&gt; (a -&gt; b) -&gt; f a -&gt; f b  </span><br><span class="line"><span class="title">f</span> &lt;$&gt; x = fmap f x</span><br><span class="line"><span class="title">pure</span> f &lt;*&gt; x = f &lt;$&gt; x</span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; (++) &lt;$&gt; <span class="type">Just</span> <span class="string">&quot;johntra&quot;</span> &lt;*&gt; <span class="type">Just</span> <span class="string">&quot;volta&quot;</span>  </span><br><span class="line"><span class="type">Just</span> <span class="string">&quot;johntravolta&quot;</span></span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; a = [(*)]&lt;*&gt;[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; :t a</span><br><span class="line"><span class="comment">--a :: Num a =&gt; [a -&gt; a]</span></span><br><span class="line"><span class="comment">--a是一个数组，里边每个元素都是一个a-&gt;a的函数</span></span><br><span class="line"><span class="title">ghci</span>&gt; length a</span><br><span class="line"><span class="comment">--4</span></span><br><span class="line"><span class="title">ghci</span>&gt; a&lt;*&gt;[<span class="number">3</span>]</span><br><span class="line"><span class="comment">--[3,6,4,5]</span></span><br><span class="line"><span class="title">a</span>里边是<span class="number">1</span>*,<span class="number">2</span>*,<span class="number">1</span>+,<span class="number">2</span>+</span><br></pre></td></tr></table></figure><h1 id="monads">Monads</h1><h2 id="bind">bind &gt;&gt;=</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&gt;&gt;=) :: <span class="type">Monad</span> m =&gt; m a -&gt; (a -&gt; m b) -&gt; m b</span><br></pre></td></tr></table></figure><h2 id="laws">Laws:</h2><ol type="1"><li>return v&gt;&gt;=f =&gt; f v</li><li>M &gt;&gt;= (= a) =&gt; M</li></ol><h2 id="pure">pure</h2><h2 id="do-statement">Do statement</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">do</span></span><br><span class="line"><span class="title">x</span>&lt;-[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="title">y</span>&lt;-[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="title">pure</span>(x*y)</span><br><span class="line"><span class="comment">--等价于</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&gt;&gt;=\x-&gt;</span><br><span class="line">[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]&gt;&gt;=\y-&gt;</span><br><span class="line">pure (x*y)</span><br></pre></td></tr></table></figure><p>见到左箭头可以认为从右侧取一个值</p><p>x&lt;- m a</p><p>通过左箭头后x变成a类型</p><h1 id="ghci命令">ghci命令</h1><h2 id="l-装载某个hs文件">:l 装载某个hs文件</h2><p><code>:l aaa.hs</code></p><h2 id="t-查看类型">:t 查看类型</h2><p><code>:t 'a'</code></p><h1 id="quickcheck">quickcheck</h1><p>查看用当前arbitry生成的样本数据</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sample&#x27;</span> arbitrary :: <span class="type">IO</span> [<span class="type">UpperCaseString</span>]</span><br></pre></td></tr></table></figure><p>使用erlang的quickCheck需要导入包</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-include_lib</span><span class="params">(<span class="string">&quot;eqc/include/eqc.hrl&quot;</span>)</span>.</span><br></pre></td></tr></table></figure><p>查看eqc生成的样本数据</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eqc_gen:sample(dict_eqc:dict_5()).</span><br></pre></td></tr></table></figure><h1 id="otp">Otp</h1><p>分离发信息和逻辑部分</p><h2 id="使用gen_server">使用gen_server</h2><p>cast-&gt; request</p><p>Call -&gt; request_reply</p><p>handle_cast -&gt; handle_request</p><h2 id="statefunction-mode">Statefunction mode</h2><p>-behavior(gen_statem)</p><p>需要先明确程序的多个状态</p><h3 id="lamp-module-implementation">lamp module implementation</h3><ol type="1"><li>module定义，public API定义，callbacks</li><li>start函数，使用gen_statem的start方法，第一个参数是自身module</li><li>button函数，使用cast方法，参数是Lamp和button</li><li>stop函数，使用stop方法</li><li>callback方法：</li><li>定义init，返回一个三元组</li><li>定义callback_mode返回state_functions，还可以使用handle_event_functions</li><li>states方法：</li><li>Off接受cast,button,Data,返回四元组{next_state,low-UNSTABLE,Data,2000}</li><li>Low_unstable同样接受三个参数，如果第一个是cast则在触发cast的时候进入，再定义一个第一个是timeout，第二个是_的来等到超时进入。</li><li>使用：</li><li>{ok,L} = Lamp:start()</li></ol><h2 id="supervisor">supervisor</h2><p>如果有另一个进程需要执行但是不知道需要执行多久，就spown一个新的，并且用一个supervisor来监督他的执行</p><p>理想状况是除了root每个进程都有一个supervisor</p><h3 id="lamp-module-supervisior-implementation">Lamp module supervisiorimplementation</h3><ol type="1"><li>module定义，export start_link, spawn_lamp</li><li>Export init</li><li>Behaviour 是supervisor</li><li>startlink函数，同上start</li><li>spawnlamp函数，传入一个S，使用supervisior的start_child方法传入两个参数</li><li>init函数，定义一个Child变量，包含一系列参数的tuple。定义RestartStrategy变量，定义了重启时需要的操作。定义MaxRestart变量和MaxTime变量，返回这些变量。</li><li>在lamp.erl文件中新增一个start_link函数，使用的是他自己behavior的方法</li><li>使用：</li><li>{ok,S} = lamp_sup:start_link()</li><li>{ok,L1} = Spawn_lamp(S)</li><li>现在可以使用L1了</li><li>Exit(S,shutdown)关闭supervisor和他下边的所有进程</li></ol>]]></content>
      
      
      <categories>
          
          <category> haskell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>c++ String 方法集</title>
      <link href="/2022/04/11/c-String-%E6%96%B9%E6%B3%95%E9%9B%86/"/>
      <url>/2022/04/11/c-String-%E6%96%B9%E6%B3%95%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>String方法</p><span id="more"></span><h1 id="连接">连接</h1><p>单个char使用push_back()</p><p>连接字符串直接用+即可，也可以使用append方法</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>引用类型</title>
      <link href="/2022/03/15/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
      <url>/2022/03/15/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>引用值即对象，使用new后跟构造函数创建，不同于原始值，引用值保存在堆空间中。</p><span id="more"></span><h1 id="string">String</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&quot;text&quot;</span></span><br><span class="line">s2 = s1.substring(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">s1 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;text&quot;</span>)</span><br><span class="line">s2 = s1.substring(<span class="number">2</span>)</span><br><span class="line">s1 = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">&quot;hello&quot;</span></span><br><span class="line">s2 =  <span class="string">&quot;world&quot;</span></span><br><span class="line">str.concat(s2)<span class="comment">//&quot;helloworld&quot;</span></span><br><span class="line"><span class="comment">//提取子串，两个参数，子串开始和结束位置，左闭右开</span></span><br><span class="line">str.slice(<span class="number">2</span>)<span class="comment">//  &quot;llo&quot;</span></span><br><span class="line">str.substring(<span class="number">2</span>)<span class="comment">//llo</span></span><br><span class="line">str.substr<span class="comment">//第二个参数是长度</span></span><br><span class="line">str.slice(-<span class="number">1</span>)<span class="comment">//o</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="number">Number</h1><p>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">toString(a) <span class="comment">//返回以a为基数的字符串</span></span><br><span class="line"><span class="string">&quot;10&quot;</span>.toString(<span class="number">2</span>)<span class="comment">//&quot;1010&quot;</span></span><br><span class="line"></span><br><span class="line">toFixed(a)<span class="comment">//返回包含a位小数的字符串</span></span><br><span class="line"><span class="number">10.</span>toFixed(<span class="number">2</span>)<span class="comment">//&quot;10.00&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="math">Math</h1><p>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.max()</span><br><span class="line"><span class="built_in">Math</span>.min()</span><br><span class="line"><span class="built_in">Math</span>.ceil()<span class="comment">//向上舍入</span></span><br><span class="line"><span class="built_in">Math</span>.floor() <span class="comment">//向下舍入</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">10</span>+<span class="number">2</span>)<span class="comment">//2-10随机数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++ set/map 方法集</title>
      <link href="/2022/03/14/c-set-map-%E6%96%B9%E6%B3%95%E9%9B%86/"/>
      <url>/2022/03/14/c-set-map-%E6%96%B9%E6%B3%95%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>增加，删除，查找，遍历，大小</p><span id="more"></span><h1 id="set">Set</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="comment">//增加</span></span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">s.<span class="built_in">erase</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="keyword">bool</span> is_in = s.<span class="built_in">find</span>(<span class="number">1</span>) != s.<span class="built_in">end</span>();</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i : s)&#123;</span><br><span class="line">    cout&lt;&lt;i;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//大小</span></span><br><span class="line">s.<span class="built_in">size</span>();</span><br></pre></td></tr></table></figure><h1 id="map">Map</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;m;</span><br><span class="line"><span class="comment">//增加</span></span><br><span class="line">map[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">map.<span class="built_in">insert</span>(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">m.<span class="built_in">erase</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="keyword">bool</span> is_in = s.<span class="built_in">find</span>(<span class="number">1</span>) != s.<span class="built_in">end</span>();</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">auto</span> i : m)&#123;</span><br><span class="line">        cout &lt;&lt; i.first &lt;&lt; i.second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux Command Line笔记</title>
      <link href="/2022/03/07/Linux-Command-Line%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/03/07/Linux-Command-Line%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="花括号展开">花括号展开</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[me@linuxbox ~]$ mkdir Pics</span><br><span class="line">[me@linuxbox ~]$ <span class="built_in">cd</span> Pics</span><br><span class="line">[me@linuxbox Pics]$ mkdir &#123;2007..2009&#125;-0&#123;1..9&#125; &#123;2007..2009&#125;-&#123;10..12&#125;</span><br><span class="line">[me@linuxbox Pics]$ ls</span><br><span class="line">2007-01 2007-07 2008-01 2008-07 2009-01 2009-07</span><br><span class="line">2007-02 2007-08 2008-02 2008-08 2009-02 2009-08</span><br><span class="line">2007-03 2007-09 2008-03 2008-09 2009-03 2009-09</span><br><span class="line">2007-04 2007-10 2008-04 2008-10 2009-04 2009-10</span><br><span class="line">2007-05 2007-11 2008-05 2008-11 2009-05 2009-11</span><br><span class="line">2007-06 2007-12 2008-06 2008-12 2009-06 2009-12</span><br></pre></td></tr></table></figure><h1 id="光标移动命令">光标移动命令</h1><table><thead><tr class="header"><th style="text-align: left;">按键</th><th style="text-align: left;">行动</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">Ctrl-a</td><td style="text-align: left;">移动光标到行首。</td></tr><tr class="even"><td style="text-align: left;">Ctrl-e</td><td style="text-align: left;">移动光标到行尾。</td></tr><tr class="odd"><td style="text-align: left;">Ctrl-f</td><td style="text-align: left;">光标前移一个字符；和右箭头作用一样。</td></tr><tr class="even"><td style="text-align: left;">Ctrl-b</td><td style="text-align: left;">光标后移一个字符；和左箭头作用一样。</td></tr><tr class="odd"><td style="text-align: left;">Alt-f</td><td style="text-align: left;">光标前移一个字。</td></tr><tr class="even"><td style="text-align: left;">Alt-b</td><td style="text-align: left;">光标后移一个字。</td></tr><tr class="odd"><td style="text-align: left;">Ctrl-l</td><td style="text-align: left;">清空屏幕，移动光标到左上角。clear 命令完成同样的工作。</td></tr></tbody></table><h1 id="剪切和粘贴命令">剪切和粘贴命令</h1><table><thead><tr class="header"><th style="text-align: left;">按键</th><th style="text-align: left;">行动</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">Ctrl-k</td><td style="text-align: left;">剪切从光标位置到行尾的文本。</td></tr><tr class="even"><td style="text-align: left;">Ctrl-u</td><td style="text-align: left;">剪切从光标位置到行首的文本。</td></tr><tr class="odd"><td style="text-align: left;">Alt-d</td><td style="text-align: left;">剪切从光标位置到词尾的文本。</td></tr><tr class="even"><td style="text-align: left;">Alt-Backspace</td><td style="text-align: left;">剪切从光标位置到词头的文本。如果光标在一个单词的开头，剪切前一个单词。</td></tr><tr class="odd"><td style="text-align: left;">Ctrl-y</td><td style="text-align: left;">把剪切环中的文本粘贴到光标位置。</td></tr></tbody></table><h1 id="ps">ps</h1><p>加x可以显示所有进程，不管由什么终端控制</p><p>加aux宣誓属于每个用户的进程信息</p><h1 id="top">top</h1><p>连续显示系统进程更新的信息，最上边是系统概要，下边是进程列表</p><p>表11-3: top 命令信息字段</p><table><colgroup><col style="width: 11%" /><col style="width: 53%" /><col style="width: 34%" /></colgroup><thead><tr class="header"><th style="text-align: left;">行号</th><th style="text-align: left;">字段</th><th style="text-align: left;">意义</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">1</td><td style="text-align: left;">top</td><td style="text-align: left;">程序名。</td></tr><tr class="even"><td style="text-align: left;">14:59:20</td><td style="text-align: left;">当前时间。</td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;">up 6:30</td><td style="text-align: left;">这是正常运行时间。它是计算机从上次启动到现在所运行的时间。 在这个例子里，系统已经运行了六个半小时。</td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;">2 users</td><td style="text-align: left;">有两个用户登录系统。</td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;">load average:</td><td style="text-align: left;">加载平均值是指，等待运行的进程数目，也就是说，处于运行状态的进程个数， 这些进程共享 CPU。展示了三个数值，每个数值对应不同的时间周期。第一个是最后60秒的平均值， 下一个是前5分钟的平均值，最后一个是前15分钟的平均值。若平均值低于1.0，则指示计算机 工作不忙碌。</td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;">2</td><td style="text-align: left;">Tasks:</td><td style="text-align: left;">总结了进程数目和各种进程状态。</td></tr><tr class="odd"><td style="text-align: left;">3</td><td style="text-align: left;">Cpu(s):</td><td style="text-align: left;">这一行描述了 CPU 正在执行的进程的特性。</td></tr><tr class="even"><td style="text-align: left;">0.7%us</td><td style="text-align: left;">0.7% of the CPU is being used for user processes. 这意味着进程在内核之外。</td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;">1.0%sy</td><td style="text-align: left;">1.0%的 CPU 时间被用于系统（内核）进程。</td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;">0.0%ni</td><td style="text-align: left;">0.0%的 CPU 时间被用于"nice"（低优先级）进程。</td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;">98.3%id</td><td style="text-align: left;">98.3%的 CPU 时间是空闲的。</td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;">0.0%wa</td><td style="text-align: left;">0.0%的 CPU 时间来等待 I/O。</td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;">4</td><td style="text-align: left;">Mem:</td><td style="text-align: left;">展示物理内存的使用情况。</td></tr><tr class="even"><td style="text-align: left;">5</td><td style="text-align: left;">Swap:</td><td style="text-align: left;">展示交换分区（虚拟内存）的使用情况。</td></tr></tbody></table><h1 id="把进程放到后台执行">把进程放到后台执行</h1><p>在命令后加&amp;</p><p>使用jobs可以看后台命令和编号</p><p>使用fg %1可以把1号进程放到前台</p><h1 id="shell环境">shell环境</h1><p>printenv输出环境变量</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>733-图像渲染</title>
      <link href="/2022/03/01/733-%E5%9B%BE%E5%83%8F%E6%B8%B2%E6%9F%93/"/>
      <url>/2022/03/01/733-%E5%9B%BE%E5%83%8F%E6%B8%B2%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<p>有一幅以二维整数数组表示的图画，每一个整数表示该图画的像素值大小，数值在 0 到 65535 之间。</p><p>给你一个坐标 (sr, sc) 表示图像渲染开始的像素值（行 ，列）和一个新的颜色值 newColor，让你重新上色这幅图像。</p><p>为了完成上色工作，从初始坐标开始，记录初始坐标的上下左右四个方向上像素值与初始坐标相同的相连像素点，接着再记录这四个方向上符合条件的像素点与他们对应四个方向上像素值与初始坐标相同的相连像素点，……，重复该过程。将所有有记录的像素点的颜色值改为新的颜色值。</p><p>最后返回经过上色渲染后的图像。</p><p>示例 1:</p><blockquote><p>输入: image = [[1,1,1],[1,1,0],[1,0,1]] sr = 1, sc = 1, newColor = 2 输出: [[2,2,2],[2,2,0],[2,0,1]] 解析: 在图像的正中间，(坐标(sr,sc)=(1,1)), 在路径上所有符合条件的像素点的颜色都被更改成2。 注意，右下角的像素没有更改为2， 因为它不是在上下左右四个方向上与初始点相连的像素点。</p></blockquote><span id="more"></span><p>解法一：BFS</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;xs = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;ys = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">floodFill</span>(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; image, <span class="keyword">int</span> sr, <span class="keyword">int</span> sc, <span class="keyword">int</span> newColor) &#123;</span><br><span class="line">        <span class="keyword">int</span> num = image[sr][sc],width = image.<span class="built_in">size</span>(),height = image[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(image[sr][sc] == newColor)&#123;</span><br><span class="line">            <span class="keyword">return</span> image;</span><br><span class="line">        &#125;</span><br><span class="line">        queue&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; que;</span><br><span class="line">        que.<span class="built_in">emplace</span>(sr,sc);</span><br><span class="line">        image[sr][sc]=newColor;</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">int</span> x = que.<span class="built_in">front</span>().first;</span><br><span class="line">            <span class="keyword">int</span> y = que.<span class="built_in">front</span>().second;</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> mx = x+xs[i];</span><br><span class="line">                <span class="keyword">int</span> my = y-ys[i];</span><br><span class="line">                <span class="keyword">if</span>(mx&gt;=<span class="number">0</span> &amp;&amp; mx&lt;width &amp;&amp; my&gt;=<span class="number">0</span> &amp;&amp; my&lt;height &amp;&amp; image[mx][my]==num)&#123;</span><br><span class="line">                    que.<span class="built_in">emplace</span>(mx,my);</span><br><span class="line">                    image[mx][my] = newColor;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用队列表示已染色的元素。先入队并染色第一个元素，然后只要队列不空就循环：出队一个，判断上下左右四个元素是否合法，合法的话就入队并染色。</p><p>知识点：</p><ol type="1"><li>queue<ol type="1"><li>添加元素到队尾是emplace()或者push，区别是emplace是新建一个对象并添加，push是添加一个已有对象。</li><li>删除队头元素：pop()，注意它没返回值</li><li>获取队头元素：front()</li></ol></li><li>pair<ol type="1"><li>pair表示一对元素，定义：<code>pair(type1,type2) name</code></li><li>获取或更改内容使用<code>pair.first    pair.second</code></li></ol></li></ol><p>解法二：DFS</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;xs = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;xy = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; image,<span class="keyword">int</span> sr,<span class="keyword">int</span> sc,<span class="keyword">int</span> collor,<span class="keyword">int</span> newColor)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(image[sr][sc] == collor)&#123;</span><br><span class="line">            image[sr][sc] = newColor;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> x = sr + xs[i];</span><br><span class="line">                <span class="keyword">int</span> y = sc + xy[i];</span><br><span class="line">                <span class="keyword">if</span>(x &gt;= <span class="number">0</span>&amp;&amp; x &lt; image.<span class="built_in">size</span>() &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; image[<span class="number">0</span>].<span class="built_in">size</span>())&#123;</span><br><span class="line">                    <span class="built_in">dfs</span>(image,x,y,collor,newColor);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">floodFill</span>(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; image, <span class="keyword">int</span> sr, <span class="keyword">int</span> sc, <span class="keyword">int</span> newColor) &#123;</span><br><span class="line">        <span class="keyword">if</span>(image[sr][sc] != newColor)&#123;</span><br><span class="line">            <span class="built_in">dfs</span>(image,sr,sc,image[sr][sc],newColor);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>写起来较容易，深度优先需要先定义一个dfs递归函数。如果当前可以染色就染色，并且对上下左右中合法的元素使用dfs，主函数直接调用即可。</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> medium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++ Vector方法集</title>
      <link href="/2022/02/24/c-Vector%E6%96%B9%E6%B3%95%E9%9B%86/"/>
      <url>/2022/02/24/c-Vector%E6%96%B9%E6%B3%95%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<figure><img data-src="https://img.zhaoxuanlang.cn/image-20220224215604333.png" alt="image-20220224215604333" /><figcaption aria-hidden="true">image-20220224215604333</figcaption></figure><span id="more"></span><h1 id="迭代器">迭代器</h1><ol type="1"><li><a href="https://www.geeksforgeeks.org/vectorbegin-vectorend-c-stl/">begin()</a> – 返回一个指向向量中第一个元素的迭代器</li><li><a href="https://www.geeksforgeeks.org/vectorbegin-vectorend-c-stl/">end()</a> – 返回一个迭代器，指向向量中最后一个元素之后的理论元素</li><li><a href="https://www.geeksforgeeks.org/vector-rbegin-and-rend-function-in-c-stl/">rbegin()</a> – 返回一个反向迭代器，指向向量中的最后一个元素（反向开始）。它从最后一个元素移动到第一个元素</li><li><a href="https://www.geeksforgeeks.org/vector-rbegin-and-rend-function-in-c-stl/">rend()</a> – 返回一个反向迭代器，指向向量中第一个元素之前的理论元素（视为反向结束）</li><li><a href="https://www.geeksforgeeks.org/vector-cbegin-vector-cend-c-stl/">cbegin()</a> – 返回指向向量中第一个元素的常量迭代器。</li><li><a href="https://www.geeksforgeeks.org/vector-cbegin-vector-cend-c-stl/">cend()</a> – 返回一个常量迭代器，指向向量中最后一个元素之后的理论元素。</li><li><a href="https://www.geeksforgeeks.org/vectorcrend-vectorcrbegin-examples/">crbegin()</a> – 返回一个常量反向迭代器，指向向量中的最后一个元素（反向开始）。它从最后一个元素移动到第一个元素</li><li><a href="https://www.geeksforgeeks.org/vectorcrend-vectorcrbegin-examples/">crend()</a> – 返回一个常量反向迭代器，指向向量中第一个元素之前的理论元素（被视为反向端）</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++ program to illustrate the</span></span><br><span class="line"><span class="comment">// iterators in vector</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; g1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line">g1.<span class="built_in">push_back</span>(i);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Output of begin and end: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i = g1.<span class="built_in">begin</span>(); i != g1.<span class="built_in">end</span>(); ++i)</span><br><span class="line">cout &lt;&lt; *i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\nOutput of cbegin and cend: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i = g1.<span class="built_in">cbegin</span>(); i != g1.<span class="built_in">cend</span>(); ++i)</span><br><span class="line">cout &lt;&lt; *i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\nOutput of rbegin and rend: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> ir = g1.<span class="built_in">rbegin</span>(); ir != g1.<span class="built_in">rend</span>(); ++ir)</span><br><span class="line">cout &lt;&lt; *ir &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\nOutput of crbegin and crend : &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> ir = g1.<span class="built_in">crbegin</span>(); ir != g1.<span class="built_in">crend</span>(); ++ir)</span><br><span class="line">cout &lt;&lt; *ir &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">begin 和 end 的输出：1 2 3 4 5 </span><br><span class="line">cbegin 和 cend 的输出：1 2 3 4 5 </span><br><span class="line">rbegin 和 rend 的输出：5 4 3 2 1 </span><br><span class="line">crbegin 和 crend 的输出：5 4 3 2 1</span><br></pre></td></tr></table></figure><h1 id="容量">容量</h1><p><strong>容量</strong></p><ol type="1"><li><a href="https://www.geeksforgeeks.org/vectorempty-vectorsize-c-stl/">size()</a> – 返回向量中元素的数量。</li><li><a href="https://www.geeksforgeeks.org/vector-max_size-function-in-c-stl/">max_size()</a> – 返回向量可以容纳的最大元素数。</li><li><a href="https://www.geeksforgeeks.org/vector-capacity-function-in-c-stl/">capacity()</a> – 返回当前分配给向量的存储空间大小，以元素数表示。</li><li><a href="https://www.geeksforgeeks.org/vector-resize-c-stl/">resize(n)</a> – 调整容器大小，使其包含“n”个元素。</li><li><a href="https://www.geeksforgeeks.org/vectorempty-vectorsize-c-stl/">empty()</a> – 返回容器是否为空。</li><li><a href="https://www.geeksforgeeks.org/vector-shrink_to_fit-function-in-c-stl/">shrink_to_fit()</a> – 减小容器的容量以适应其大小并销毁超出容量的所有元素。</li><li><a href="https://www.geeksforgeeks.org/using-stdvectorreserve-whenever-possible/">Reserve()</a> – 请求向量容量至少足以包含 n 个元素。</li></ol><h1 id="元素访问">元素访问</h1><ol type="1"><li>[引用运算符 <a href="https://www.geeksforgeeks.org/vectoroperator-vectoroperator-c-stl/">g]</a> – 返回对向量中位置“g”处元素的引用</li><li><a href="https://www.geeksforgeeks.org/vectorat-vectorswap-c-stl/">at(g)</a> – 返回对向量中位置“g”处元素的引用</li><li><a href="https://www.geeksforgeeks.org/vectorfront-vectorback-c-stl/">front()</a> – 返回对向量中第一个元素的引用</li><li><a href="https://www.geeksforgeeks.org/vectorfront-vectorback-c-stl/">back()</a> – 返回对向量中最后一个元素的引用</li><li><a href="https://www.geeksforgeeks.org/vector-data-function-in-c-stl/">data()</a> – 返回指向向量内部用于存储其拥有的元素的内存数组的直接指针。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++ program to illustrate the</span></span><br><span class="line"><span class="comment">// element accesser in vector</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; g1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">g1.<span class="built_in">push_back</span>(i * <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\nReference operator [g] : g1[2] = &quot;</span> &lt;&lt; g1[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\nat : g1.at(4) = &quot;</span> &lt;&lt; g1.<span class="built_in">at</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\nfront() : g1.front() = &quot;</span> &lt;&lt; g1.<span class="built_in">front</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\nback() : g1.back() = &quot;</span> &lt;&lt; g1.<span class="built_in">back</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// pointer to the first element</span></span><br><span class="line"><span class="keyword">int</span>* pos = g1.<span class="built_in">data</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\nThe first element is &quot;</span> &lt;&lt; *pos;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Reference operator [g] : g1[2] = 30</span><br><span class="line">at : g1.at(4) = 50</span><br><span class="line">front() : g1.front() = 10</span><br><span class="line">back() : g1.back() = 100</span><br><span class="line">The first element is 10</span><br></pre></td></tr></table></figure><h1 id="修饰符">修饰符</h1><ol type="1"><li><a href="https://www.geeksforgeeks.org/vector-assign-in-c-stl/">assign()</a> - 它通过替换旧元素为向量元素分配新值</li><li><a href="https://www.geeksforgeeks.org/vectorpush_back-vectorpop_back-c-stl/">push_back()</a> – 将元素从后面推入向量</li><li><a href="https://www.geeksforgeeks.org/vectorpush_back-vectorpop_back-c-stl/">pop_back()</a> - 它用于从后面的向量中弹出或删除元素。</li><li><a href="https://www.geeksforgeeks.org/vector-insert-function-in-c-stl/">insert()</a> - 在指定位置的元素之前插入新元素</li><li><a href="https://www.geeksforgeeks.org/vectorclear-vectorerase-c-stl/">erase()</a> - 用于从容器中删除指定位置或范围的元素。</li><li><a href="https://www.geeksforgeeks.org/vectorat-vectorswap-c-stl/">swap()</a> - 用于将一个向量的内容与另一个相同类型的向量交换。尺寸可能不同。</li><li><a href="https://www.geeksforgeeks.org/vectorclear-vectorerase-c-stl/">clear()</a> - 用于删除向量容器的所有元素</li><li><a href="https://www.geeksforgeeks.org/vector-emplace-function-in-c-stl/">emplace()</a> - 它通过在位置插入新元素来扩展容器</li><li>emplace_back() - 用于将新元素插入向量容器中，新元素添加到向量的末尾</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++ program to illustrate the</span></span><br><span class="line"><span class="comment">// Modifiers in vector</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// Assign vector</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fill the array with 10 five times</span></span><br><span class="line">v.<span class="built_in">assign</span>(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;The vector elements are: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); i++)</span><br><span class="line">cout &lt;&lt; v[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// inserts 15 to the last position</span></span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">15</span>);</span><br><span class="line"><span class="keyword">int</span> n = v.<span class="built_in">size</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\nThe last element is: &quot;</span> &lt;&lt; v[n - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// removes last element</span></span><br><span class="line">v.<span class="built_in">pop_back</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// prints the vector</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\nThe vector elements are: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); i++)</span><br><span class="line">cout &lt;&lt; v[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// inserts 5 at the beginning</span></span><br><span class="line">v.<span class="built_in">insert</span>(v.<span class="built_in">begin</span>(), <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\nThe first element is: &quot;</span> &lt;&lt; v[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// removes the first element</span></span><br><span class="line">v.<span class="built_in">erase</span>(v.<span class="built_in">begin</span>());</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\nThe first element is: &quot;</span> &lt;&lt; v[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// inserts at the beginning</span></span><br><span class="line">v.<span class="built_in">emplace</span>(v.<span class="built_in">begin</span>(), <span class="number">5</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\nThe first element is: &quot;</span> &lt;&lt; v[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Inserts 20 at the end</span></span><br><span class="line">v.<span class="built_in">emplace_back</span>(<span class="number">20</span>);</span><br><span class="line">n = v.<span class="built_in">size</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\nThe last element is: &quot;</span> &lt;&lt; v[n - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// erases the vector</span></span><br><span class="line">v.<span class="built_in">clear</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\nVector size after erase(): &quot;</span> &lt;&lt; v.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// two vector to perform swap</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v1, v2;</span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">v2.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">v2.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n\nVector 1: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v1.<span class="built_in">size</span>(); i++)</span><br><span class="line">cout &lt;&lt; v1[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\nVector 2: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v2.<span class="built_in">size</span>(); i++)</span><br><span class="line">cout &lt;&lt; v2[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Swaps v1 and v2</span></span><br><span class="line">v1.<span class="built_in">swap</span>(v2);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\nAfter Swap \nVector 1: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v1.<span class="built_in">size</span>(); i++)</span><br><span class="line">cout &lt;&lt; v1[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\nVector 2: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v2.<span class="built_in">size</span>(); i++)</span><br><span class="line">cout &lt;&lt; v2[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">The vector elements are: 10 10 10 10 10 </span><br><span class="line">The last element is: 15</span><br><span class="line">The vector elements are: 10 10 10 10 10 </span><br><span class="line">The first element is: 5</span><br><span class="line">The first element is: 10</span><br><span class="line">The first element is: 5</span><br><span class="line">The last element is: 20</span><br><span class="line">Vector size after erase(): 0</span><br><span class="line"></span><br><span class="line">Vector 1: 1 2 </span><br><span class="line">Vector 2: 3 4 </span><br><span class="line">After Swap </span><br><span class="line">Vector 1: 3 4 </span><br><span class="line">Vector 2: 1 2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>189. 轮转数组</title>
      <link href="/2022/02/22/189-%E8%BD%AE%E8%BD%AC%E6%95%B0%E7%BB%84/"/>
      <url>/2022/02/22/189-%E8%BD%AE%E8%BD%AC%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>给你一个数组，将数组中的元素向右轮转 k 个位置，其中 k 是非负数。</p><p>示例 1:</p><p>输入: nums = [1,2,3,4,5,6,7], k = 3 输出: [5,6,7,1,2,3,4] 解释: 向右轮转 1 步: [7,1,2,3,4,5,6] 向右轮转 2 步: [6,7,1,2,3,4,5] 向右轮转 3 步: [5,6,7,1,2,3,4]</p><span id="more"></span><p>解：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>()&lt;<span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">        k%=nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">begin</span>()+k);</span><br><span class="line">        <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>()+k,nums.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img data-src="https://img.zhaoxuanlang.cn/image-20220222185337166.png" alt="image-20220222185337166" />可以用辅助数组实现，原地处理的话就先整体旋转，前半部分旋转，后半部分旋转。</p><p>注意k很大的情况下先与数组长度取余可以得到确切移动的位数。</p><p>std::reverse函数：</p><p>在algorithm头文件中预定义。</p><p><strong>Syntax:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void reverse(BidirectionalIterator first, BidirectionalIterator last)</span><br><span class="line">BidirectionalIterator is an iterator that can be used to access any</span><br><span class="line">elements of a container in both forward and backward direction.</span><br></pre></td></tr></table></figure><p><strong>Examples:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input : 10 11 12 13 14 15 16 17</span><br><span class="line">Output :10 11 12 13 14 17 16 15</span><br><span class="line">Explanation:</span><br><span class="line">reverse(v.begin() + 5, v.begin() + 8);</span><br><span class="line">In the above function, input we have applied reverse() on the vector</span><br><span class="line">from index 5 to index 7.</span><br><span class="line">Therefore when we display the vector we get reverse order</span><br><span class="line">from index 5 to index 7.</span><br></pre></td></tr></table></figure><p>注意第二个参数要往后一位，也可以用v.end()</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> medium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一部分</title>
      <link href="/2022/01/26/%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86/"/>
      <url>/2022/01/26/%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<figure><img data-src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20220126083059360.png" alt="image-20220126083059360" /><figcaption aria-hidden="true">image-20220126083059360</figcaption></figure><span id="more"></span><h1 id="类型选择">类型选择</h1><ol type="1"><li>数值不为负使用无符号类型</li><li>数值超过int表示范围用long long</li><li>浮点运算用double</li></ol><figure><img data-src="https://img.zhaoxuanlang.cn/image-20220126083553646.png" alt="image-20220126083553646" /><figcaption aria-hidden="true">image-20220126083553646</figcaption></figure><h1 id="列表初始化">列表初始化</h1><p>如</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> units&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">units</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> units = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> units = &#123;<span class="number">0</span>&#125;;</span><br></pre></td></tr></table></figure><h1 id="声明与定义">声明与定义</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明：</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> i</span><br><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="keyword">int</span> j</span><br></pre></td></tr></table></figure><p>多个文件用同一个变量时可以有多个声明但是只能有一个定义</p><p>声明后赋值将变成定义</p><h1 id="引用">引用</h1><p>在定义引用时程序把引用和初始值绑定，所以必须初始化</p><p>“引用即别名”，为引用赋值实际上是把值赋给了与引用绑定的对象。获取引用的值实际上是获取与引用绑定对象的值。</p><p>引用类型初始值必须是对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> &amp;ref = <span class="number">4</span><span class="comment">//错误</span></span><br></pre></td></tr></table></figure><h1 id="指针">指针</h1><h2 id="指针定义">指针定义</h2><p>指针存放某个对象的地址，要想获取地址需要使用取地址符&amp;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> dval; <span class="comment">//dval是double类型变量</span></span><br><span class="line"><span class="keyword">double</span> *pd = &amp;dval;<span class="comment">//pd是指向dval的double型指针</span></span><br><span class="line"><span class="keyword">double</span> *pd2 = pd;<span class="comment">//pd2是指向pd的double型指针</span></span><br><span class="line"><span class="keyword">int</span> *pi = pd;<span class="comment">//错误，pi类型与pd不匹配</span></span><br><span class="line">pi = &amp;dval<span class="comment">//错误，试图把double类型对象地址赋给int型指针</span></span><br></pre></td></tr></table></figure><p>指针的值应该是4种状态之一：</p><ol type="1"><li>指向一个对象</li><li>指向紧邻对象所占空间的下一个位置</li><li>空指针，没有指向任何对象</li><li>无效指针，上述情况以外</li></ol><h2 id="利用指针访问对象">利用指针访问对象</h2><p>指针指向一个对象时可以用解引用符*来访问该对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ival = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">int</span> *p = &amp;ival;<span class="comment">//p里存着ival的地址</span></span><br><span class="line">cout &lt;&lt; *p;<span class="comment">//用*解引用得到p指针所指对象</span></span><br></pre></td></tr></table></figure><h2 id="复合类型写法">复合类型写法</h2><p>有两种写法：</p><p>1.<code>int* p;</code></p><p>着重强调本次定义了一种复合类型</p><p>2.<code>int *p;</code></p><p>着重强调变量具有的复合类型</p><p>复杂声明语句从右向左阅读，离变量名最近的符号对变量类型有最直接影响</p><h1 id="const">Const</h1><p>默认只能在一个文件内使用，要想共享需要在声明的时候在前边加extern</p><p>const指针：<code>int *const curErr = &amp;errNumb;</code></p><h1 id="头文件保护符">头文件保护符</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> aaa <span class="comment">//如果aaa已定义为真</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> aaa <span class="comment">///如果aaa未定义为真</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h1 id="string">String</h1><p>需引入string头文件</p><h2 id="定义">定义</h2><p>可以使用<code>string s(10,'c')</code>，s是cccccccccc</p><p>可以使用<code>string('qwe')</code></p><h2 id="方法">方法</h2><p>s.size(),s1+s2,s.empty()</p><p>cin&gt;&gt;s，遇到空格停</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> s:str)</span><br><span class="line">  cout&lt;&lt;s;</span><br></pre></td></tr></table></figure><h1 id="vector">Vector</h1><p>需要#include <vector></p><h2 id="定义-1">定义</h2><p>可以用小括号或大括号，大括号是列表初始化，小括号可以定义重复元素或者指定大小</p><p>用大括号时会尽可能把值当成初始值来处理，不行的时候尝试圆括号初始化方式。</p><p>一般来讲，初始化适用于以下三种：</p><ol type="1"><li>初始值已知且较少</li><li>初始值是另一个vector副本</li><li>重复初始值</li></ol><h2 id="方法-1">方法</h2><p>添加元素：v.push_back()</p><p>v.empty()</p><p>v.size()</p><h1 id="迭代器">迭代器</h1><p>有迭代器的类型都有begin和end方法,C++11新引入了cbegin和cend方法返回const类型</p><p>*iter返回所指元素的引用</p><p>运算时加减整数仍然是一个迭代器，进行了一些移动。两个迭代器相减得到他们的距离</p><h1 id="数组">数组</h1><h2 id="定义-2">定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>];<span class="comment">//10个大小的数组</span></span><br><span class="line"><span class="keyword">int</span> *parr[<span class="number">10</span>];<span class="comment">//10个int指针的数组</span></span><br><span class="line"><span class="keyword">char</span> a[] = &#123;<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;e&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> a[] = <span class="string">&quot;qwe&quot;</span>;</span><br><span class="line"><span class="comment">//不可以使用：</span></span><br><span class="line"><span class="keyword">char</span> b[] = a;</span><br></pre></td></tr></table></figure><h2 id="数组与指针">数组与指针</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string nums[] = &#123;<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;e&#x27;</span>&#125;;</span><br><span class="line">string *p = nums; <span class="comment">//== p = &amp;nums[0]</span></span><br><span class="line"><span class="comment">//nums其实是指向头元素的指针</span></span><br></pre></td></tr></table></figure><p>标准库函数begin(s),end(s)返回指向的指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *beg = <span class="built_in">begin</span>(ia);</span><br></pre></td></tr></table></figure><p>获得大小可以使用sizeof()</p><h2 id="多维数组">多维数组</h2><h3 id="初始化">初始化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ia[<span class="number">3</span>][<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">//全0</span></span><br><span class="line"><span class="keyword">int</span> ia[<span class="number">3</span>][<span class="number">4</span>] = &#123;</span><br><span class="line">  &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">  &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">  &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> ia[<span class="number">3</span>][<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;<span class="comment">//与上边的相等</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="跳转语句">跳转语句</h2><h3 id="break">break</h3><p>终止离他最近的while,do while,for和switch语句。</p><h3 id="continue">continue</h3><p>终止最近的循环中的当前迭代并立刻开始下一次迭代，只能出现在for和while内部</p><h1 id="函数">函数</h1><h2 id="函数内静态对象">函数内静态对象</h2><p>函数内定义的static对象只初始化一次，可以用来计数函数进行次数</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ Primer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开始</title>
      <link href="/2022/01/25/%E5%BC%80%E5%A7%8B/"/>
      <url>/2022/01/25/%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<figure><img data-src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20220125145908636.png" alt="image-20220125145908636" /><figcaption aria-hidden="true">image-20220125145908636</figcaption></figure><span id="more"></span><h1 id="编译器">编译器</h1><p>编译器有gcc,clang,llvm等。但是在macOS上安装Xcode command line后会自动安装clang，并且将gcc定向到clang，可以用-v验证：</p><figure><img data-src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20220125151113141.png" alt="image-20220125151113141" /><figcaption aria-hidden="true">image-20220125151113141</figcaption></figure><p>因此不要被误导，认为gcc和clang是一个东西。要在mac使用gcc也很简单。首先使用<code>brew install gcc</code>安装gcc，然后根据安装的版本来使用：</p><figure><img data-src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20220125151232833.png" alt="image-20220125151232833" /><figcaption aria-hidden="true">image-20220125151232833</figcaption></figure><p>我这里安装的是gcc--11.2，因此就可以用gcc-11调用GNU的gcc编译器</p><figure><img data-src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20220125151315675.png" alt="image-20220125151315675" /><figcaption aria-hidden="true">image-20220125151315675</figcaption></figure><h2 id="clang用法">clang用法：</h2><p>所有用法可以去[<a href="https://clang.llvm.org/docs/UsersManual.html">clang官网</a>]查看，这里列出几个常用的：</p><ul><li><p><code>-o &lt;file&gt;</code></p><p>输出到某个文件中</p></li><li><p><code>-c</code></p><p>只运行预处理，编译和汇编</p></li></ul><h2 id="读取数量不定的输入">读取数量不定的输入</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>,value = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//可以最后输入0.0来终止，while读取的是输入流的状态</span></span><br><span class="line"><span class="keyword">while</span> (std::cin&gt;&gt;value)&#123;</span><br><span class="line">  sum+=value;</span><br><span class="line">&#125;</span><br><span class="line">std::cout&lt;&lt;sum;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ Primer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强制git使用ssh</title>
      <link href="/2022/01/22/%E5%BC%BA%E5%88%B6git%E4%BD%BF%E7%94%A8ssh/"/>
      <url>/2022/01/22/%E5%BC%BA%E5%88%B6git%E4%BD%BF%E7%94%A8ssh/</url>
      
        <content type="html"><![CDATA[<p>国内使用github时由于网络问题，push和pull时经常会卡，因此建议使用ssh代替http.</p><span id="more"></span><p>虽然在github页面可以直接选择使用ssh链接，但是有一些软件会使用git服务，这时就不是很好切换，我的例子是在使用cocoapods的时候没法pod install。所以尝试在gitconfig里强制使用ssh。</p><p>只需要在~/.gitconfig里加以下内容即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[url &quot;git@github.com:&quot;]</span><br><span class="line">  insteadOf = https://github.com/</span><br><span class="line">[url &quot;git@github.com:&quot;]</span><br><span class="line">  pushInsteadOf = &quot;git://github.com/&quot;</span><br><span class="line">[url &quot;git@github.com:&quot;]</span><br><span class="line">  pushInsteadOf = &quot;https://github.com/&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>104.二叉树的最大深度</title>
      <link href="/2022/01/15/104-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/"/>
      <url>/2022/01/15/104-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><p><strong>说明:</strong> 叶子节点是指没有子节点的节点。</p><span id="more"></span><p>示例： 给定二叉树 [3,9,20,null,null,15,7]，</p><pre><code>        3   / \  9  20    /  \   15   7</code></pre><p>返回它的最大深度 3 。</p><p>解法一：递归</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">1</span>+<span class="built_in">Math</span>.max(maxDepth(root.left),maxDepth(root.right))</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure><img data-src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20220115123206116.png" alt="image-20220115123206116" /><figcaption aria-hidden="true">image-20220115123206116</figcaption></figure><p>解法二：BFS</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxDepth = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> queue = [];</span><br><span class="line">  queue.push(root);</span><br><span class="line">  <span class="keyword">let</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (queue.length) &#123;</span><br><span class="line">    <span class="keyword">let</span> size = queue.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">      <span class="comment">// 队头出队列</span></span><br><span class="line">      <span class="keyword">let</span> node = queue.shift();</span><br><span class="line">      <span class="keyword">if</span> (node.left) queue.push(node.left);</span><br><span class="line">      <span class="keyword">if</span> (node.right) queue.push(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">    ans += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure><img data-src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20220115192905403.png" alt="image-20220115192905403" /><figcaption aria-hidden="true">image-20220115192905403</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> easy </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo上github-pages后的一些优化</title>
      <link href="/2022/01/15/hexo%E4%B8%8Agithub-pages%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BC%98%E5%8C%96/"/>
      <url>/2022/01/15/hexo%E4%B8%8Agithub-pages%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>本文介绍使用github pages负载hexo的优化，包括push不受网络问题影响，网站https设置，使用CDN加速浏览</p><span id="more"></span><h1 id="使用ssh加速push操作">使用ssh加速push操作</h1><p>由于国内网络问题，使用http向github push的时候经常遇到卡顿或者无法连接的情况，建议使用ssh</p><p>首先需要用<code>ssh-keygen</code>来生成一个ssh密钥。然后把id_rsa.pub里的内容复制到github里</p><p>在_config.yml中将github链接改为ssh对应的链接，删除.git_deploy文件，使用hexo clean，然后再hexo g &amp;&amp; hexo d</p><h1 id="使用https给网页加密">使用https给网页加密</h1><p>在腾讯云可以免费申请ssl证书。申请后可以搭配下边cdn一起使用。在github pages位置开启强制HTTPS即可</p><h1 id="使用cdn加速网站访问">使用CDN加速网站访问</h1><p>在腾讯云-内容分发网络-域名管理新建针对网站域名的CDN服务</p><p>在原站配置选自有源，https<img data-src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20220115111541902.png" alt="image-20220115111541902" /></p><p>地址就填github官方给的地址</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;185.199.108.153</span><br><span class="line">&gt;185.199.109.153</span><br><span class="line">&gt;185.199.110.153</span><br><span class="line">&gt;185.199.111.153</span><br></pre></td></tr></table></figure></blockquote><p>开启后在缓存位置可以改短一些，我设置的是1天缓存。缓存时间太长会导致网页更新后访问不到最新的页面。你也可以手动在刷新预热-URL刷新删除所有CDN缓存。</p><p>测试结果：</p><figure><img data-src="https://gitee.com/Squirrel_01/img/raw/master/img/1s-%E6%B5%8B%E9%80%9F.png" alt="1s-测速" /><figcaption aria-hidden="true">1s-测速</figcaption></figure><figure><img data-src="https://gitee.com/Squirrel_01/img/raw/master/img/1h-%E6%B5%8B%E9%80%9F.png" alt="1h-测速" /><figcaption aria-hidden="true">1h-测速</figcaption></figure><figure><img data-src="https://gitee.com/Squirrel_01/img/raw/master/img/1d-%E6%B5%8B%E9%80%9F.png" alt="1d-测速" /><figcaption aria-hidden="true">1d-测速</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图床测试</title>
      <link href="/2022/01/12/%E5%9B%BE%E5%BA%8A%E6%B5%8B%E8%AF%95/"/>
      <url>/2022/01/12/%E5%9B%BE%E5%BA%8A%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>七牛图床和gitee图床测试</p><span id="more"></span><p>七牛图床：</p><figure><img data-src="https://img.zhaoxuanlang.cn/image-20220112202327645.png" alt="image-20220112202327645" /><figcaption aria-hidden="true">image-20220112202327645</figcaption></figure><p>Gitee图床：</p><figure><img data-src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20220112202349502.png" alt="image-20220112202349502" /><figcaption aria-hidden="true">image-20220112202349502</figcaption></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>在Mac使用gnupg加密git</title>
      <link href="/2022/01/04/%E5%9C%A8Mac%E4%BD%BF%E7%94%A8gnupg%E5%8A%A0%E5%AF%86git/"/>
      <url>/2022/01/04/%E5%9C%A8Mac%E4%BD%BF%E7%94%A8gnupg%E5%8A%A0%E5%AF%86git/</url>
      
        <content type="html"><![CDATA[<p>让你的git提交也能拥有酷炫的认证标志</p><span id="more"></span><h2 id="生成gpg密码并测试可以使用">生成gpg密码并测试可以使用</h2><p>首先需要下载安装gpg</p><p><code>brew install gpg</code></p><p>安装好之后看一眼有没有pinentry <code>pinentry -h</code></p><p>有的话用<code>which pinentry</code>查找一下在哪，没有的话使用<code>brew install pinentry</code>安装</p><p>找到目录后使用<code>vim ~/.gnupg/gpg-agent.conf</code> 添加一行<code>pinentry-program /usr/local/bin/pinentry</code>这里写你自己的路径</p><p>然后使用<code>gpg --full-generate-key</code>生成，跟着指引走即可，注意一点，邮箱需要和github里添加的一样</p><p>然后使用<code>echo "test"|gpg --clearsign</code>测试一下能不能用，在这一步可能会报错</p><blockquote><p>gpg: 签名时失败： Inappropriate ioctl for device gpg: [stdin]: clear-sign failed: Inappropriate ioctl for device</p></blockquote><p>解决方案：编辑~/.gnupg目录下的gpg.conf和gpg-agent.conf两个文件</p><p>gpg.conf</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span>-<span class="title">agent</span></span><br><span class="line"><span class="title">pinentry</span>-<span class="title">mode</span> <span class="title">loopback</span></span><br></pre></td></tr></table></figure><p>gpg-agent.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allow-loopback-pinentry</span><br></pre></td></tr></table></figure><p>更改完后使用<code>gpgconf --kill gpg-agent</code>重启gpg，然后再尝试，此时应该可以生成密码了</p><h2 id="配置git">配置git</h2><p>使用<code>gpg --list-secret-keys --keyid-format=long</code>查看当前的秘钥</p><blockquote><p>/Users/zxl/.gnupg/pubring.kbx</p><p>sec rsa3072/89E3C55059BE3D97 2022-01-04 [SC] CE52DE13A3615D3687F9C82389E3C55059BE3D97 uid [ 绝对 ] Zhaoxuanlang (It's me!) <a href="mailto:1982606762@qq.com" class="email">1982606762@qq.com</a> ssb rsa3072/1CF09AC8CF982194 2022-01-04 [E]</p></blockquote><p>这里你密钥的ID是89E3C55059BE3D97</p><p>然后使用<code>gpg --armor --export 89E3C55059BE3D97</code>查看公钥，复制所有包括BEGIN和END的内容</p><p>进入github页面-settings-SSH-新增GPG，复制进去即可</p><p>还需要在本地设置git使用密钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.signingkey &quot;GPG key ID&quot;</span><br></pre></td></tr></table></figure><p>然后在commit的时候使用<code>git commit -S -m "xxxx"</code>来加密本次提交，push之后就可以见到<img data-src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20220104122352299.png" alt="image-20220104122352299" /></p><p>防止每次都加-S太麻烦可以使用<code>git config --global commit.gpgsign true</code>来默认使用加密提交</p><p>此外，还可以使用<code>gpg --delete-secret-and-public-key your@email.addr</code>来删除已生成的本地密钥</p><p>或是两步删除密钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gpg -k #列出所有密钥</span><br><span class="line">gpg --delete-secret-keys id</span><br><span class="line">gpg --delete-keys id</span><br></pre></td></tr></table></figure><h2 id="参考链接">参考链接</h2><p>https://blog.csdn.net/qq_33154343/article/details/106030946</p><p>https://superuser.com/questions/1628782/gpg-signing-failed-no-pinentry</p><p>https://docs.github.com/cn/authentication/managing-commit-signature-verification/telling-git-about-your-signing-key</p><p>https://frostming.com/2019/11-25/git-commit-sign/</p><p>https://blog.chaos.run/dreams/using-gpg/</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swift学习</title>
      <link href="/2021/12/03/swift%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/12/03/swift%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>udemy <a href="https://www.udemy.com/course/ios-13-app-development-bootcamp/">iOS &amp; Swift - The Complete iOS App Development Bootcamp</a> 学习笔记</p><span id="more"></span><h1 id="使用xcode">使用xcode</h1><p>在view中使用上方的加号可以添加元素，点击元素在右侧可以修改属性</p><p>使用assistant分屏左侧view右侧controller的时候点control并将元素拖到右边可以创建链接，按钮需要放到最下边并使用UIButton</p><figure><img data-src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20211203214120296.png" alt="image-20211203214120296" /><figcaption aria-hidden="true">image-20211203214120296</figcaption></figure><blockquote><p>control+I自动格式化</p><p>cmd+shift+B分析代码</p></blockquote><h2 id="在storyboard中修改按钮圆角">在storyboard中修改按钮圆角</h2><figure><img data-src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20211206191909648.png" alt="image-20211206191909648" /><figcaption aria-hidden="true">image-20211206191909648</figcaption></figure><p>在这里新增<code>layer.cornerRadius</code> 即可</p><h2 id="可视化选择uicolor和img">可视化选择UIColor和Img</h2><p>Xcode13之后变成了<code>#colorLiteral()</code> 和 <code>#imgLiteral()</code> 来快速选择</p><p>Xcode13之前可以使用 <code>color literal</code>来自动补全</p><h2 id="使用自带图形sfsymbol">使用自带图形SFSymbol</h2><p>点imageview，右边image下拉菜单找或者输入名字</p><h2 id="dark-mode">Dark Mode</h2><p>将颜色设置成label或者Systemcolor就可以随系统变化</p><p>自定义颜色：</p><ol type="1"><li>在Assets.xcassets里左下角点加号新增一个color set，然后分别自定义各个颜色</li></ol><p>自定义图片：</p><figure><img data-src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20211220185034330.png" alt="image-20211220185034330" /><figcaption aria-hidden="true">image-20211220185034330</figcaption></figure><h2 id="分割线和自定义快捷输入">分割线和自定义快捷输入</h2><p>分割线是<code>//MARK: -</code></p><p>选中函数右键，create code snippet可以新建快捷输入</p><h1 id="swift基础">Swift基础</h1><p>用var声明变量，用let声明常量。</p><p>获取随机数： Int.random(in:begin...end) Int.random(in:begin..&lt;end)不包含end Float.random(in:begin...end)获取浮点随机数</p><p>arr.shuffle()可以将数组打乱顺序</p><p>字符串可以直接用加号连接</p><h2 id="for循环建议使用">for循环建议使用</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">6</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也支持</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> titleText <span class="operator">=</span> <span class="string">&quot;⚡️FlashChat&quot;</span></span><br><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> titleText&#123;</span><br><span class="line">    <span class="built_in">print</span>(letter)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="if语句">if语句</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> a <span class="operator">==</span> <span class="number">1</span>&#123;</span><br><span class="line">  xxx</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  xxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="switch语句">switch语句</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num <span class="operator">=</span> <span class="type">Int</span>.random(in: <span class="number">0</span><span class="operator">...</span><span class="number">100</span>)</span><br><span class="line"><span class="keyword">switch</span> num &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="swift-range">Swift range</h2><blockquote><p>a...b closed Range [a,b]</p><p>a..&lt;b half open Range [a,b)</p><p>...b One sided Range [1,b]</p></blockquote><h2 id="dictionary">Dictionary</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dic <span class="operator">=</span> [:]</span><br><span class="line"><span class="keyword">let</span> dic : [<span class="type">String</span>:<span class="type">Int</span>] <span class="operator">=</span> [<span class="string">&quot;aaa&quot;</span>:<span class="number">123</span>]</span><br></pre></td></tr></table></figure><h2 id="optional">Optional</h2><p>一个变量如果可能是nil就是一个optional变量，如果用到某个变量，他有可能是nil，并且是nil的时候会崩溃，就需要使用optional变量</p><blockquote><p>string 普通string String? optional string</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name : string<span class="operator">?</span> <span class="operator">=</span> <span class="literal">nil</span></span><br></pre></td></tr></table></figure><h2 id="structure">Structure</h2><p>包含property 和method¡</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStructure</span></span>&#123;</span><br><span class="line">  <span class="keyword">let</span> name : <span class="type">String</span></span><br><span class="line">  <span class="keyword">var</span> p : [<span class="type">String</span>]</span><br><span class="line">  <span class="function"><span class="keyword">init</span>(<span class="params">name</span>:<span class="type">String</span>,<span class="params">p</span>:[<span class="type">String</span>])</span>&#123;</span><br><span class="line">    <span class="keyword">self</span>.name <span class="operator">=</span> name</span><br><span class="line">    <span class="keyword">self</span>.p <span class="operator">=</span> p</span><br><span class="line">&#125;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">hello</span>()</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s1 <span class="operator">=</span> <span class="type">MyStructure</span>()</span><br><span class="line"><span class="built_in">print</span>(s1.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exercise</span>()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">User</span></span>&#123;</span><br><span class="line">        <span class="keyword">let</span> name : <span class="type">String</span></span><br><span class="line">        <span class="keyword">var</span> email : <span class="type">String</span>?</span><br><span class="line">        <span class="keyword">var</span> followers : <span class="type">Int</span></span><br><span class="line">        <span class="keyword">var</span> isActive : <span class="type">Bool</span></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">logStatus</span>()</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">self</span>.isActive &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(<span class="keyword">self</span>.name)</span> is working hard&quot;</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(<span class="keyword">self</span>.name)</span> has left the earth&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Define the User struct here</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialise a User struct here</span></span><br><span class="line">    <span class="keyword">var</span> riuser <span class="operator">=</span> <span class="type">User</span>(name: <span class="string">&quot;Richard&quot;</span>, email: <span class="literal">nil</span>, followers: <span class="number">0</span>, isActive: <span class="literal">false</span>)</span><br><span class="line">    riuser.logStatus()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Diagnostic code - do not change this code</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\n</span>Diagnostic code (i.e., Challenge Hint):&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> musk <span class="operator">=</span> <span class="type">User</span>(name: <span class="string">&quot;Elon&quot;</span>, email: <span class="string">&quot;elon@tesla.com&quot;</span>, followers: <span class="number">2001</span>, isActive: <span class="literal">true</span>)</span><br><span class="line">    musk.logStatus()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Contacting <span class="subst">\(musk.name)</span> on <span class="subst">\(musk.email<span class="operator">!</span>)</span> ...&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(musk.name)</span> has <span class="subst">\(musk.followers)</span> followers&quot;</span>)</span><br><span class="line">    <span class="comment">// sometime later</span></span><br><span class="line">    musk.isActive <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    musk.logStatus()</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="external-parameter">External parameter</h2><p>一个函数的参数可以有一个外部名字和一个内部名字，在设置了之后，使用函数就可以用外部名字传参，函数内再使用内部名字。或者直接不使用外部名字，使用函数时就不需要写参数名</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//with external parameter</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span>(<span class="params">answer</span> <span class="params">parameter</span>:<span class="type">String</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">print</span>(parameter)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(answer:<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//without external parameter</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test2</span>(<span class="keyword">_</span> <span class="params">parameter</span>:<span class="type">String</span>,<span class="keyword">_</span> <span class="params">para2</span>:<span class="type">Int</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(parameter)</span><br><span class="line">    <span class="built_in">print</span>(para2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test2(<span class="string">&quot;Hello&quot;</span>,<span class="number">123</span>)</span><br></pre></td></tr></table></figure><h2 id="function">Function</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isOdd</span>(<span class="keyword">_</span> <span class="params">n</span>:<span class="type">Int</span>)</span>-&gt; <span class="type">Bool</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> n<span class="operator">%</span><span class="number">2</span> <span class="operator">==</span> <span class="number">1</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="mutable可变性">Mutable(可变性)</h2><p>Swift中用var创建的变量都是mutable，用let创建的都是immutable。在修改immutable变量时需要打碎再重建</p><p>在struct内部修改struct变量值的时候需要给方法添加mutating属性</p><p>使用SwiftUI的时候可以给变量加@State属性来修复</p><h2 id="保留小数位数">保留小数位数</h2><p>从Double转到String时可使用<code>String("$.2f",num)</code>来保留两位小数</p><p>从Int转到String，不足两位前面补0：<code>String("%02d,num")</code></p><h2 id="类和继承">类和继承</h2><p>类的定义方式和结构体类似</p><p>继承：<code>class A : B&#123;&#125;</code></p><p>重载函数： <code>override func a()&#123;&#125;</code></p><p>使用父类的函数：<code>super.funca()</code></p><figure><img data-src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20211210111025022.png" alt="image-20211210111025022" /><figcaption aria-hidden="true">image-20211210111025022</figcaption></figure><p>NSObject(NextObject)</p><h2 id="struct和class区别">Struct和Class区别</h2><p>使用A=B的时候Class是浅拷贝，struct是深拷贝</p><p>struct使用值传递，class使用reference传递</p><p>apple建议一开始使用struct，有需要时再变成class</p><h2 id="optional进阶用法">Optional进阶用法</h2><ol type="1"><li><p>强制unwrap a = optional!</p></li><li><p>```swift if optional != nil{ print(safe!) }else{</p><p>} <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. optional binding : </span><br><span class="line"></span><br><span class="line">   ```swift</span><br><span class="line">   if let safe = optional&#123;</span><br><span class="line">     print(safe)</span><br><span class="line">   &#125;else&#123;</span><br><span class="line">     </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p></li><li><p>Default: <code>optional ?? defaltvalue</code></p></li><li><p>Optional chaining <code>optional?.prop</code></p></li></ol><h2 id="自动页面位置">自动页面位置</h2><p>横屏时自动修正位置：</p><p>可以通过添加位置约束和对齐的方式</p><blockquote><ul><li>位置约束：距离最近的元素上下左右具体多少像素</li><li>对齐：水平轴或者垂直轴居中</li><li>也可以两者一起使用</li></ul></blockquote><p>添加位置约束：</p><p>选择需要修改的view，选中需要修改的元素，右下角添加约束</p><figure><img data-src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20211204153117825.png" alt="image-20211204153117825" /><figcaption aria-hidden="true">image-20211204153117825</figcaption></figure><p>把虚线点成实线后add。现在横屏后可能会局限在safe area中，就需要点constraint，具体修改四个方位的safe area改成superview即可</p><p>添加居中：</p><figure><img data-src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20211204155250623.png" alt="image-20211204155250623" /><figcaption aria-hidden="true">image-20211204155250623</figcaption></figure><p>两个一起使用可以制作出如图label效果，垂直轴居中并且离上边元素30px</p><p>居中时会让元素大小发生变化，可以使用constrain来设置大小</p><h3 id="用view控制位置">用view控制位置</h3><p>对复杂元素定位时可以使用view，就是div的用处。选中需要在一起的元素点击这里可以放进一个view。</p><figure><img data-src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20211204160340654.png" alt="image-20211204160340654" /><figcaption aria-hidden="true">image-20211204160340654</figcaption></figure><p>Stackview可以把多个view堆叠。将多个view添加到一个stackview后可以调整边距，元素距离等。</p><blockquote><p>Bug:Stack view 的Alignment设置成vertical时会使按钮无法使用，需要设置成Fill</p></blockquote><h2 id="播放声音">播放声音</h2><p>在遇到新模块的时候去google，模板：dosth+language+stackoverflow</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> AVFoundation</span><br><span class="line"><span class="keyword">var</span> player: <span class="type">AVAudioPlayer</span>?</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">playSound</span>(<span class="params">name</span>: <span class="type">String</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">Bundle</span>.main.url(forResource: name, withExtension: <span class="string">&quot;mp3&quot;</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> <span class="type">AVAudioSession</span>.sharedInstance().setCategory(.playback, mode: .default)</span><br><span class="line">            <span class="keyword">try</span> <span class="type">AVAudioSession</span>.sharedInstance().setActive(<span class="literal">true</span>)</span><br><span class="line">            </span><br><span class="line">            player <span class="operator">=</span> <span class="keyword">try</span> <span class="type">AVAudioPlayer</span>(contentsOf: url, fileTypeHint: <span class="type">AVFileType</span>.mp3.rawValue)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> player <span class="operator">=</span> player <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">            </span><br><span class="line">            player.play()</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error &#123;</span><br><span class="line">            <span class="built_in">print</span>(error.localizedDescription)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用progressviewer">使用progressViewer</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">progressViewer.setProgress(<span class="number">0.0</span>,animated: <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h2 id="定时器">定时器</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timer <span class="operator">=</span> <span class="type">Timer</span>?</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">startTimer</span>(<span class="params">time</span>:<span class="type">Int</span>)</span> &#123;</span><br><span class="line">        timer<span class="operator">?</span>.invalidate()</span><br><span class="line">        timer <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">        counter <span class="operator">=</span> time</span><br><span class="line">        timer <span class="operator">=</span> <span class="type">Timer</span>.scheduledTimer(timeInterval: <span class="number">1.0</span>, target: <span class="keyword">self</span>, selector: #selector(updateCounter), userInfo: <span class="literal">nil</span>, repeats: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">updateCounter</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> counter <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">            progressViewer.setProgress(<span class="type">Float</span>(times[hard]<span class="operator">!-</span>counter)<span class="operator">/</span><span class="type">Float</span>(times[hard]<span class="operator">!</span>), animated: <span class="literal">true</span>)</span><br><span class="line">            counter <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            playSound(name: <span class="string">&quot;alarm_sound&quot;</span>)</span><br><span class="line">            progressViewer.setProgress(<span class="number">1.0</span>, animated: <span class="literal">true</span>)</span><br><span class="line">            <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class="operator">+</span> <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">self</span>.progressViewer.setProgress(<span class="number">0.0</span>, animated: <span class="literal">true</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> timer <span class="operator">=</span> <span class="keyword">self</span>.timer &#123;</span><br><span class="line">                timer.invalidate()</span><br><span class="line">                <span class="keyword">self</span>.timer <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="设计模式">设计模式</h2><p>设计模式就是针对某一种问题的一个经过验证的解决方案</p><p>有很多设计模式</p><h3 id="mvc">MVC</h3><p>Model-view-controller</p><figure><img data-src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20211206165603374.png" alt="image-20211206165603374" /><figcaption aria-hidden="true">image-20211206165603374</figcaption></figure><h3 id="delegate">Delegate</h3><p>常用delegate：</p><p>Decodable：用于表明这个struct可以转化成json</p><p>Identifiable：必须自己有一个叫做id的东西，可以使用computed propoty代替。用处可以简便的遍历这个类的元素</p><figure><img data-src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20211228193140941.png" alt="image-20211228193140941" /><figcaption aria-hidden="true">image-20211228193140941</figcaption></figure><h2 id="使用代码新建view">使用代码新建view</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">secondViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bmi <span class="operator">=</span>  <span class="string">&quot;0.0&quot;</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        view.backgroundColor <span class="operator">=</span> .red</span><br><span class="line">        <span class="keyword">let</span> label <span class="operator">=</span> <span class="type">UILabel</span>()</span><br><span class="line">        label.text <span class="operator">=</span> bmi</span><br><span class="line">        label.frame <span class="operator">=</span> <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">100</span>, height: <span class="number">50</span>)</span><br><span class="line">        label.backgroundColor <span class="operator">=</span> .green</span><br><span class="line">        view.addSubview(label)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="切换显示view">切换显示view</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vc2 <span class="operator">=</span> secondViewController()</span><br><span class="line">vc2.bmi <span class="operator">=</span> <span class="type">String</span>(format: <span class="string">&quot;%.2f&quot;</span>, bmi1)</span><br><span class="line"><span class="keyword">self</span>.present(vc2, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><h2 id="创建segue">创建segue</h2><figure><img data-src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20211211172952388.png" alt="image-20211211172952388" /><figcaption aria-hidden="true">image-20211211172952388</figcaption></figure><p>在controller上或者view上边的小点上按住control拖到下边的viewcontroller</p><p>还可以直接按住cintrol从Aview里的某一个按钮上拖到另一个view</p><p>segue可以定义页面切换的动画，不同segue的区别：https://help.apple.com/xcode/mac/8.0/#/dev564169bb1</p><p>若要用segue从Acontroller切换到Bcontroller：</p><blockquote><p>需要在Acontroller中定义prepare函数来传输一些B必要的变量</p><p>A中使用<code>self.performSegue</code>切换.第一个是在storyboard设置的名称，第二个是self或别的类</p><p>B中使用 <code>dismiss</code> 来回去</p></blockquote><figure><img data-src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20220123215120967.png" alt="image-20220123215120967" /><figcaption aria-hidden="true">image-20220123215120967</figcaption></figure><h2 id="protocol用法">protocol用法</h2><p>protocol类似一种认证，其实就是虚类</p><p>内部类似虚类，只能定义函数名</p><p>用的时候需要定义函数</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">airplane</span>: <span class="title">canfly</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">fly</span>()</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;fly&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用api获得天气数据">使用api获得天气数据</h2><p>在openweather注册账号，使用current来获取数据，还可以自定义一些显示特征</p><h2 id="使用swift进行url链接">使用swift进行url链接</h2><ol type="1"><li>生成url</li><li>创建URLSession</li><li>给UrlSession一个任务</li><li>运行任务</li></ol><h2 id="用函数作为参数匿名函数">用函数作为参数，匿名函数</h2><p>函数作参数传入：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calculate</span>(<span class="params">n1</span>:<span class="type">Int</span>,<span class="params">n2</span>:<span class="type">Int</span>,<span class="params">operation</span>:(<span class="type">Int</span>,<span class="type">Int</span>)-&gt;<span class="type">Int</span>)</span>-&gt;<span class="type">Int</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> operation(n1,n2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">plus</span>(<span class="params">n1</span>:<span class="type">Int</span>,<span class="params">n2</span>:<span class="type">Int</span>)</span>-&gt;<span class="type">Int</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n1<span class="operator">+</span>n2</span><br><span class="line">&#125;</span><br><span class="line">calculate(n1: <span class="number">2</span>, n2: <span class="number">3</span>, operation: plus(n1:n2:))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>匿名函数：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    (no1:<span class="type">Int</span>,no2:<span class="type">Int</span>)-&gt;<span class="type">Int</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> no1<span class="operator">+</span>no2</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//编译器可以预判你要输出一些东西</span></span><br><span class="line">calculate(n1:<span class="number">2</span>,n2:<span class="number">3</span>,operation:&#123;(no1,no2) <span class="keyword">in</span> </span><br><span class="line">                              no1<span class="operator">+</span>no2&#125;)</span><br><span class="line"><span class="comment">//$0代表第一个变量</span></span><br><span class="line">calculate(n1:<span class="number">2</span>,n2:<span class="number">3</span>,operation:&#123;<span class="variable">$0</span><span class="operator">+</span><span class="variable">$1</span>&#125;)</span><br><span class="line">calculate(n1:<span class="number">2</span>,n2:<span class="number">3</span>)&#123;<span class="variable">$1</span><span class="operator">+</span><span class="variable">$2</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="map函数">Map函数</h2><p><code>array.map(func1)</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newarray <span class="operator">=</span> array.map&#123;<span class="string">&quot;<span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>&#125;</span><br><span class="line">array.map(&#123;(n1)<span class="keyword">in</span></span><br><span class="line">    n1<span class="operator">+</span><span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="computed-property">Computed property</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> prop:<span class="type">String</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;qwwe&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dispatchqueue">DispatchQueue</h2><p>在需要长时间进行的任务（如从网上寻找东西）的时候系统会让他在后台执行，因为如果让用户等的话就会看起来像是卡住了。但是如果在任务中需要更新前台的显示就需要修改更新的代码</p><p>把更新部分的代码用sync包裹起来</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DispatchQueue</span>.main.sync &#123;</span><br><span class="line">            temperatureLabel.text <span class="operator">=</span> weather.temperatureString</span><br><span class="line">            conditionImageView.image <span class="operator">=</span> <span class="type">UIImage</span>(systemName: weather.conditionName)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="extension用法">extension用法</h2><p>用于扩展某个类，新增函数</p><ol type="1"><li><p>扩展内建类</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Double</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">round</span>(<span class="params">to</span>:<span class="type">Int</span>)</span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> q <span class="operator">=</span> pow(<span class="number">10</span>, <span class="type">Double</span>(to))</span><br><span class="line">        <span class="keyword">var</span> n <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">        n<span class="operator">=</span>n<span class="operator">*</span>q</span><br><span class="line">        n.round()</span><br><span class="line">        n <span class="operator">=</span> n<span class="operator">/</span>q</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> double <span class="operator">=</span> <span class="number">3.14159</span></span><br><span class="line">double.round(to:<span class="number">3</span>)</span><br></pre></td></tr></table></figure></li><li><p>扩展protocol</p><p>如果某个protocol里的函数需要一个默认值可以使用extension来添加</p></li><li><p>简化代码。</p><p>如果一个类有很多继承关系，可以把每个继承写成一个扩展，扩展内部写和这个继承相关的函数</p></li></ol><h2 id="使用cocoapods">使用cocoapods</h2><p>cocoapods类似前端的npm，是一个Swift的包管理器</p><ol type="1"><li><code>sudo gem install cocoapods</code>安装</li><li>cd到项目目录，使用pod init生成podfile</li><li>修改podfile，添加需要的模块</li><li><code>pod install</code></li><li>打开新生成的App.xcworkspace进行操作</li></ol><p>删除操作：</p><ol type="1"><li>在podfile中删除模块</li><li>使用pod install</li></ol><p>相关链接：<a href="https://cocoapods.org/">cocoapods官网</a></p><h2 id="constant文件">Constant文件</h2><p>用来记录一些项目中的常量</p><p>在根文件夹新建Constants.swift，里边新增一个Constants struct。里边的成员使用static修饰</p><p><img data-src="https://img.zhaoxuanlang.cn/image-20220130205457742.png" /></p><p>let是instance变量，static let是type变量。type变量依赖于type，instance变量依赖于instance</p><p>建议struct叫做K，比较短</p><h2 id="uitableview">UITableView</h2><p>搜索tableview，同时新增一个table cell。这个cell必须要设置一个identifier</p><p>也可以直接搜索UItableviewcontroller，这样的话所有所需的关联都会自动添加。（推荐）</p><h3 id="使用">使用</h3><p>在controller中首先需要有数据源的数组</p><p>然后添加两个函数，一个是有numberOfRowsInSection，返回数据源的成员个数，获得table的行数</p><p>另一个是有cellForRowAt，返回的是一个cell。这个函数内先定义一个cell，这里要用到之前的那个identifier，然后可以设置它的文本，最好返回这个cell。</p><figure><img data-src="https://img.zhaoxuanlang.cn/image-20220213113516497.png" alt="image-20220213113516497" /><figcaption aria-hidden="true">image-20220213113516497</figcaption></figure><h3 id="添加点击事件">添加点击事件</h3><p>需要用到delegate方法来呼叫delegate。</p><p>添加有didSelectRowAt的tableView方法，里边可以先写个print来获得点击的位置。点击后有灰色的效果，如果想取消灰色效果就需要加tableView.deselectRow方法。</p><p>可以通过添加accessoryType来添加尾部元素如checkmark。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">didSelectRowAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>)</span> &#123;</span><br><span class="line"><span class="comment">//        print(ItemArray[indexPath.row])</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (tableView.cellForRow(at: indexPath)<span class="operator">?</span>.accessoryType <span class="operator">==</span> .checkmark)&#123;</span><br><span class="line">            tableView.cellForRow(at: indexPath)<span class="operator">?</span>.accessoryType <span class="operator">=</span> .none</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            tableView.cellForRow(at: indexPath)<span class="operator">?</span>.accessoryType <span class="operator">=</span> .checkmark</span><br><span class="line">        &#125;</span><br><span class="line">        tableView.deselectRow(at: indexPath, animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="重新加载">重新加载</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.tableview.reloadData()</span><br></pre></td></tr></table></figure><h1 id="as标签的使用">as标签的使用</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">If</span> i <span class="keyword">is</span> int&#123;</span><br><span class="line">  </span><br><span class="line">&#125;<span class="comment">//可以用来辨别i变量的属性</span></span><br></pre></td></tr></table></figure><p>as!用于强制类型转换，可以转化成子类，但是有可能在运行时报错</p><p>as?用于有可能能转化</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> a <span class="keyword">as?</span> b&#123;</span><br><span class="line">a.bfunc()</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>as是把类转化成父类（不常用）</p><h2 id="navigation-bar">Navigation bar</h2><h3 id="生成">生成</h3><p>点击第一个view，editor-embedin-navigation controller就可以添加进navigation stack</p><h3 id="颜色设置">颜色设置</h3><p>点左侧Navigation Bar，右侧的设置中Translucent可以让它颜色和下边相同</p><p>Tint是返回文字的颜色</p><h3 id="自定义显示和隐藏">自定义显示和隐藏</h3><p>在要隐藏的view controller中添加</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillAppear</span>(xxx)</span>&#123;</span><br><span class="line">  <span class="keyword">super</span>.viewxxxx</span><br><span class="line">  navigationController<span class="operator">?</span>.isNavigationBarHidden <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillDisappear</span>(xxx)</span>&#123;</span><br><span class="line">  <span class="keyword">super</span>.viewxxxx</span><br><span class="line">  xxx <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在bar中添加button">在bar中添加button</h3><p>搜索barbutton添加，可以直接选择systemItem为一些预设样式</p><h2 id="view-controller-生命周期">View Controller 生命周期</h2><figure><img data-src="https://img.zhaoxuanlang.cn/image-20220201211336874.png" alt="image-20220201211336874" /><figcaption aria-hidden="true">image-20220201211336874</figcaption></figure><h2 id="swiftui使用">SwiftUI使用</h2><p>SwiftUI可以实时预览，还能直接向画面上添加组件</p><h3 id="创建">创建</h3><p>在创建项目时选择使用SwiftUI</p><h3 id="添加自定义字体">添加自定义字体</h3><p>把文件放进项目后在info里新增一条Fonts provided by application,值填字体的全称，包括扩展名。</p><h3 id="图片">图片</h3><p>更改大小需要加resizable，然后可以用aspectRatio来自适应。padding类似于前端的margin。</p><h3 id="extract-subview实现组件复用">Extract Subview实现组件复用</h3><p>cmd+左键点某一个组件，选择Extract Subview就可以分离出来，然后可以进行改名。</p><p>分离出来之后在总view中新建变量，调用的时候传入变量后就可以复用。</p><p>还可以新建一个SwiftUI文件，把这个复制进去作为单独的文件用。</p><p><img data-src="https://img.zhaoxuanlang.cn/image-20220207123719045.png" /></p><h2 id="uialert">UIAlert</h2><h3 id="定义">定义</h3><p>需要定义一个alert和一个action。alert是对话框本地，action是添加到alert对象上的选项。</p><p>alert可以添加TextField文本输入框</p><h2 id="本地存储">本地存储</h2><p><img data-src="https://img.zhaoxuanlang.cn/%E6%88%AA%E5%B1%8F2022-02-16%20%E4%B8%8B%E5%8D%881.53.27.png" /></p><h3 id="userdefault">Userdefault</h3><p>把所有数据以key-value的形式存在一个plist里</p><p>首先需要定义一个<code>var defaults = UserDefaults.standard</code></p><p>存储：<code>self.defaults.set(xxxxx,forKey:"keyxxx")</code></p><p>读取取决于存入的类型：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">defaults.array(forKey:<span class="string">&quot;keyxxx&quot;</span>)</span><br><span class="line">defaults.float()</span><br><span class="line">defaults.object()</span><br><span class="line">defaults.dictionary()</span><br></pre></td></tr></table></figure><p>不建议存储大量数据，每次读取都会读所有的plist</p><h3 id="nsdecoder">NSdecoder</h3><p>自定义plist的存储位置，可以分开多个plist存放不同数据</p><p>首先需要定义plist：</p><p><code>**let** dataFilePath = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first?.appendingPathComponent("items.plist")</code></p><p>读取与写入：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">saveitems</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> encoder <span class="operator">=</span> <span class="type">PropertyListEncoder</span>()</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> data <span class="operator">=</span> <span class="keyword">try</span> encoder.encode(<span class="type">ItemArray</span>)</span><br><span class="line">            <span class="keyword">try</span> data.write(to: dataFilePath<span class="operator">!</span>)</span><br><span class="line">        &#125;<span class="keyword">catch</span>&#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error saving!&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        tableView.reloadData()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">loadItem</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> data <span class="operator">=</span> <span class="keyword">try?</span> <span class="type">Data</span>(contentsOf: dataFilePath<span class="operator">!</span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> decoder <span class="operator">=</span> <span class="type">PropertyListDecoder</span>()</span><br><span class="line">            <span class="keyword">do</span>&#123;</span><br><span class="line">                <span class="type">ItemArray</span> <span class="operator">=</span> <span class="keyword">try</span> decoder.decode([<span class="type">Item</span>].<span class="keyword">self</span>, from: data)</span><br><span class="line">            &#125;<span class="keyword">catch</span>&#123;</span><br><span class="line">                <span class="built_in">print</span>(error)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="singleton">Singleton</h2><p>全局只能有一个</p><p>在class里定义一个static类型变量</p>]]></content>
      
      
      <categories>
          
          <category> swift </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue学习</title>
      <link href="/2021/11/05/vue%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/11/05/vue%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="vue-app内容">vue app内容</h1><h2 id="data">data</h2><p>可以return多个内容，代表app要使用的所有数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">list</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;王五&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">22</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">num</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="mounted">mounted</h2><p>在网页加载完成后自动执行内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.num = <span class="built_in">Math</span>.random() * <span class="number">100</span></span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="methods">methods</h2><p>app要使用的所有函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.list.push(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="built_in">this</span>.name,</span><br><span class="line">      <span class="attr">age</span>: <span class="built_in">this</span>.num</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">this</span>.num = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="事件">事件</h3><p>函数默认第一个参数是event，若有参数就可以使用$event作为实参传入</p><p>绑定多个事件可以用逗号隔开，并且加上函数的引用括号</p><p>阻止事件冒泡，事件修饰符：</p><ul><li>可以在内层btn上使用@click.stop</li><li>可以在外层使用@click.self判断是不是点的自己</li><li>在外层加.capture让他捕获冒泡</li><li>在外层加.once让他</li></ul><p>按键修饰符：<span class="citation" data-cites="keydown">@keydown</span></p><p>Enter,tab,delete,esc,up,down,left,right</p><p>鼠标修饰符：<span class="citation" data-cites="click">@click</span></p><p>Left,right,middle</p><p>精确修饰符：<span class="citation" data-cites="click.ctrl.exact只有点击ctrl才可以">@click.ctrl.exact只有点击ctrl才可以</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input @keydown.delete = <span class="string">&quot;handleKeyDown&quot;</span></span><br></pre></td></tr></table></figure><h2 id="template">template</h2><p>在app绑定的节点内添加里边的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">template: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">                &lt;input v-model=&quot;name&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;input v-model=&quot;num&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;button v-on:click = &quot;handleClick&quot;&gt;添加&lt;/button&gt;</span></span><br><span class="line"><span class="string">                &lt;ul&gt;</span></span><br><span class="line"><span class="string">                    &lt;li v-for=&quot;(item,index) in list&quot;&gt;</span></span><br><span class="line"><span class="string">                        &#123;&#123;item.name&#125;&#125;</span></span><br><span class="line"><span class="string">                        &#123;&#123;item.age&#125;&#125;</span></span><br><span class="line"><span class="string">                        &#123;&#123;index&#125;&#125;</span></span><br><span class="line"><span class="string">                    &lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;/ul&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">&#125;).mount(<span class="string">&#x27;#root&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="component">component</h2><p>组件，可以表示任何可见元素</p><p>定义：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app.component(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;content&#x27;</span>,<span class="string">&quot;index&quot;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;li&gt;</span></span><br><span class="line"><span class="string">            &#123;&#123;content.name&#125;&#125;</span></span><br><span class="line"><span class="string">            &#123;&#123;content.age&#125;&#125;</span></span><br><span class="line"><span class="string">            &#123;&#123;index&#125;&#125;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">my-component</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml"><span class="attr">v-for</span>=<span class="string">&quot;(item,index) in list&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml"><span class="attr">v-bind:content</span>=<span class="string">&quot;item&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml"><span class="attr">v-bind:index</span> = <span class="string">&quot;index&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">/&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h2 id="计算属性">计算属性</h2><p>computed</p><p>当计算属性依赖的内容发生变更时才重新执行计算</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  <span class="function"><span class="title">total</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Date</span>.now()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="监听器">监听器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//price发生变化时执行</span></span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="function"><span class="title">price</span>(<span class="params">current,prev</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.message = prev + <span class="string">&quot;changed to&quot;</span> + current</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="样式">样式</h2><p>在style里定义类，然后给标签绑定类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    <span class="attr">class</span>:<span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">    <span class="attr">classObj</span>:&#123;<span class="attr">red</span>:<span class="literal">true</span>,<span class="attr">green</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">    <span class="attr">classArray</span>:[<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,&#123;<span class="attr">brown</span>:<span class="literal">true</span>&#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div :class=&quot;classObj&quot;&gt;Hello World&lt;/div&gt;`</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对于组价有两种方法来改变class</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.每个组价标签都加class</span></span><br><span class="line"><span class="comment">//2.父组件加class，子组件使用:class=&quot;$attrs.class&quot;继承父组件的class</span></span><br></pre></td></tr></table></figure><h1 id="vue基本操作">vue基本操作</h1><h2 id="v-for">v-for</h2><p>支持两个参数，第二个是当前项的索引，从0开始</p><h2 id="v-bind">V-bind</h2><p>用于给某个标签绑定属性，如title，class等</p><p>简写为:</p><p>v-bind:class后可以在某条件达成后获得某个类名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in navList&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;active:index === activeNavIndex&#125;&quot;</span></span></span><br></pre></td></tr></table></figure><h2 id="v-on">v-on</h2><p>绑定点击事件<code>v-on:click = "handleclick"</code></p><p>简写为@click</p><h2 id="v-model">v-model</h2><p>双向绑定数据和输入框,把输入框变成单标签。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;message&#125;&#125;</span><br><span class="line">&lt;input v-model=<span class="string">&quot;message&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h3 id="标签">标签</h3><p>可以使用：input(text,checkbox,video),textarea,select</p><p>使用checkbox的时候message可以是一个数组[]，然后input添加value就可以显示当前点的什么</p><p>也可以自定义选中和没选中的时候的显示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">message:<span class="string">&quot;world&quot;</span></span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> v-model=<span class="string">&quot;message&quot;</span> <span class="literal">true</span>-value=<span class="string">&quot;hello&quot;</span> <span class="literal">false</span>-value=<span class="string">&quot;world&quot;</span>/&gt;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>使用video的时候message是字符串‘’</p><p>使用select的时候message是字符串，最好给一个初始值，其中内部的option可以用object来批量初始化：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">options:[&#123;</span><br><span class="line">  <span class="attr">text</span>:<span class="string">&#x27;A&#x27;</span>,<span class="attr">value</span>:<span class="string">&#x27;A&#x27;</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">  <span class="attr">text</span>:<span class="string">&#x27;B&#x27;</span>,<span class="attr">value</span>:<span class="string">&#x27;B&#x27;</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">  <span class="attr">text</span>:<span class="string">&#x27;C&#x27;</span>,<span class="attr">value</span>:<span class="string">&#x27;C&#x27;</span></span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;select v-model=<span class="string">&quot;message&quot;</span>&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">&quot;item in options&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;item.value&quot;</span>&gt;</span>&#123;&#123;item.text&#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="修饰符">修饰符</h3><p>v-model.lazy可以让他变得变慢</p><p>V-model.number让输入的值存储成number类型</p><p>V-model.trim去除后边的空格</p><h2 id="v-once">V-once</h2><p>让语句里的变量不会在改变的时候进行渲染</p><p>内容会变，但是页面上显示的不变</p><h2 id="v-if">v-if</h2><p>根据变量判断是否展示标签</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span>&#123;</span><br><span class="line">                <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">condotion</span>:<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div :class=&#x27;classs&#x27;&gt;Hello World&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div v-if=&quot;show&quot;&gt;if&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div v-else-if=&quot;condotion&quot;&gt;elseif&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div v-else&gt;else&lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">        </span><br></pre></td></tr></table></figure><p>使用template来做占位符，仅做到for循环的效果并且不添加div</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,key,index) in listItem&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;key !== &#x27;second&#x27;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;&#123;key&#125;&#125;---&#123;&#123;value&#125;&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span>    </span><br><span class="line">        &lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="v-show">v-show</h2><p>根据变量判断是否加display:none</p><h1 id="mvvm">mvvm</h1><blockquote><p>let app = Vue.<strong>createApp</strong>({</p><p>​ });</p><p>创造vue app</p><p>let vm = app.mount('#root')</p><p>vue应用的根组件</p></blockquote><h1 id="生命周期函数">生命周期函数</h1><p>某一时刻被自动执行的函数</p><figure><img data-src="https://img.zhaoxuanlang.cn/lifecycle.png" alt="The Vue Instance Lifecycle" /><figcaption aria-hidden="true">The Vue Instance Lifecycle</figcaption></figure><h1 id="组件">组件</h1><p>可以复用，每个组件内的data是独立的</p><p>全局组件定义后全局可以使用，但是性能不高</p><p>局部组件注册才能用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> counter = &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div @click=&quot;count += 1&quot;&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在app里添加components:{'count':counter}，或者{counter}简写</p><h2 id="传值">传值</h2><p>在调用的时候传递<code>&lt;test content="123" /&gt;</code></p><p>或者使用v-bind:content="num"并且在data里定义num</p><p>在组件里添加<code>props:['content']</code></p><h2 id="参数类型校验">参数类型校验</h2><p>在组件里使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">  <span class="attr">content</span>: string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是需要传入一个string</p><p>可以使用string,boolean,array,object,function</p><p>高级用法：可以把content定义为一个object，里边可以包含default函数，validator函数，required元素等。</p><h2 id="单向数据流">单向数据流</h2><p>父组件能向子组件传值，但是子组件不能修改</p><p>方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">props:[<span class="string">&#x27;count&#x27;</span>]</span><br><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    <span class="attr">mycount</span>: <span class="built_in">this</span>.count</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="non-prop属性">non-prop属性</h2><p>子组件不定义prop的时候父组件传过来的值就会变成一个属性，如msg="hello"</p><p>用处：可以快速定义style</p><p>可以在子组件加inheritAttrs: false来不接收</p><p>子组件有做个的时候可以在想添加的那个组件上添加v-bind="$attrs"来获得属性</p><h2 id="父子组件间使用方法通信">父子组件间使用方法通信</h2><p>子组件使用this.$emit('add,1')</p><p>父组件监听@add = handle</p><p>handle函数有一个参数，获得1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span>&#123;</span><br><span class="line">                <span class="attr">count</span>:<span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">methods</span>:&#123;</span><br><span class="line">            <span class="function"><span class="title">handleadd</span>(<span class="params">para</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.count += para</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;test @add=&quot;handleadd&quot; :content=&quot;count&quot;/&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;`</span></span><br><span class="line">        </span><br><span class="line">    &#125;);</span><br><span class="line">    app.component(<span class="string">&#x27;test&#x27;</span>,&#123;</span><br><span class="line">        <span class="attr">props</span>:[<span class="string">&#x27;content&#x27;</span>],</span><br><span class="line">        <span class="attr">methods</span>:&#123;</span><br><span class="line">            <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.$emit(<span class="string">&#x27;add&#x27;</span>,<span class="number">2</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">template</span>:<span class="string">`&lt;div @click=&quot;handleClick&quot;&gt;&#123;&#123;content&#125;&#125;&lt;/div&gt;`</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>使用emits是一个数组可以在数组里写所有父组件需要监听的函数名</p><p>emits如果里边加一个函数的话可以在传参的时候校验参数</p><p>高级用法：使用v-model双向绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span>&#123;</span><br><span class="line">                <span class="attr">count</span>:<span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &lt;test v-model=&quot;count&quot;/&gt;`</span></span><br><span class="line">        </span><br><span class="line">    &#125;);</span><br><span class="line">    app.component(<span class="string">&#x27;test&#x27;</span>,&#123;</span><br><span class="line">        <span class="attr">props</span>:[<span class="string">&#x27;modelValue&#x27;</span>],</span><br><span class="line">        <span class="attr">methods</span>:&#123;</span><br><span class="line">            <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.$emit(<span class="string">&#x27;update:modelValue&#x27;</span>,<span class="built_in">this</span>.modelValue+<span class="number">3</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">template</span>:<span class="string">`&lt;div @click=&quot;handleClick&quot;&gt;&#123;&#123;modelValue&#125;&#125;&lt;/div&gt;`</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="动态组件">动态组件</h2><p>使用component标签实现动态切换</p><h2 id="同步组件异步组件">同步组件，异步组件</h2><p>同步组件可以直接加载，异步组件会等一会加载</p><h1 id="插槽">插槽</h1><p>使用子组件的时候想传入一个dom元素可以使用slot</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">            &lt;test&gt;</span></span><br><span class="line"><span class="string">                &lt;div&gt;提交&lt;/div&gt;    </span></span><br><span class="line"><span class="string">            &lt;/test&gt;</span></span><br><span class="line"><span class="string">            &lt;test&gt;</span></span><br><span class="line"><span class="string">                &lt;button&gt;提交&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/test&gt;</span></span><br><span class="line"><span class="string">            `</span></span><br><span class="line">        </span><br><span class="line">    &#125;);</span><br><span class="line">    app.component(<span class="string">&#x27;test&#x27;</span>,&#123;</span><br><span class="line">        <span class="attr">methods</span>:&#123;</span><br><span class="line">            <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                alert(<span class="number">123</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;input /&gt; </span></span><br><span class="line"><span class="string">            &lt;span @click=&quot;handleClick&quot;&gt;  </span></span><br><span class="line"><span class="string">            &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">            &lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;`</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>可以传入另一个子组件</p><p>可以设定默认值</p><h2 id="具名插槽">具名插槽</h2><p>把插槽分开，每个片段用template包裹，template上加上v-slot:"name"或者#name</p><p>子组件内部使用的时候slot加name=“”属性</p><h2 id="作用域插槽">作用域插槽</h2><p>子组件渲染的内容由父组件决定的时候使用。父组件可以调用子组件的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">            &lt;list v-slot=&quot;&#123;item&#125;&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;div&gt;&#123;&#123;item&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/list&gt;</span></span><br><span class="line"><span class="string">            `</span></span><br><span class="line">        </span><br><span class="line">    &#125;);</span><br><span class="line">    app.component(<span class="string">&#x27;list&#x27;</span>,&#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span>&#123;</span><br><span class="line">                <span class="attr">list</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;slot v-for=&quot;item in list&quot; :item=&quot;item&quot;/&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;`</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h1 id="vue-动画效果">Vue 动画效果</h1><h2 id="实现基础过渡和动画">实现基础过渡和动画</h2><h3 id="动画">动画</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">        @keyframes leftToright &#123;</span><br><span class="line">            <span class="number">0</span>%&#123;</span><br><span class="line">                <span class="attr">transform</span>: translateX(-100px);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="number">50</span>%&#123;</span><br><span class="line">                <span class="attr">transform</span>: translateX(-50px);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="number">100</span>%&#123;</span><br><span class="line">                <span class="attr">transform</span>: translateX(0px);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .animation&#123;</span><br><span class="line">            <span class="attr">animation</span>: leftToright 3s;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"><span class="keyword">let</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">animate</span>:&#123;</span><br><span class="line">                    <span class="attr">animation</span>:<span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">methods</span>:&#123;</span><br><span class="line">            <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.animate.animation = !<span class="built_in">this</span>.animate.animation</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;    </span></span><br><span class="line"><span class="string">        &lt;div :class=&quot;animate&quot;&gt;hello world&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;button @click=&quot;handleClick&quot;&gt;切换&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">        </span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="过渡">过渡</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.transition&#123;</span><br><span class="line">            <span class="attr">transition</span>: 3s background-color ease;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .green&#123;</span><br><span class="line">            <span class="attr">background</span>: green;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .blue&#123;</span><br><span class="line">            <span class="attr">background</span>: blue;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">let</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">animate</span>:&#123;</span><br><span class="line">                    <span class="attr">transition</span>:<span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">blue</span>:<span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">green</span>:<span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">methods</span>:&#123;</span><br><span class="line">            <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.animate.blue = !<span class="built_in">this</span>.animate.blue</span><br><span class="line">                <span class="built_in">this</span>.animate.green = !<span class="built_in">this</span>.animate.green</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;    </span></span><br><span class="line"><span class="string">        &lt;div :class=&quot;animate&quot;&gt;hello world&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;button @click=&quot;handleClick&quot;&gt;切换&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">        </span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h2 id="实现单元素组件动画">实现单元素组件动画</h2><h3 id="使用transition标签">使用transition标签</h3><p>css：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.v-enter-from</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-enter-to</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-enter-active</span>&#123;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">2s</span> opacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.v-leave-from</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-leave-to</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-leave-active</span>&#123;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">2s</span> opacity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> app = Vue.createApp(&#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">show</span>:<span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.show = !<span class="built_in">this</span>.show</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;    </span></span><br><span class="line"><span class="string">            &lt;transition&gt;</span></span><br><span class="line"><span class="string">            &lt;div v-if=&quot;show&quot;&gt;hello world&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/transition&gt;</span></span><br><span class="line"><span class="string">        &lt;button @click=&quot;handleClick&quot;&gt;切换&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>动画效果实现也一样，只是v-enter-active里opacity改成动画keyframe名称即可。</p><p>在transition添加name=‘aaa'后 v-enter-active就需要改成aaa-enter-active，v只是默认名称。</p><h3 id="自定义类名">自定义类名</h3><p>可以在<code>transition</code>标签上添加<code>enter-active-class=""  leave-active-class=""</code></p><p>里边填入类名，如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bye</span>&#123;</span><br><span class="line">  <span class="attribute">animation</span>:shake <span class="number">3s</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hello</span>&#123;</span><br><span class="line">  <span class="attribute">animation</span>:shake <span class="number">3s</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="列表的动画效果">列表的动画效果</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;script src=&quot;https://unpkg.com/vue@next&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .v-enter-from&#123;</span><br><span class="line">            opacity: 0;</span><br><span class="line">            transform: translateY(30px);</span><br><span class="line">        &#125;</span><br><span class="line">        .v-enter-to&#123;</span><br><span class="line">            opacity: 1;</span><br><span class="line">            transform: translateY(0);</span><br><span class="line">            /* 从下往上的动画效果 */</span><br><span class="line">        &#125;</span><br><span class="line">        .v-enter-active&#123;</span><br><span class="line">            transition: all .5s ease-in;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .v-move&#123;</span><br><span class="line">            /* 其他元素移动时的移动效果 */</span><br><span class="line">            transition: all .5s ease-in;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .list-item&#123;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            margin-right: 10px;</span><br><span class="line">        &#125;</span><br><span class="line">        .v-leave-from&#123;</span><br><span class="line">            opacity: 1;</span><br><span class="line">            transform: translateY(0);</span><br><span class="line">        &#125;</span><br><span class="line">        .v-leave-to&#123;</span><br><span class="line">            opacity: 0;</span><br><span class="line">            transform: translateY(30px);</span><br><span class="line">        &#125;</span><br><span class="line">        .v-leave-active&#123;</span><br><span class="line">            transition:all .5s ease-out;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let app = Vue.createApp(&#123;</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                list:[1,2,3],</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            handleClick()&#123;</span><br><span class="line">                this.list.unshift(Math.floor(Math.random()*100));</span><br><span class="line">            &#125;,</span><br><span class="line">            handleremove(i)&#123;</span><br><span class="line">                this.list.splice(i,1)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template:`</span><br><span class="line">        &lt;div&gt;    </span><br><span class="line">            &lt;transition-group&gt;</span><br><span class="line">                &lt;span name=&quot;list&quot; class=&quot;list-item&quot; v-for=&quot;(item,index) in list&quot; :key=&quot;item&quot; @click=&quot;handleremove(index)&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/transition-group&gt;</span><br><span class="line">        &lt;button @click=&quot;handleClick&quot;&gt;增加&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        `</span><br><span class="line">        </span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    let vm = app.mount(&#x27;#root&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="状态动画">状态动画</h2><p>让某些数据有缓慢变化的过程，应用如svg</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">number</span>:<span class="number">1</span>,</span><br><span class="line">                <span class="attr">animatenumber</span>:<span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">methods</span>:&#123;</span><br><span class="line">            <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.number = <span class="number">10</span>;</span><br><span class="line">                <span class="keyword">let</span> currentNumber = <span class="built_in">this</span>.animatenumber;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">this</span>.animatenumber &lt; <span class="built_in">this</span>.number)&#123;</span><br><span class="line">                    <span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                    currentNumber++;</span><br><span class="line">                    <span class="built_in">this</span>.animatenumber = currentNumber;</span><br><span class="line">                    <span class="keyword">if</span>(currentNumber&gt;=<span class="built_in">this</span>.number)&#123;</span><br><span class="line">                        <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,<span class="number">100</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br><span class="line">            </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;    </span></span><br><span class="line"><span class="string">        &lt;div&gt;&#123;&#123;animatenumber&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;button @click=&quot;handleClick&quot;&gt;增加&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">        </span><br></pre></td></tr></table></figure><h1 id="高级语法">高级语法</h1><h2 id="mixin">mixin</h2><ul><li>组件data优先级高于mixin优先级</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mixin 混入</span></span><br><span class="line">    <span class="keyword">const</span> mixin = &#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">number</span>:<span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>不能用于子组件，需要使用全局mixin(不推荐使用)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.mixin(&#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">number</span>:<span class="number">2</span>,</span><br><span class="line">                <span class="attr">count</span>:<span class="number">222</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器解析url</title>
      <link href="/2021/10/12/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E6%9E%90url/"/>
      <url>/2021/10/12/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E6%9E%90url/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>1、URL解析：主要有地址解析（合法、编码、内容判断） 、 HSTS 、 访问限制操作、安全检查操作、缓存检查操作等。</p><p>2、DNS查询 ： 浏览器缓存——&gt; 操作系统缓存——&gt;路由器缓存——&gt;ISP DNS 缓存 ——&gt; 根域名服务器查询。</p><p>3、TCP连接（四层封装）</p><p>4、处理请求:HTTP解析（域名、路径、方法等）、重定向、URL重写等</p><p>5、浏览器接受响应：资源分析、根状态码做事、压缩问题、响应</p><p>6、渲染页面：</p><p>HTML解析</p><pre><code>                  第一步：解码（UTF-8或者GB2312等等等）解析成HTML。                   第二步：预解析（识别请求资源比如imges中SRC属性加入请求队列。）                  第三步：并行操作：符号化，构建树、解标签、创DOM节点</code></pre><p>CSS解析</p><pre><code>                第一步：从左到右解析选择器进行判断等               举例：div    .p   &#123;    &#125;   判断P的父元素是不是div</code></pre><p>渲染树</p><p>7、断开链接、TCP四次挥手。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>未知宽高元素居中</title>
      <link href="/2021/10/09/%E6%9C%AA%E7%9F%A5%E5%AE%BD%E9%AB%98%E5%85%83%E7%B4%A0%E5%B1%85%E4%B8%AD/"/>
      <url>/2021/10/09/%E6%9C%AA%E7%9F%A5%E5%AE%BD%E9%AB%98%E5%85%83%E7%B4%A0%E5%B1%85%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>有两种方法</p><ol type="1"><li><p>使用flex</p><p>父元素：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line"><span class="attribute">background</span>: skyblue;</span><br><span class="line"><span class="comment">/* position: relative; */</span></span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="comment">/* align-content: center; */</span></span><br><span class="line"><span class="attribute">justify-content</span>: center;</span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br></pre></td></tr></table></figure><p>子元素不用设置</p></li><li><p>使用transform</p><p>父元素：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line"><span class="attribute">background</span>: skyblue;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br></pre></td></tr></table></figure><p>子元素：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line"><span class="attribute">word-break</span>: break-all;</span><br><span class="line"><span class="attribute">background-color</span>: deepskyblue;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类</title>
      <link href="/2021/09/01/%E7%B1%BB/"/>
      <url>/2021/09/01/%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<figure><img data-src="http://img.zhaoxuanlang.cn/image-20210901165330991.png" alt="image-20210901165330991" /><figcaption aria-hidden="true">image-20210901165330991</figcaption></figure><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>forEach系函数用法</title>
      <link href="/2021/08/27/forEach%E7%B3%BB%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/"/>
      <url>/2021/08/27/forEach%E7%B3%BB%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="简述foreachmapeverysome和filter的用法">简述forEach()、map()、every()、some()和filter()的用法</h1><span id="more"></span><h2 id="一foreach用于遍历数组无返回值">一、forEach()，用于遍历数组，无返回值</h2><p>这里先给出一个数组（以下例子通用）：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">-2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">-5</span>];</span><br></pre></td></tr></table></figure><p>然后我要做事情的就是，将数组中的每一项翻倍。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,<span class="keyword">array</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">array</span>[index] = item * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(arr);   <span class="comment">// [2,-4,6,8,-10]</span></span><br></pre></td></tr></table></figure><p>可以看到，forEach()可以传入一个匿名函数作为参数，而该匿名函数有含有三个参数，其依次代表数组遍历时的当前元素item，数组遍历时的当前元素的索引index，以及正在遍历的数组array。有了这三个参数，可以方便我们做很多事情，比如说示例当中将每一项数组元素翻倍，这时需要用到第一个参数item。但是，仅仅只是将item乘以2可不行，我们还得将其赋值给原来的数组，这时我们就得用到后面两个参数index和array。</p><p>根据上述可知，array[index]是全等于item的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,<span class="keyword">array</span></span>)</span>&#123;</span><br><span class="line">    console.log(<span class="keyword">array</span>[index] === item);   <span class="comment">// true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="二map用于遍历数组返回处理之后的新数组">二、map()，用于遍历数组，返回处理之后的新数组</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newArr = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newArr);   <span class="comment">// [2,-4,6,8,-10]</span></span><br></pre></td></tr></table></figure><p>可以看到，该方法与forEach()的功能类似，只不过map()具有返回值，会返回一个新的数组，这样处理数组后也不会影响到原有数组。</p><h2 id="三every用于判断数组中的每一项元素是否都满足条件返回一个布尔值">三、every()，用于判断数组中的每一项元素是否都满足条件，返回一个布尔值</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isEvery = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(isEvery);   <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>可以看到，示例中是要判断数组arr中的元素是否都为正数，很显然不是，所以该方法最终返回false。</p><h2 id="四some用于判断数组中的是否存在满足条件的元素返回一个布尔值">四、some()，用于判断数组中的是否存在满足条件的元素，返回一个布尔值</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isSome = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &lt; <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(isSome);   <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>可以看到，该方法与every()类似，示例中是要判断数组arr中是否存在负数元素，很显然存在，所以该方法最终返回true。</p><h2 id="五filter用于筛选数组中满足条件的元素返回一个筛选后的新数组">五、filter()，用于筛选数组中满足条件的元素，返回一个筛选后的新数组</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> minus = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &lt; <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(minus);   <span class="comment">// [-2, -5]</span></span><br></pre></td></tr></table></figure><p>可以看到，示例中是要筛选出数组arr中的所有负数，所以该方法最终返回一个筛选后的新数组[-2, -5]。</p><p><strong>补充：</strong> 以上五大方法除了传递一个匿名函数作为参数之外，还可以传第二个参数，该参数用于指定匿名函数内的this指向，例如：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只传一个匿名函数</span></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);  <span class="comment">// window</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传两个参数</span></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);  <span class="comment">// [1, -2, 3, 4, -5]</span></span><br><span class="line">&#125;,arr);</span><br></pre></td></tr></table></figure><p><strong>兼容性：</strong> 由于以上方法均属ES5方法，所以IE8及其以下浏览器均不兼容。</p><h2 id="重点总结">重点总结：</h2><blockquote><p>① forEach()无返回值，map()和filter()返回新数组，every()和some()返回布尔值 ② 匿名函数中this指向默认为window，可通过传第二参数来更改之 ③ 五种遍历方法均为ES5方法</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七牛云绑定typora</title>
      <link href="/2021/08/23/%E4%B8%83%E7%89%9B%E4%BA%91%E7%BB%91%E5%AE%9Atypora/"/>
      <url>/2021/08/23/%E4%B8%83%E7%89%9B%E4%BA%91%E7%BB%91%E5%AE%9Atypora/</url>
      
        <content type="html"><![CDATA[<p>七牛云做图床绑定PicGo上传图片</p><span id="more"></span><p>七牛云的优势是每个月有10G的免费存储，而且服务器在国内，速度很快，上传和加载图片几乎是秒速</p><figure><img data-src="http://img.zhaoxuanlang.cn/image-20210823090911114.png" alt="image-20210823090911114" /><figcaption aria-hidden="true">image-20210823090911114</figcaption></figure><h1 id="前置工作">前置工作</h1><ol type="1"><li>需要有一个登记备案过的域名（腾讯阿里均可，需要绑定七牛云的图床。没有域名的话可以去腾讯云/阿里云申请一个，很便宜，备案大概半个月就可以完成。没有域名的话七牛云会给你一个临时的域名，但是只能用一个月。一个月后用临时域名就访问不到你的图片了）</li><li>注册七牛云账户</li></ol><h1 id="七牛云配置相关">七牛云配置相关</h1><p>首先要注册账户，这里不多说。注册完之后选择右上角的控制台进入如下页面</p><figure><img data-src="http://img.zhaoxuanlang.cn/image-20210823091246883.png" alt="image-20210823091246883" /><figcaption aria-hidden="true">image-20210823091246883</figcaption></figure><p>首先选择下方资源管理里第二个存储空间，新增一个存储空间。名称自己起一个就行，这个名称需要和他现有的其他空间不重复。需要注意这里一定要选公开！我一开始没有选公开导致上传上去的图片都加载不出来= =查了半天报错才发现是这里的问题。</p><figure><img data-src="http://img.zhaoxuanlang.cn/image-20210823091454523.png" alt="image-20210823091454523" /><figcaption aria-hidden="true">image-20210823091454523</figcaption></figure><p>新建完之后他会让你绑定域名。我们假设你已经有了腾讯云的域名，然后进行如下操作。</p><p>我建议使用加速域名，因为访问会快一些，而且因为你流量也不多，加速域名的流量根本用不完。在添加域名页面中加速域名栏要填入一个你域名的二级域名。这里也注意不要直接填入xxx.com。我一开始直接填的xxx到后边CNAME解析的时候就傻眼了。</p><figure><img data-src="http://img.zhaoxuanlang.cn/image-20210823091705146.png" alt="image-20210823091705146" /><figcaption aria-hidden="true">image-20210823091705146</figcaption></figure><p>像这样创建完成之后点复制CNAME，准备进行下一步操作</p><figure><img data-src="http://img.zhaoxuanlang.cn/image-20210823092044307.png" alt="image-20210823092044307" /><figcaption aria-hidden="true">image-20210823092044307</figcaption></figure><h1 id="腾讯云域名配置">腾讯云域名配置</h1><p>这一步很简单，直接打开你域名的控制台，点添加记录</p><p>主机记录就填你刚刚输入的二级域名的头部，比如说我刚刚写的img.xxx.com这里就填img，记录类型选CNAME，记录值粘贴你刚刚复制到那一串东西，然后确认就ok了。</p><figure><img data-src="http://img.zhaoxuanlang.cn/image-20210823092235923.png" alt="image-20210823092235923" /><figcaption aria-hidden="true">image-20210823092235923</figcaption></figure><p>然后回到七牛云，看看你刚刚配置的存储空间是不是一切正常，这里可能需要等个十分钟等他自动配置。如下图就是正常配置成功的显示。</p><figure><img data-src="http://img.zhaoxuanlang.cn/image-20210823092510888.png" alt="image-20210823092510888" /><figcaption aria-hidden="true">image-20210823092510888</figcaption></figure><p>这里有红框框出来的就是成功配置</p><figure><img data-src="http://img.zhaoxuanlang.cn/image-20210823092649657.png" alt="image-20210823092649657" /><figcaption aria-hidden="true">image-20210823092649657</figcaption></figure><h1 id="picgo的配置">Picgo的配置</h1><p>我们来到PicGo，左侧域名列表选择七牛云</p><figure><img data-src="http://img.zhaoxuanlang.cn/image-20210823092747470.png" alt="image-20210823092747470" /><figcaption aria-hidden="true">image-20210823092747470</figcaption></figure><p>这里前两个Key都可以从七牛云右上角头像-&gt;个人中心-&gt;密钥管理处获得，直接粘贴即可</p><p>存储空间名是你刚刚创建的那个的名字</p><p>访问网址是你刚刚设置的加速域名，注意前边要加http://</p><p>存储区域需要看这个<a href="%5BIMG%5Dhttp://img.zhaoxuanlang.cn/image-20210823092747470.png%5B/IMG%5D">链接</a>，里边有写每个服务器对应的区域，填入你存储空间对应的服务器代号即可</p><figure><img data-src="http://img.zhaoxuanlang.cn/image-20210823093046660.png" alt="image-20210823093046660" /><figcaption aria-hidden="true">image-20210823093046660</figcaption></figure><p>然后上传一张图片看看有没有上传成功就ok。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo进阶</title>
      <link href="/2021/08/21/hexo%E8%BF%9B%E9%98%B6/"/>
      <url>/2021/08/21/hexo%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<p>实现一些hexo的进阶操作</p><span id="more"></span><h1 id="使用next主题美化">使用next主题美化</h1><h2 id="安装主题">安装主题</h2><p>Next主题的安装方式很简单，只需要在博客主目录下执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>然后设置站点配置文件_config.yml：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>即可将我们的Hexo博客主题替换为Next主题。</p><h2 id="设置主题">设置主题</h2><p>进入到blog/themes/next目录会看到有一个_config.yml文件，打开它，每一项都有相应的注释介绍，按照自己喜好进行修改即可，这里不多介绍。</p><h1 id="设置typora自动上传图片">设置typora自动上传图片</h1><p>我用的编辑器是typora，但是在插入图片的时候默认是存在本地，这样部署到远程之后这些图片是显示不了的。一种解决方案是每张图都上传到图床然后手动插入文章，但是略显繁琐，因此需要设置让编辑器自动帮我们上传图片</p><h2 id="所需软件下载">所需软件下载</h2><p>我用的是PicGo+gitee的方式，这里如果用github就会因为网速原因有点卡。</p><p>首先下载<a href="https://github.com/Molunerfinn/PicGo/releases">PicGo</a>，下载对应自己电脑的版本即可</p><p><a href="https://imgtu.com/i/fjRO4e"><img data-src="https://z3.ax1x.com/2021/08/21/fjRO4e.png" alt="fjRO4e.png" /></a></p><p>然后解压安装balabala不谈</p><h2 id="设置picgo和gitee仓库">设置PicGo和gitee仓库</h2><p>安装好打开软件，左边菜单最下边有一个插件设置，点进去搜索gitee，应该会有三个，全安装即可，我这里全安装了但是只显示出了一个。</p><p><a href="https://imgtu.com/i/fjRHHK"><img data-src="https://z3.ax1x.com/2021/08/21/fjRHHK.png" alt="fjRHHK.png" /></a></p><p>安装好点图床设置，应该就会有gitee了</p><p><a href="https://imgtu.com/i/fjR7B6"><img data-src="https://z3.ax1x.com/2021/08/21/fjR7B6.png" alt="fjR7B6.png" /></a></p><p>这时我们需要去gitee新建一个仓库</p><p><a href="https://imgtu.com/i/fjRLND"><img data-src="https://z3.ax1x.com/2021/08/21/fjRLND.png" alt="fjRLND.png" /></a></p><p>然后还需要去获取一个token。按下图进入，点生成新令牌，名字随便起一个就可以</p><p><a href="https://imgtu.com/i/fjRqAO"><img data-src="https://z3.ax1x.com/2021/08/21/fjRqAO.png" alt="fjRqAO.png" /></a></p><p>现在需要回到PicGo设置界面，点击刚刚的Gitee图床选项，填入信息</p><blockquote><p>Owner：Gitee用户名</p><p>repo：刚刚新建的仓库名</p><p>path：可有可无，和仓库名一样就可以</p><p>token：填入你刚刚申请到的token</p></blockquote><p><a href="https://imgtu.com/i/fjRj9H"><img data-src="https://z3.ax1x.com/2021/08/21/fjRj9H.png" alt="fjRj9H.png" /></a></p><p>然后点确定。点了就行，它没有什么保存成功的提示。。</p><h2 id="设置typora">设置typora</h2><p>进入typora的设置点击图像栏，如图设置后点击验证一下</p><p><a href="https://imgtu.com/i/fjRv3d"><img data-src="https://z3.ax1x.com/2021/08/21/fjRv3d.png" alt="fjRv3d.png" /></a></p><p><a href="https://imgtu.com/i/fjRxgA"><img data-src="https://z3.ax1x.com/2021/08/21/fjRxgA.png" alt="fjRxgA.png" /></a></p><p>注意多次测试可能会验证失败。查阅PicGo.log发现提示文件已存在</p><p><a href="https://imgtu.com/i/fjRzjI"><img data-src="https://z3.ax1x.com/2021/08/21/fjRzjI.png" alt="fjRzjI.png" /></a></p><p>只需要去PicGo软件的相册内删除他测试用的两个typora图标即可。</p><p>测试成功后你向typora文章内新增图片，它会自动帮你上传并更换连接。</p><h1 id="hexo新建文章后自动打开">hexo新建文章后自动打开</h1><p>每次使用<code>hexo new xxx</code> 命令后它会在source文件夹下新建一个文章，还需要再用命令行或者手动来打开文件，同样略显繁琐，所以尝试使用node.js来完成自动化新建打开。</p><p>进入blog文件夹，新建一个目录名为scripts，在里边新建一个js文件，名字随意。</p><p>编辑这个js文件，写入以下监听事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).exec</span><br><span class="line"></span><br><span class="line">hexo.on(<span class="string">&#x27;new&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">exec(<span class="string">&#x27;open &#x27;</span>+[data.path]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里open也可以换成code（如果你用的是vscode来编辑文章），注意open后边有一个空格，不要漏了。</p><p>然后在terminal里使用<code>hexo new xxx</code>命令后他就会自动新建并打开文件辣，可以直线提升100%的效率~</p><h1 id="补充功能以增加hexo使用效率">补充功能以增加hexo使用效率</h1><p>在家目录下编辑.zshrc文件，添加以下别名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> hexo=<span class="string">&#x27;func()&#123; cd ~/study/newblog/source/_posts/ &amp;&amp; hexo $1 $2 &amp;&amp; sh new.sh &amp;&amp; cd ~&#125;;func&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> hexo-find=<span class="string">&#x27;func()&#123; cd ~/study/newblog/source/_posts/ &amp;&amp; ls|grep $1 &amp;&amp; cd ~&#125;;func&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> hexo-open=<span class="string">&#x27;func()&#123; cd ~/study/newblog/source/_posts/ &amp;&amp; open $1&#x27;</span>.md<span class="string">&#x27; &amp;&amp; cd ~&#125;;func&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> hexo-rm=<span class="string">&#x27;func()&#123; cd ~/study/newblog/source/_posts/ &amp;&amp; rm $1&#x27;</span>.md<span class="string">&#x27; &amp;&amp; cd ~&#125;;func&#x27;</span></span><br></pre></td></tr></table></figure><p>增加四个新功能：</p><ul><li>在任意目录下使用hexo 命令</li><li>使用hexo-find来搜索某一个文章</li><li>使用hexo-open打开某一篇文章（无需输入后缀）</li><li>使用hexo-rm删除某一篇文章（无需输入后缀）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数进阶</title>
      <link href="/2021/08/19/%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/"/>
      <url>/2021/08/19/%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<p><img data-src="https://gitee.com/Squirrel_01/img/raw/master/img/image-20210820104723148.png" alt="image-20210820104723148" style="zoom:50%;" /></p><span id="more"></span><h1 id="rest参数和spread语法">Rest参数和Spread语法</h1><h2 id="rest参数">Rest参数</h2><p>在函数定义时可以使用...args来用args数组收集后边所有的参数。...args后边不能再定义形参</p><p>例如，我们需要把所有的参数都放到数组 <code>args</code> 中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumAll</span>(<span class="params">...args</span>) </span>&#123; <span class="comment">// 数组名为 args</span></span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> arg <span class="keyword">of</span> args) sum += arg;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert( sumAll(<span class="number">1</span>) ); <span class="comment">// 1</span></span><br><span class="line">alert( sumAll(<span class="number">1</span>, <span class="number">2</span>) ); <span class="comment">// 3</span></span><br><span class="line">alert( sumAll(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) ); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p>我们也可以选择获取第一个参数作为变量，并将剩余的参数收集起来</p><p>下面的例子把前两个参数定义为变量，并把剩余的参数收集到 <code>titles</code> 数组中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showName</span>(<span class="params">firstName, lastName, ...titles</span>) </span>&#123;</span><br><span class="line">  alert( firstName + <span class="string">&#x27; &#x27;</span> + lastName ); <span class="comment">// Julius Caesar</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 剩余的参数被放入 titles 数组中</span></span><br><span class="line">  <span class="comment">// i.e. titles = [&quot;Consul&quot;, &quot;Imperator&quot;]</span></span><br><span class="line">  alert( titles[<span class="number">0</span>] ); <span class="comment">// Consul</span></span><br><span class="line">  alert( titles[<span class="number">1</span>] ); <span class="comment">// Imperator</span></span><br><span class="line">  alert( titles.length ); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">showName(<span class="string">&quot;Julius&quot;</span>, <span class="string">&quot;Caesar&quot;</span>, <span class="string">&quot;Consul&quot;</span>, <span class="string">&quot;Imperator&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="arguments变量">arguments变量</h2><p>有一个名为 <code>arguments</code> 的特殊的类数组对象，该对象按参数索引包含所有参数。</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert( <span class="built_in">arguments</span>.length );</span><br><span class="line">  alert( <span class="built_in">arguments</span>[<span class="number">0</span>] );</span><br><span class="line">  alert( <span class="built_in">arguments</span>[<span class="number">1</span>] );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 它是可遍历的</span></span><br><span class="line">  <span class="comment">// for(let arg of arguments) alert(arg);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依次显示：2，Julius，Caesar</span></span><br><span class="line">showName(<span class="string">&quot;Julius&quot;</span>, <span class="string">&quot;Caesar&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依次显示：1，Ilya，undefined（没有第二个参数）</span></span><br><span class="line">showName(<span class="string">&quot;Ilya&quot;</span>);</span><br></pre></td></tr></table></figure><p>但是arguments没有array的方法，因此最好用rest函数</p><h2 id="spread语法">Spread语法</h2><p>与rest参数相反，使用时在变量名前加...就可以拆出来，内部使用了迭代器的原理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">alert( [...str] ); <span class="comment">// H,e,l,l,o</span></span><br></pre></td></tr></table></figure><h3 id="用spread合并数组">用spread合并数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],b = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> arr = [...a,...b]</span><br></pre></td></tr></table></figure><h3 id="进行浅拷贝">进行浅拷贝</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arrCopy = [...arr]; <span class="comment">// 将数组 spread 到参数列表中</span></span><br><span class="line">                        <span class="comment">// 然后将结果放到一个新数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个数组中的内容相同吗？</span></span><br><span class="line">alert(<span class="built_in">JSON</span>.stringify(arr) === <span class="built_in">JSON</span>.stringify(arrCopy)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个数组相等吗？</span></span><br><span class="line">alert(arr === arrCopy); <span class="comment">// false（它们的引用是不同的）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改我们初始的数组不会修改副本：</span></span><br><span class="line">arr.push(<span class="number">4</span>);</span><br><span class="line">alert(arr); <span class="comment">// 1, 2, 3, 4</span></span><br><span class="line">alert(arrCopy); <span class="comment">// 1, 2, 3</span></span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>有一个简单的方法可以区分它们：</p><ul><li>若 <code>...</code> 出现在函数参数列表的最后，那么它就是 rest 参数，它会把参数列表中剩余的参数收集到一个数组中。</li><li>若 <code>...</code> 出现在函数调用或类似的表达式中，那它就是 spread 语法，它会把一个数组展开为列表。</li></ul><p>使用场景：</p><ul><li>Rest 参数用于创建可接受任意数量参数的函数。</li><li>Spread 语法用于将数组传递给通常需要含有许多参数的列表的函数。</li></ul><h1 id="变量作用域闭包">变量作用域，闭包</h1><h3 id="代码块">代码块</h3><p>用{}包裹的代码是一个代码块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a=<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a =<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数对象">函数对象</h2><ul><li><p>name：返回函数的名称</p></li><li><p>length：返回函数参数数量</p></li><li><p>自定义属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;Hi&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算调用次数</span></span><br><span class="line">  sayHi.counter++;</span><br><span class="line">&#125;</span><br><span class="line">sayHi.counter = <span class="number">0</span>; <span class="comment">// 初始值</span></span><br><span class="line"></span><br><span class="line">sayHi(); <span class="comment">// Hi</span></span><br><span class="line">sayHi(); <span class="comment">// Hi</span></span><br><span class="line"></span><br><span class="line">alert( <span class="string">`Called <span class="subst">$&#123;sayHi.counter&#125;</span> times`</span> ); <span class="comment">// Called 2 times</span></span><br></pre></td></tr></table></figure></li><li><p>命名函数表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sayHi = <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">who</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">`Hello, <span class="subst">$&#123;who&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>func不会被外界所知，可以在函数内进行很方便的使用。</p></li></ul><h2 id="settimeout和setinterval">setTimeout和setInterval</h2><ul><li><code>setTimeout</code> 允许我们将函数推迟到一段时间间隔之后再执行。</li><li><code>setInterval</code> 允许我们重复运行一个函数，从一段时间间隔之后开始运行，之后以该时间间隔连续重复运行该函数。</li></ul><h3 id="settimeout">setTimeout</h3><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timerId = <span class="built_in">setTimeout</span>(func|code, [delay], [arg1], [arg2], ...)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><p><code>func|code</code></p><p>想要执行的函数或代码字符串。 一般传入的都是函数。由于某些历史原因，支持传入代码字符串，但是不建议这样做。</p></li><li><p><code>delay</code></p><p>执行前的延时，以毫秒为单位（1000 毫秒 = 1 秒），默认值是 0；</p></li><li><p><code>arg1</code>，<code>arg2</code>…</p><p>要传入被执行函数（或代码字符串）的参数列表（IE9 以下不支持）</p></li></ul><p>传入函数不要加括号。</p><h4 id="setinterval">setInterval</h4><p><code>setInterval</code> 方法和 <code>setTimeout</code> 的语法相同：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timerId = <span class="built_in">setInterval</span>(func|code, [delay], [arg1], [arg2], ...)</span><br></pre></td></tr></table></figure><p>所有参数的意义也是相同的。不过与 <code>setTimeout</code> 只执行一次不同，<code>setInterval</code> 是每间隔给定的时间周期性执行。</p><p>想要阻止后续调用，我们需要调用 <code>clearInterval(timerId)</code>。</p><p>例：编写一个函数 <code>printNumbers(from, to)</code>，使其每秒输出一个数字，数字从 <code>from</code> 开始，到 <code>to</code> 结束。</p><p>使用 <code>setInterval</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printNumbers</span>(<span class="params"><span class="keyword">from</span>, to</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> current = <span class="keyword">from</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> timerId = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(current);</span><br><span class="line">    <span class="keyword">if</span> (current == to) &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(timerId);</span><br><span class="line">    &#125;</span><br><span class="line">    current++;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用例：</span></span><br><span class="line">printNumbers(<span class="number">5</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>使用嵌套的 <code>setTimeout</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printNumbers</span>(<span class="params"><span class="keyword">from</span>, to</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> current = <span class="keyword">from</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> <span class="title">go</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(current);</span><br><span class="line">    <span class="keyword">if</span> (current &lt; to) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(go, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    current++;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用例：</span></span><br><span class="line">printNumbers(<span class="number">5</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>请注意，在这两种解决方案中，在第一个输出之前都有一个初始延迟。函数在 <code>1000ms</code> 之后才被第一次调用。</p><p>如果我们还希望函数立即运行，那么我们可以在单独的一行上添加一个额外的调用，像这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printNumbers</span>(<span class="params"><span class="keyword">from</span>, to</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> current = <span class="keyword">from</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">go</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(current);</span><br><span class="line">    <span class="keyword">if</span> (current == to) &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(timerId);</span><br><span class="line">    &#125;</span><br><span class="line">    current++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  go();</span><br><span class="line">  <span class="keyword">let</span> timerId = <span class="built_in">setInterval</span>(go, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printNumbers(<span class="number">5</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><h1 id="装饰器callapply">装饰器，call/apply</h1><h2 id="缓存">缓存</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">slow</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这里可能会有重负载的 CPU 密集型工作</span></span><br><span class="line">  alert(<span class="string">`Called with <span class="subst">$&#123;x&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cachingDecorator</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cache = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cache.has(x)) &#123;    <span class="comment">// 如果缓存中有对应的结果</span></span><br><span class="line">      <span class="keyword">return</span> cache.get(x); <span class="comment">// 从缓存中读取结果</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = func(x);  <span class="comment">// 否则就调用 func</span></span><br><span class="line"></span><br><span class="line">    cache.set(x, result);  <span class="comment">// 然后将结果缓存（记住）下来</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">slow = cachingDecorator(slow);</span><br><span class="line"></span><br><span class="line">alert( slow(<span class="number">1</span>) ); <span class="comment">// slow(1) 被缓存下来了</span></span><br><span class="line">alert( <span class="string">&quot;Again: &quot;</span> + slow(<span class="number">1</span>) ); <span class="comment">// 一样的</span></span><br><span class="line"></span><br><span class="line">alert( slow(<span class="number">2</span>) ); <span class="comment">// slow(2) 被缓存下来了</span></span><br><span class="line">alert( <span class="string">&quot;Again: &quot;</span> + slow(<span class="number">2</span>) ); <span class="comment">// 和前面一行结果相同</span></span><br></pre></td></tr></table></figure><h2 id="callapply">call/apply</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func.apply(context, args)</span><br></pre></td></tr></table></figure><p>它运行 <code>func</code> 设置 <code>this=context</code>，并使用类数组对象 <code>args</code> 作为参数列表（arguments）。</p><p><code>call</code> 和 <code>apply</code> 之间唯一的语法区别是，<code>call</code> 期望一个参数列表，而 <code>apply</code> 期望一个包含这些参数的类数组对象。</p><p>方法借用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hash</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert( [].join.call(<span class="built_in">arguments</span>) ); <span class="comment">// 1,2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hash(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h1 id="函数绑定">函数绑定</h1><p>let fun1 = func.bind(context,...args)可以把函数绑定了this赋值给fun1</p><h1 id="箭头函数">箭头函数</h1><p>没有this，没有arguments</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js数据类型</title>
      <link href="/2021/08/18/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2021/08/18/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<figure><img data-src="https://www.hualigs.cn/image/611cef200e311.jpg" alt="image-20210818175151311" /><figcaption aria-hidden="true">image-20210818175151311</figcaption></figure><span id="more"></span><h1 id="map和set">Map和Set</h1><h3 id="map">map</h3><p>Key-键值对形式，类似哈希表</p><ul><li><code>new Map()</code> —— 创建 map。</li><li><code>map.set(key, value)</code> —— 根据键存储值。</li><li><code>map.get(key)</code> —— 根据键来返回值，如果 <code>map</code> 中不存在对应的 <code>key</code>，则返回 <code>undefined</code>。</li><li><code>map.has(key)</code> —— 如果 <code>key</code> 存在则返回 <code>true</code>，否则返回 <code>false</code>。</li><li><code>map.delete(key)</code> —— 删除指定键的值。</li><li><code>map.clear()</code> —— 清空 map。</li><li><code>map.size</code> —— 返回当前元素个数。</li></ul><p>如果要在 <code>map</code> 里使用循环，可以使用以下三个方法：</p><ul><li><code>map.keys()</code> —— 遍历并返回所有的键（returns an iterable for keys），</li><li><code>map.values()</code> —— 遍历并返回所有的值（returns an iterable for values），</li><li><code>map.entries()</code> —— 遍历并返回所有的实体（returns an iterable for entries）<code>[key, value]</code>，<code>for..of</code> 在默认情况下使用的就是这个。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="built_in">Object</span>.entries(obj));<span class="comment">//从obj对象创建map</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.fromEntries(map.entries()); <span class="comment">// 创建一个普通对象（plain object）(*)</span></span><br></pre></td></tr></table></figure><h3 id="set">Set</h3><p>每个键只出现一次</p><p>它的主要方法如下：</p><ul><li><code>new Set(iterable)</code> —— 创建一个 <code>set</code>，如果提供了一个 <code>iterable</code> 对象（通常是数组），将会从数组里面复制值到 <code>set</code> 中。</li><li><code>set.add(value)</code> —— 添加一个值，返回 set 本身</li><li><code>set.delete(value)</code> —— 删除值，如果 <code>value</code> 在这个方法调用的时候存在则返回 <code>true</code> ，否则返回 <code>false</code>。</li><li><code>set.has(value)</code> —— 如果 <code>value</code> 在 set 中，返回 <code>true</code>，否则返回 <code>false</code>。</li><li><code>set.clear()</code> —— 清空 set。</li><li><code>set.size</code> —— 返回元素个数。</li></ul><p><code>Map</code> 中用于迭代的方法在 <code>Set</code> 中也同样支持：</p><ul><li><code>set.keys()</code> —— 遍历并返回所有的值（returns an iterable object for values），</li><li><code>set.values()</code> —— 与 <code>set.keys()</code> 作用相同，这是为了兼容 <code>Map</code>，</li><li><code>set.entries()</code> —— 遍历并返回所有的实体（returns an iterable object for entries）<code>[value, value]</code>，它的存在也是为了兼容 <code>Map</code>。</li></ul><h3 id="另">另</h3><p>obj = Array.from(iteratable)可以从一个可迭代对象返回一个数组</p><h1 id="weakmap-and-weakset弱映射和弱集合">WeakMap and WeakSet（弱映射和弱集合）</h1><h3 id="weakmap">WeakMap</h3><ul><li>不能用原始值作为键</li><li>假如用对象作为键，但是对象被设为null时map里的键会自动删除</li></ul><p>使用案例：计数某人来的次数，当这个人退出时清空他的数据/清除缓存</p><h3 id="weakset">WeakSet</h3><ul><li>不能添加原始值</li><li>不支持size和keys方法，不可迭代</li></ul><h1 id="object.keysvaluesentries">Object.keys，values，entries</h1><ul><li>Object.keys(obj)—— 返回一个包含该对象所有的键的数组。</li><li>Object.values(obj) —— 返回一个包含该对象所有的值的数组。</li><li>Object.entries(obj) —— 返回一个包含该对象所有 [key, value] 键值对的数组。</li></ul><p>区别：（为了灵活性）</p><p><a href="https://imgtu.com/i/fTqytg"><img data-src="https://z3.ax1x.com/2021/08/18/fTqytg.png" alt="fTqytg.png" /></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>Object.keys(user) = ["name", "age"]</code></li><li><code>Object.values(user) = ["John", 30]</code></li><li><code>Object.entries(user) = [ ["name","John"], ["age",30] ]</code></li></ul><h3 id="转换对象">转换对象</h3><p>对象没有map方法，使用需要先转换成数组再转回来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> prices = &#123;</span><br><span class="line">  <span class="attr">banana</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">orange</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">meat</span>: <span class="number">4</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> doublePrices = <span class="built_in">Object</span>.fromEntries(</span><br><span class="line">  <span class="comment">// 转换为数组，之后使用 map 方法，然后通过 fromEntries 再转回到对象</span></span><br><span class="line">  <span class="built_in">Object</span>.entries(prices).map(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> [key, value * <span class="number">2</span>])</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">alert(doublePrices.meat); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><h1 id="解构赋值">解构赋值</h1><h2 id="语法">语法</h2><p><code>let &#123;prop : varName = default, ...rest&#125; = object</code></p><p>这表示属性 <code>prop</code> 会被赋值给变量 <code>varName</code>，如果没有这个属性的话，就会使用默认值 <code>default</code>。</p><p>没有对应映射的对象属性会被复制到 <code>rest</code> 对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们有一个存放了名字和姓氏的数组</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;Ilya&quot;</span>, <span class="string">&quot;Kantor&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构赋值</span></span><br><span class="line"><span class="comment">// sets firstName = arr[0]</span></span><br><span class="line"><span class="comment">// and surname = arr[1]</span></span><br><span class="line"><span class="keyword">let</span> [firstName, surname] = arr;</span><br><span class="line"></span><br><span class="line">alert(firstName); <span class="comment">// Ilya</span></span><br><span class="line">alert(surname);  <span class="comment">// Kantor</span></span><br></pre></td></tr></table></figure><h2 id="剩余的">剩余的 ‘…’</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [name1, name2, ...rest] = [<span class="string">&quot;Julius&quot;</span>, <span class="string">&quot;Caesar&quot;</span>, <span class="string">&quot;Consul&quot;</span>, <span class="string">&quot;of the Roman Republic&quot;</span>];</span><br><span class="line"></span><br><span class="line">alert(name1); <span class="comment">// Julius</span></span><br><span class="line">alert(name2); <span class="comment">// Caesar</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 请注意，`rest` 的类型是数组</span></span><br><span class="line">alert(rest[<span class="number">0</span>]); <span class="comment">// Consul</span></span><br><span class="line">alert(rest[<span class="number">1</span>]); <span class="comment">// of the Roman Republic</span></span><br><span class="line">alert(rest.length); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h2 id="默认值">默认值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [firstName, surname] = [];</span><br><span class="line"></span><br><span class="line">alert(firstName); <span class="comment">// undefined</span></span><br><span class="line">alert(surname); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认值</span></span><br><span class="line"><span class="keyword">let</span> [name = <span class="string">&quot;Guest&quot;</span>, surname = <span class="string">&quot;Anonymous&quot;</span>] = [<span class="string">&quot;Julius&quot;</span>];</span><br><span class="line"></span><br><span class="line">alert(name);    <span class="comment">// Julius（来自数组的值）</span></span><br><span class="line">alert(surname); <span class="comment">// Anonymous（默认值被使用了）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="date">Date</h1><p>new Date(year, month, date, hour, minute, second, millisecond)</p><ul><li><p><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear">getFullYear()</a></p><p>获取年份（4 位数）</p></li><li><p><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth">getMonth()</a></p><p>获取月份，<strong>从 0 到 11</strong>。</p></li><li><p><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Date/getDate">getDate()</a></p><p>获取当月的具体日期，从 1 到 31，这个方法名称可能看起来有些令人疑惑。</p></li><li><p><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Date/getHours">getHours()</a>，<a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Date/getMinutes">getMinutes()</a>，<a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Date/getSeconds">getSeconds()</a>，<a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Date/getMilliseconds">getMilliseconds()</a></p><p>获取相应的时间组件。</p></li><li><p><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Date/getDay">getDay()</a></p><p>获取一周中的第几天，从 <code>0</code>（星期日）到 <code>6</code>（星期六）。第一天始终是星期日，在某些国家可能不是这样的习惯，但是这不能被改变。</p></li></ul><p>测量函数运行时间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> start = <span class="built_in">Date</span>.now();<span class="comment">//获得起始</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) f(date1, date2);<span class="comment">//运行多次函数f</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Date</span>.now() - start;<span class="comment">//返回差值</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bench</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">let</span> date2 = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> start = <span class="built_in">Date</span>.now();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) f(date1, date2);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Date</span>.now() - start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> time1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> time2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交替运行 bench(upperSlice) 和 bench(upperLoop) 各 10 次</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  time1 += bench(diffSubtract);</span><br><span class="line">  time2 += bench(diffGetTime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert( <span class="string">&#x27;Total time for diffSubtract: &#x27;</span> + time1 );</span><br><span class="line">alert( <span class="string">&#x27;Total time for diffGetTime: &#x27;</span> + time2 );</span><br></pre></td></tr></table></figure><h1 id="json方法">JSON方法</h1><ul><li><p><code>JSON.stringify()</code> 将对象转换为 JSON。</p></li><li><p><code>JSON.parse()</code> 将 JSON 转换回对象。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迭代器</title>
      <link href="/2021/08/18/%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
      <url>/2021/08/18/%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>迭代器使对象可以在for of中使用</p><span id="more"></span><p>需要一个next方法返回{done:,value:}</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> range = &#123;</span><br><span class="line">  <span class="attr">from</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">to</span>: <span class="number">5</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. for..of 调用首先会调用这个：</span></span><br><span class="line">range[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ……它返回迭代器对象（iterator object）：</span></span><br><span class="line">  <span class="comment">// 2. 接下来，for..of 仅与此迭代器一起工作，要求它提供下一个值</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">current</span>: <span class="built_in">this</span>.from,</span><br><span class="line">    <span class="attr">last</span>: <span class="built_in">this</span>.to,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. next() 在 for..of 的每一轮循环迭代中被调用</span></span><br><span class="line">    <span class="function"><span class="title">next</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 4. 它将会返回 &#123;done:.., value :...&#125; 格式的对象</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.current &lt;= <span class="built_in">this</span>.last) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: <span class="built_in">this</span>.current++ &#125;;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在它可以运行了！</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> range) &#123;</span><br><span class="line">  alert(num); <span class="comment">// 1, 然后是 2, 3, 4, 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端听课笔记</title>
      <link href="/2021/08/14/%E5%89%8D%E7%AB%AF%E5%90%AC%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/08/14/%E5%89%8D%E7%AB%AF%E5%90%AC%E8%AF%BE%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>前端实战训练营笔记</p><span id="more"></span><h1 id="javascript基础">JavaScript基础</h1><p>Number全都用双精度浮点数表示</p><p>安全数是2^53-1以下的</p><p>toPresition(a)返回第一个不为0保留后边a位</p><p>tofixed(a)返回保留小数点后a位</p><p>原型链</p><ul><li>_proto_是隐式原型，指向构造函数原型prototype</li><li>prototype是显式原型</li><li></li></ul><h1 id="bom">BOM</h1><p>userAgent可以获取用户的硬件信息</p><p>navigation</p><ul><li>clipboard获得粘贴的信息</li><li>keyboard是键盘相关</li><li>geolocation定位</li></ul><p>indexedDB</p><h3 id="浏览器提供的数据库">浏览器提供的数据库</h3><blockquote><p>Cookie：4kb</p><p>LocalStorage:2.5m-10mb</p><p>indexedDB:无限</p></blockquote><h3 id="filereader">Filereader</h3><blockquote><p>文件操作</p></blockquote><h3 id="生成随机数">生成随机数</h3><blockquote><p>使用window.crypto.getRandomValues()arr</p><p>或Math.random()</p></blockquote><h3 id="图片懒加载">图片懒加载</h3><blockquote><p>可以用parent scroll</p><p>还有IntersectionObserver方法</p></blockquote><h1 id="css">CSS</h1><h3 id="盒模型">盒模型</h3><blockquote><p>从外往里border，margin，content，padding</p></blockquote><p>flex</p><p>grid</p><h1 id="底层技术">底层技术</h1><h3 id="浏览器缓存">浏览器缓存</h3><blockquote><p>缓存顺序</p></blockquote><h3 id="浏览器渲染">浏览器渲染</h3><blockquote><p>async和defer</p><p>async加载好后直接执行</p></blockquote><h1 id="正则表达式">正则表达式</h1>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>秋招面试记录</title>
      <link href="/2021/08/13/%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/08/13/%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>面试过的各大厂面经</p><span id="more"></span><h1 id="字节">字节</h1><ul><li>html标签类型</li><li>meta作用</li><li>css盒模型</li><li>用js向页面添加一个元素</li><li>算法题：扁平化数组</li><li>实现一个js函数A，传入一个带参数的函数B，实现用参数调用A实现B里的功能</li><li>向刚刚添加的a标签添加点击事件</li><li>如果一次性添加上千个a标签有没有性能优化方案</li><li>如何给某ul下上千个li都添加鼠标点击事件，有没有优化方案</li><li>git都有哪几个存储区，都是干什么的</li><li>git实现xxx功能的代码（xxx忘了具体是什么了。。）</li></ul><h1 id="阿里">阿里</h1><ul><li>先自我介绍</li><li>针对我的实习问了一些关于做了什么软件，我干了什么之类的问题</li><li>html标签，meta作用</li><li>做过移动端没，移动端meta作用？（忘了具体问题）</li><li>讲一讲css选择器</li><li>position类型，具体区别</li><li>css盒模型</li><li>js的基本类型都有什么</li><li>js里this指针怎么判断指向（我回答谁调用指向谁）追问箭头函数的情况下指向谁</li><li>js如何实现跨域</li><li>接触过代码打包吗</li><li>简述一个域名从你发出到打开都经历了什么</li><li>前端的性能优化方法</li></ul><h1 id="腾讯">腾讯</h1><ul><li>先自我介绍</li><li>针对自我介绍问了项目具体技术栈，我做了啥</li><li>针对简历<ul><li>个人博客最新发布的两个算法题解，第一个问我怎么想的，就针对js语言有没有其他更简单的实现方式（数组直接变数字加一）,说说时间复杂度，不用while的话解决方法（递归）递归的条件说一下</li><li>第二个题解说说思路，我就blbl说思路，然后说其他的解决方法等等</li><li>还有很多简历上其他的，基本上写过的都问了</li></ul></li><li>用js去除一个字符中所有空格（replaceall）不用replaceall呢（replace加正则表达式）还有别的吗（slice）</li><li>出了六道题在线做题<ul><li>纯css实现三角形</li><li>js实现typeof</li><li>递归算法</li><li>跨域</li><li>Css布局方式</li><li>url从输入到显示出画面都经历哪几步<ul><li>我写了三次握手，让展开讲讲blbl</li><li>为什么是三次，两次呢？</li><li>数组是怎么传输过来的（tcp blbl）</li></ul></li></ul></li><li>简历有写数据库，如何给一个表有id和成绩，求平均成绩最好的那个</li><li>他自己介绍了一下部门</li><li>有什么问题</li></ul><h1 id="好未来">好未来</h1><ul><li><p>先自我介绍</p></li><li><p>css部分</p><ul><li>左右固定中间可变怎么实现</li><li>上边用flex，flex具体横向的属性叫什么</li><li>transform这个属性是干啥的（说了transit）</li><li>如何使用transit实现右移100px</li><li>如何用选择器实现table偶数行底色变红</li><li>选择器都有哪些</li></ul></li><li><p>js部分</p><ul><li><p>js基本类型</p></li><li><p>ES6新增了什么类型</p></li><li><p>typeof用法，typeof null/undefined/array各自返回什么</p></li><li><p>如何区分null 和 array</p></li><li><p>如何获得一个元素的种类</p><blockquote><p><strong>Object.prototupe.toString.call(a)</strong></p></blockquote></li><li><p>假设有两个元素，一个对象一个数组，不知道种类前提如何遍历（用Array.isarray()判断出是数组然后进行for循环）</p></li><li><p>除了for循环还有什么方法能遍历数组（map）</p></li><li><p>map和foreach有什么区别</p></li><li><p>数组都有什么方法</p></li><li><p>怎么遍历对象（for in）</p></li><li><p>ES6新增了for of，怎么用</p></li><li><p>对象可以用for of吗</p></li><li><p>假设现在给一个图片的url，如何创建一个img标签，给他设置url并且添加到body后边</p><ul><li>需要考虑url是否能用</li></ul></li><li><p>说说事件捕获和事件冒泡</p></li><li><p>_.proto. 和 prototype的区别，写一个例子来表示谁指向谁</p></li></ul></li><li><p>网络部分</p><ul><li>304代表什么，与200有什么区别</li></ul></li></ul><h1 id="小黑盒实习">小黑盒（实习）</h1><ul><li>js ES5数据类型？ES6新增了什么类型？</li><li>用map，set和new object创建对象的区别</li><li>var和let的区别</li><li>给代码说结果</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure><ul><li>css如何让元素居中？<ul><li>行内元素用text-align</li><li>块级元素如何垂直居中（设top）</li><li>块级不确定高度元素垂直居中（上述加transform:-50%且无height）</li></ul></li><li>用css创建三角形，原理？</li><li>说说css盒模型，IE盒模型</li><li>用css画一个大小为父元素宽度一半的正方形</li><li>transition和animation区别</li><li>css如何实现动画</li></ul><h1 id="一些笔试题">一些笔试题</h1><ul><li><p>如何实现add(1)(2)(3)...</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = [...arg];</span><br><span class="line">  _add = <span class="function"><span class="keyword">function</span> (<span class="params">...innerArg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (innerArg.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> a.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123; <span class="keyword">return</span> a + b &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      [].push.apply(a, innerArg)</span><br><span class="line">      <span class="keyword">return</span> _add;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> _add</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)()<span class="comment">//6</span></span><br></pre></td></tr></table></figure></li><li><p>如何实现数组扁平化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">result, item</span>)=&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> result.concat(<span class="built_in">Array</span>.isArray(item) ? flatten(item) : item);</span><br><span class="line">    &#125;, []);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.toString().split(<span class="string">&#x27;,&#x27;</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Number</span>(item);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.join(<span class="string">&#x27;,&#x27;</span>).split(<span class="string">&#x27;,&#x27;</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">parseInt</span>(item);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="美团">美团</h1><ul><li>自我介绍</li><li>为什么想干前端</li><li>js数据类型<ul><li>怎么区分的基本类型和引用类型</li></ul></li><li>js this指针，call，bind</li><li>深拷贝</li><li>算法：链表反转</li><li>promise</li><li>网络302和304都代表什么</li><li>css如何实现水平垂直居中</li><li>vue框架原理</li></ul><h1 id="蒸汽记忆">蒸汽记忆</h1><h2 id="一面">一面：</h2><ul><li>js数据类型</li><li>Typeof(NaN)输出什么</li><li>null和undefined区别</li><li>软件设计模式有哪些</li></ul><h2 id="二面">二面：</h2><ul><li>求平方根</li><li>力扣第一题两数之和</li></ul><h1 id="春招">春招</h1><h2 id="字节-1">字节</h2><ul><li><p>用nodejs读4G大文件的方法</p></li><li><p>js多线程的方式有哪些</p></li><li><p>如何控制多线程的进度</p></li><li><p>进程和线程的区别</p></li><li><p>进程间通信，线程间通信</p></li><li><p>管程是什么</p></li><li><p>Http2 和以前的有什么区别</p></li><li><p>js数据类型</p></li><li><p>哪些数据类型是保存在堆空间，栈空间</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 秋招 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>66-加一</title>
      <link href="/2021/08/12/66-%E5%8A%A0%E4%B8%80/"/>
      <url>/2021/08/12/66-%E5%8A%A0%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p>给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。</p><p>最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。</p><p>你可以假设除了整数 0 之外，这个整数不会以零开头。</p><p>示例 1：</p><p>输入：digits = [1,2,3] 输出：[1,2,4] 解释：输入数组表示数字 123。 示例 2：</p><p>输入：digits = [4,3,2,1] 输出：[4,3,2,2] 解释：输入数组表示数字 4321。 示例 3：</p><p>输入：digits = [0] 输出：[1]</p><span id="more"></span><h3 id="解题思路">解题思路</h3><p>while内加一和进位</p><p>若不是全9就在while里输出，若是全9就在前边加一个1</p><h3 id="代码">代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">digits</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> plusOne = <span class="function"><span class="keyword">function</span>(<span class="params">digits</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> last = digits.length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(last&gt;=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(digits[last]!=<span class="number">9</span>)&#123;</span><br><span class="line">            digits[last]+=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> digits;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            digits[last]=<span class="number">0</span>;</span><br><span class="line">            last--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>].concat(digits);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> easy </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>合并两个有序数组</title>
      <link href="/2021/08/12/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
      <url>/2021/08/12/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。</p><p>初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。你可以假设 nums1 的空间大小等于 m + n，这样它就有足够的空间保存来自 nums2 的元素。</p><p>示例 1：</p><p>输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3 输出：[1,2,2,3,5,6] 示例 2：</p><p>输入：nums1 = [1], m = 1, nums2 = [], n = 0 输出：[1]</p><span id="more"></span><p>思路：用双指针逆向向nums1从后往前添加两个数组里大的元素，需要注意最外边的循环mn都是大于等于0，因为等于0的时候说明还有一个元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">m</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span> </span>Do not return anything, modify nums1 in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span> (<span class="params">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> last = m-- + --n;</span><br><span class="line">    <span class="keyword">while</span> (n&gt;=<span class="number">0</span>||m&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            nums1[last--] = nums1[m--];</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(m&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            nums1[last--] = nums2[n--];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums1[m] &gt;= nums2[n]) &#123;</span><br><span class="line">            nums1[last--] = nums1[m--];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nums1[last--] = nums2[n--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> easy </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>page和hexo搭建自己的博客</title>
      <link href="/2021/08/11/page%E5%92%8Chexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/08/11/page%E5%92%8Chexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>之前用腾讯云的主机和wordpress建站，但是由于主机到期，所以打算换一个平台，找到了免费的github page</p><span id="more"></span><p>github page虽然免费，但是不像vps那么强大，他只支持静态博客的搭建。没有数据库支持，更新文章需要使用git手动增量上传。博客生成器我用的是hexo，当然也有其他的解决方案。</p><ol type="1"><li><p>前置工作</p><ul><li>需要电脑有安装git</li><li>安装node.js</li><li>注册github账户</li><li>（非必选）域名</li><li>（非必选）markdown编辑器（推荐typora，vscode也能用而且相关插件很强大）</li></ul></li><li><p>在本地安装hexo</p><p>打开控制台，输入以下代码</p><blockquote><p>npm install hexo -g</p><p>npm install hexo-server -g</p></blockquote><p>然后新建hexo项目</p><blockquote><p>hexo init blog</p><p>cd blog</p><p>npm install</p><p>hexo s</p></blockquote><p>等他提示打开localhost就可以看到博客已经打开了，ctrl/control+c可以关闭</p><p>这时为了下边需要不要关terminal，还在blog目录下安装deploy-git</p><blockquote><p>npm install hexo-deployer-git --save</p></blockquote></li><li><p>配置</p><p>在blog文件夹中找一个叫做_config.yml的文件，打开它</p><p>目前需要改的只有最开头Site部分，按照自己情况写标题作者什么的。</p><p>然后打开github，新建一个仓库</p><p><img data-src="https://www.hualigs.cn/image/611cef5f7cb07.jpg" alt="image-20210818181723781" style="zoom:50%;" /></p><p>在下一级新建一个仓库，名称填xxx.github.io，如</p><p><a href="https://imgtu.com/i/fT5WdJ"><img data-src="https://z3.ax1x.com/2021/08/18/fT5WdJ.md.png" alt="fT5WdJ.md.png" /></a></p><p>公开或者私密看你自己心情，然后创建</p><p>再回到刚刚那个yml配置文件，拉到最下边deploy位置，按这个格式填入你刚刚创建的仓库信息然后保存文件。</p><blockquote><p>deploy:</p><p>type: git</p><p>repository: https://github.com/1982606762/1982606762.github.io.git</p><p>branch: main</p></blockquote><p>现在配置文件设置好了，只需要用terminal cd进blog文件夹使用hexo g&amp;&amp;hexo d就可以部署到远程仓库了。</p><p>等他提示Deploy done的时候可以打开github仓库页面看看有没有部署完成，部署完成在这会有个√</p><p><a href="https://imgtu.com/i/fT5fo9"><img data-src="https://z3.ax1x.com/2021/08/18/fT5fo9.md.png" alt="fT5fo9.md.png" /></a></p><p>有的话就可以用xxx.github,io访问了。</p></li><li><p>绑定自己的域名</p><p>首先需要去比如说腾讯云或者阿里云注册一个域名，便宜的大概十来块一年。</p><p>到刚刚blog文件夹下的source文件夹内新建一个叫CNAME的文件，注意文件不能有任何后缀。（mac系统新建之后如果用文本编辑器编辑他会自动添加txt后缀。。而且是隐藏的，所以需要用touch命令创建后用vim修改即可）</p><p>修改这个文件内容为你刚刚申请的域名，只包含域名即可如xxx.com</p><p>然后用terminal hexo g&amp;&amp;hexo d，等他上传之后看看github仓库的这个位置</p><p><a href="https://imgtu.com/i/fT55J1"><img data-src="https://z3.ax1x.com/2021/08/18/fT55J1.md.png" alt="fT55J1.md.png" /></a></p><p>是不是显示published at你的域名</p><p><a href="https://imgtu.com/i/fT5IRx"><img data-src="https://z3.ax1x.com/2021/08/18/fT5IRx.png" alt="fT5IRx.png" /></a></p><p>有的话这边就算设置好了，然后去域名那边设置</p><p>登录到你刚刚买域名的网站，找到控制台里的域名解析或者DNS解析之类的，里边有你刚刚买的域名。找到解析列表，点击添加记录，按照下图第二行设置即可，注意在记录值位置需要改成自己的github账户</p><p><a href="https://imgtu.com/i/fT54iR"><img data-src="https://z3.ax1x.com/2021/08/18/fT54iR.png" alt="fT54iR.png" border="0" /></a></p><p>添加完后等几分钟，等他生效。不出意外此时访问xxx.com(你的域名)就可以打开博客了。</p></li><li><p>新建文章</p><p>写文章首先需要新建，还是用terminal cd到blog目录下输入<code>hexo new 我的博文xxx</code>其中第三个字段是文章名称。</p><p>然后在blog/source/_posts目录下会多一个我的博文xxx.md的文件，用markdown编辑器打开会看到类似</p><blockquote><p>Title:</p><p>date</p><p>tags</p><p>--</p></blockquote><p>---下边就可以用markdown语句写文章，上边是一些参数，可以修改tags</p><p>写完文章后保存这个文件，然后在terminal输入<code>hexo clean</code> 之后<code>hexo g&amp;&amp;hexo d</code>就可以上传到云端。这时再打开博客就可以看到新写的文章了</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS开发学习笔记</title>
      <link href="/2021/08/11/JS%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/08/11/JS%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="margin参数数量">margin参数数量</h2><blockquote><p>margin: 20px;（上、下、左、右各20px。）</p><p>margin: 20px 40px;（上、下20px；左、右40px。）</p><p>margin: 20px 40px 60px;（上20px；左、右40px；下60px。）</p><p>margin: 20px 40px 60px 80px;（上20px；右40px；下60px；左80px。）</p></blockquote><h2 id="单独设置角度">单独设置角度</h2><p><code>border-bottom-left-radius:2px</code></p><span id="more"></span><h2 id="设置单元格内文字不溢出还有padding">设置单元格内文字不溢出还有padding</h2><blockquote><p>.right_menu_inner .module_unit{ width: 40%; left: 60%; border: 1px solid #ccc;</p><p>position: absolute;</p><p>​ padding: 6px 12px;</p><p>​ font-size: 14px;</p><p>​ line-height: 1.42857143;</p><p>​ height: 100%;</p><p>​ border-radius: 5px;</p><p>​ background-color: white;</p><p>​ overflow: scroll;</p><p>​ border-top-left-radius: 0;</p><p>​ border-bottom-left-radius: 0;</p><p>}</p><p>.right_menu_inner .module_unit::-webkit-scrollbar{</p><p>​ display: none;</p><p>}</p></blockquote><p>效果：<img data-src="/Users/zxl/Library/Containers/com.tencent.qq/Data/Library/Caches/Images/E7FA839551193991515F3BE73B5A0C73.jpg" alt="E7FA839551193991515F3BE73B5A0C73" /></p><h2 id="添加输入框后自动编辑">添加输入框后自动编辑</h2><p><em>div</em>.contentEditable=true</p><p>div.focus()</p><h2 id="css定义变量">css定义变量</h2><p><code>:root&#123;         --bianliangming:xxxxx; &#125;</code></p><p>需要前边两个横线</p><p>使用：</p><p><code>div&#123; color:div(--bianliangming,morenzhi)</code> <code>&#125;</code></p><h2 id="使用vh进行响应式开发">使用vh进行响应式开发</h2><p>vh就是viewed Height,同理还有vw就是width，他是相对目前打开的页面大小进行更改</p><blockquote><p>使用方法： 1vh就是1%</p></blockquote><h2 id="使用calc进行css计算">使用calc进行css计算</h2><blockquote><p>表达式中有“+”和“-”时，其前后必须要有空格，如"widht: calc(12%+5em)"这种没有空格的写法是错误的；</p></blockquote><blockquote><p>表达式中有“*”和“/”时，其前后可以没有空格，但建议留有空格。</p></blockquote><blockquote><p>如height:(100vh - 20px);</p></blockquote><h2 id="下方浮动的div实现">下方浮动的div实现</h2><p>只需</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span>:fixed</span><br><span class="line">buttom:<span class="number">0px</span></span><br></pre></td></tr></table></figure><p>就可以</p><h2 id="array-操作">array 操作</h2><ul><li><p>Array.replace(a,b)</p><blockquote><p>把a用b替换，a可以使用正则表达式匹配多个内容</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.replace(<span class="regexp">/\t/g</span>,<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><p>选择所有的tab换成空格</p><p>再如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.replace(<span class="regexp">/# |\n/g</span>,<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>选择形如# 和</p></blockquote></li><li><p>Array.split(a,b)</p><blockquote><p>接收两个传入参数，第一个是用什么把array分离开，第二个是可选项 分离的最大项数</p><p>例如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;How are you doing today?&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(str.split(<span class="string">&quot; &quot;</span>) + <span class="string">&quot;&lt;br /&gt;&quot;</span>)</span><br><span class="line"><span class="built_in">document</span>.write(str.split(<span class="string">&quot;&quot;</span>) + <span class="string">&quot;&lt;br /&gt;&quot;</span>)</span><br><span class="line"><span class="built_in">document</span>.write(str.split(<span class="string">&quot; &quot;</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>输出</p><figure><img data-src="/Users/zxl/Library/Application%20Support/typora-user-images/image-20210221202626935.png" alt="image-20210221202626935" /><figcaption aria-hidden="true">image-20210221202626935</figcaption></figure></blockquote></li><li><p>Array.join(a)</p></li></ul><blockquote><p>返回一个字符串。该字符串是通过把 arrayObject 的每个元素转换为字符串，然后把这些字符串连接起来，在两个元素之间插入 <em>separator</em> 字符串而生成的。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>)</span></span><br><span class="line"><span class="javascript">arr[<span class="number">0</span>] = <span class="string">&quot;George&quot;</span></span></span><br><span class="line"><span class="javascript">arr[<span class="number">1</span>] = <span class="string">&quot;John&quot;</span></span></span><br><span class="line"><span class="javascript">arr[<span class="number">2</span>] = <span class="string">&quot;Thomas&quot;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(arr.join())</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure><img data-src="/Users/zxl/Library/Application%20Support/typora-user-images/image-20210221202904663.png" alt="image-20210221202904663" /><figcaption aria-hidden="true">image-20210221202904663</figcaption></figure><ul><li><p>Array.slice(start,end)</p><blockquote><h3 id="返回值">返回值</h3><p>返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。</p><h3 id="说明">说明</h3><p>请注意，该方法并不会修改数组，而是返回一个子数组。如果想删除数组中的一段元素，应该使用方法 Array.splice()。</p><p><strong>注释：</strong>您可使用负值从数组的尾部选取元素。</p><p><strong>注释：</strong>如果 end 未被规定，那么 slice() 方法会选取从 start 到数组结尾的所有元素。</p></blockquote></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>)</span></span><br><span class="line"><span class="javascript">arr[<span class="number">0</span>] = <span class="string">&quot;George&quot;</span></span></span><br><span class="line"><span class="javascript">arr[<span class="number">1</span>] = <span class="string">&quot;John&quot;</span></span></span><br><span class="line"><span class="javascript">arr[<span class="number">2</span>] = <span class="string">&quot;Thomas&quot;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(arr + <span class="string">&quot;&lt;br /&gt;&quot;</span>)</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(arr.slice(<span class="number">1</span>) + <span class="string">&quot;&lt;br /&gt;&quot;</span>)</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(arr)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">George,John,Thomas</span><br><span class="line">John,Thomas</span><br><span class="line">George,John,Thomas</span><br></pre></td></tr></table></figure><ul><li><p>array.trim()</p><blockquote><p>去除头尾的空格</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;       Runoob        &quot;</span>;</span><br><span class="line">alert(str.trim());</span><br></pre></td></tr></table></figure><ul><li><p>Array.map()</p><blockquote><p>映射</p><p>类似于foreach</p><p>var data = [1, 2, 3, 4];</p><p>var arrayOfSquares = data.map(function (item) {</p><p>　　return item * item;</p><p>});</p><p>alert(arrayOfSquares); // [1, 4, 9, 16]</p><p>如果没有return就会把所有内容都映射成undefined</p></blockquote></li></ul><p>综合题：</p><p><img data-src="https://img-blog.csdnimg.cn/2020092411313370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTExMTM4NA==,size_16,color_FFFFFF,t_70#pic_center" /></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);fs.readFile(<span class="string">&#x27;./data.text&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;    <span class="keyword">var</span> array = data.toString().split(<span class="string">&quot;\n&quot;</span>);<span class="keyword">var</span> arr = []<span class="keyword">var</span> temp =[]<span class="keyword">for</span>(i <span class="keyword">in</span> array) &#123;    arr[i]=array[i].split(<span class="string">&#x27;,&#x27;</span>);    temp[i] = arr[i]    arr[i] = temp[i].join().trim().replace(<span class="regexp">/\s+/ig</span>,<span class="string">&quot; &quot;</span>).split(<span class="string">&quot; &quot;</span>)&#125;<span class="built_in">console</span>.log(<span class="string">&#x27;arr&#x27;</span>,arr);&#125;);</span><br></pre></td></tr></table></figure><h2 id="给console.log加颜色">给console.log加颜色</h2><p>使用npm下载colors</p><p>用法：colors.xxx.xxx(text)</p><p>支持：</p><blockquote><p>https://www.npmjs.com/package/colors</p></blockquote><h2 id="获得文件扩展名">获得文件扩展名</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)path.extname(<span class="string">&#x27;index.html&#x27;</span>)<span class="comment">// returns&#x27;.html&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="获得文件名">获得文件名</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.replace(<span class="regexp">/\.[^/.]+$/</span>, <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="nodejs控制台输入流">nodejs控制台输入流</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">&#x27;readline&#x27;</span>).createInterface(&#123; <span class="attr">input</span>: process.stdin, <span class="attr">output</span>: process.stdout&#125;);readline.question(<span class="string">&#x27;Who are you?&#x27;</span>, <span class="function"><span class="params">name</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">`Hey there <span class="subst">$&#123;name&#125;</span>!`</span>); readline.close();&#125;);</span><br></pre></td></tr></table></figure><p>用JQ实现左右侧的滑动标签</p><p>利用jq的animate实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">id</span>=<span class="string">&quot;right_hide&quot;</span>&gt;</span>                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-forward&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span>                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right_show&quot;</span> <span class="attr">class</span>=<span class="string">&quot;right_show&quot;</span>&gt;</span>显示新建栏<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-backward&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;                $(<span class="string">&quot;#right_hide&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;                    $(<span class="string">&quot;#right1&quot;</span>).animate(&#123; <span class="attr">right</span>: <span class="string">&#x27;-288px&#x27;</span> &#125;);                    $(<span class="string">&quot;#right_show&quot;</span>).delay(<span class="number">500</span>).animate(&#123; <span class="attr">right</span>: <span class="string">&#x27;0&#x27;</span> &#125;);                    <span class="keyword">if</span> ($(<span class="string">&quot;#left1&quot;</span>).css(<span class="string">&quot;left&quot;</span>) != <span class="string">&quot;0px&quot;</span>) &#123;                        $(<span class="string">&quot;.canvasall&quot;</span>).css(<span class="string">&quot;width&quot;</span>, <span class="string">&quot;calc(100% - 60px)&quot;</span>);                        $(<span class="string">&quot;.top_select_bar&quot;</span>).css(<span class="string">&quot;width&quot;</span>, <span class="string">&quot;calc(100% - 60px)&quot;</span>);                    &#125; <span class="keyword">else</span> &#123;                        $(<span class="string">&quot;.canvasall&quot;</span>).css(<span class="string">&quot;width&quot;</span>, <span class="string">&quot;calc(80% - 30px)&quot;</span>);                        $(<span class="string">&quot;.top_select_bar&quot;</span>).css(<span class="string">&quot;width&quot;</span>, <span class="string">&quot;calc(80% - 30px)&quot;</span>);                    &#125;                &#125;);                $(<span class="string">&quot;#right_show&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;                    $(<span class="string">&quot;#right_show&quot;</span>).animate(&#123; <span class="attr">right</span>: <span class="string">&#x27;-30px&#x27;</span> &#125;);                    $(<span class="string">&quot;#right1&quot;</span>).delay(<span class="number">500</span>).animate(&#123; <span class="attr">right</span>: <span class="string">&#x27;0&#x27;</span> &#125;);                    <span class="keyword">if</span> ($(<span class="string">&quot;#left1&quot;</span>).css(<span class="string">&quot;left&quot;</span>) != <span class="string">&quot;0px&quot;</span>) &#123;                        $(<span class="string">&quot;.canvasall&quot;</span>).css(<span class="string">&quot;width&quot;</span>, <span class="string">&quot;calc(100% - 318px)&quot;</span>);                        $(<span class="string">&quot;.top_select_bar&quot;</span>).css(<span class="string">&quot;width&quot;</span>, <span class="string">&quot;calc(100% - 318px)&quot;</span>);                    &#125; <span class="keyword">else</span> &#123;                        $(<span class="string">&quot;.canvasall&quot;</span>).css(<span class="string">&quot;width&quot;</span>, <span class="string">&quot;calc(80% - 288px)&quot;</span>);                        $(<span class="string">&quot;.top_select_bar&quot;</span>).css(<span class="string">&quot;width&quot;</span>, <span class="string">&quot;calc(80% - 288px)&quot;</span>);                    &#125;                &#125;);&#125;);</span><br></pre></td></tr></table></figure><p>原理就是下边遮盖一层，点击后让上边这层向左/右滑走，下边那层滑入即可。</p><h2 id="实现可拖动div">实现可拖动div</h2><p>首先在需要缩放的div旁边实现一个小div</p><h2 id="js深拷贝复制element">js深拷贝复制element</h2><p><code>var newnode = oldnode.clone(true)</code></p><p>true参数表示克隆节点所有后代</p><h2 id="html实现滑块">html实现滑块</h2><p>用h5自带的input就可以实现</p><p><code>&lt;input type="range" min="10" max="300" value="100" step="10" οnchange="showValue(this.value)" style=""&gt;</code></p><p>然后只需要写个showValue函数就可以修改值</p><h2 id="设置某个div滚动条位置">设置某个div滚动条位置</h2><p><code>先给div设置一个id然后使用document.getElementbyid.scroll(x,y)调整</code></p><blockquote><p>其中xy可以用ll.scrollWidth/ll.scrollHeight获得最大值</p></blockquote><h2 id="哈希表map用法">哈希表/map用法</h2><blockquote><p>1，js创建map对象</p><p>var map = new Map();</p><p>2.将键值对放入map对象</p><p>map.set("key",value)</p><p>map.set("key1",value1)</p><p>map.set("key2",value2)</p><p>3.根据key获取map值</p><p>map.get(key)</p><p>4.删除map指定对象</p><p>delete map[key]</p><p>或</p><p>map.delete(key)</p><p>5.循环遍历map</p><p>map.</p><p>forEach(function(key){ 　　console.log("key",key) //输出的是map中的value值</p><p>})</p></blockquote><h2 id="js取整">js取整</h2><blockquote><p>只保留整数 parseInt(1.111)</p></blockquote><h2 id="css渐变过渡动画">css渐变过渡动画</h2><blockquote><p>transition: property duration timing-function delay</p></blockquote><p>transition属性是个复合属性，包括以下几个子属性：</p><ul><li>transition-property ：规定设置过渡效果的css属性名称</li><li>transition-duration ：规定完成过渡效果需要多少秒或毫秒</li><li>transition-timing-function ：指定过渡函数，规定速度效果的速度曲线</li><li>transition-delay ：指定开始出现的延迟时间</li></ul><p>默认值分别为：all 0 ease 0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div &#123;  width: 100px;  height: 100px;  background-color: orange;  margin: 20px auto;  border-radius: 100%;  -webkit-transition-property: -webkit-border-radius;  transition-property: border-radius;  -webkit-transition-duration: 3s;  transition-duration: 3s;  -webkit-transition-timing-function：ease; transition-timing-function：ease; div:hover &#123;  border-radius: 0px;&#125;</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><h2 id="section">2020/07/29</h2><p>6.1对象性质</p><ul><li>数据属性直接定义，有四个属性</li><li>访问器只能用函数定义，有set和get，通常用来改一个值就改所有值</li><li>获取属性使用<code>var qq = object.getownpropertydescriptor(name,"数据名")</code></li></ul><p>6.2创建对象</p><ul><li>构造函数模式，直接写构造函数之后new即可</li><li>原型模式，使用prototype关键字，初始化定义好属性，使用时修改则会吧原型的同名属性屏蔽，可以用delete删除某一属性</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//当前使用最广泛</span><br><span class="line">function personq(name,age,job)</span><br><span class="line">&#123;</span><br><span class="line">    this.age = age;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.job = job;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">personq.prototype = </span><br><span class="line">&#123;</span><br><span class="line">    constructor:personq,</span><br><span class="line">    sayname:function()&#123;</span><br><span class="line">        alert(this.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.3原型链</p><p><img data-src="http://www.zhaoxuanlang.cn/wp-content/uploads/2020/07/image-745x1024.png" /></p><p><img data-src="http://www.zhaoxuanlang.cn/wp-content/uploads/2020/07/image-1-1024x526.png" /></p><p>继承：</p><ul><li>组合式继承</li><li>寄生组合式继承（效果最好）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">function inheritPrototype(subType,superType)&#123;</span><br><span class="line">    var prototype = Object(superType,prototype);</span><br><span class="line">    prototype.constructor = subType;</span><br><span class="line">    subType.prototype = prototype;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Supertype(name)</span><br><span class="line">&#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Supertype.prototype.sayname = function()</span><br><span class="line">&#123;</span><br><span class="line">    alert(this.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Subtype(name,age)&#123;</span><br><span class="line">    //继承属性</span><br><span class="line">    Supertype.call(this,name);</span><br><span class="line">    this.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//继承方法</span><br><span class="line">Subtype.prototype = new Supertype();</span><br><span class="line">//寄生组合式继承</span><br><span class="line">//inheritPrototype(Subtype,Supertype);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Subtype.prototype.sayage = function()&#123;</span><br><span class="line">    alert(this.age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="section-1">2020/07/30</h2><p>函数表达式可以不对函数命名，即匿名函数</p><p>在函数内部定义其他函数是闭包，用处两个</p><ul><li>创建并立刻调用函数</li><li>实现私有变量</li></ul><p>BOM</p><p>window对象：</p><ul><li>top指向最外围的框架，parent指向上一级</li><li>window可以指定窗口大小和位置</li><li>导航和打开窗口</li></ul><p>location对象：</p><ul><li>通过编程访问浏览器导航，逐段修改浏览器url</li><li>使用replace（）方法可以不能返回</li></ul><p>navigator对象：</p><ul><li>检测插件</li><li>与浏览器有关</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1NF，2NF，3NF，BCNF（3NF和BCNF的区别）</title>
      <link href="/2020/10/21/1nf%EF%BC%8C2nf%EF%BC%8C3nf%EF%BC%8Cbcnf%EF%BC%883nf%E5%92%8Cbcnf%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%89/"/>
      <url>/2020/10/21/1nf%EF%BC%8C2nf%EF%BC%8C3nf%EF%BC%8Cbcnf%EF%BC%883nf%E5%92%8Cbcnf%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li><p><strong><em><strong>候选码：若关系中的某一组属性的值能唯一地标识一个元组，而其子集不能，则称该属性组为候选码；</strong></em></strong></p></li><li><p><strong><em><strong>主码：若一个关系有多个候选码，则选定其中一个为主码；</strong></em></strong></p></li><li><p><strong><em><strong>主属性&amp;&amp;非主属性：候选码的诸属性都称为主属性，不包含在任何候选码中的属性称为非主属性；</strong></em></strong></p><span id="more"></span></li><li><p>1NF</p></li></ul><p>       满足最低要求的叫第一范式。</p><ul><li>2NF</li></ul><p>      若R属于第一范式，且每一个非主属性完全函数依赖于任何一个候选码，则R属于2NF</p><ul><li>3NF</li></ul><p>      若R中的每一个非主属性既不传递依赖于码，也不部分依赖于码，则R属于第三范式</p><ul><li>BCNF</li></ul><ol type="1"><li>所有非主属性对每一个码都是完全函数依赖；</li><li>所有的主属性对每一个不包含它的码，也是完全函数依赖；</li><li>没有任何属性完全函数依赖于非码的任何一组属性。</li></ol><ul><li>栗子1</li></ul><p>关系模式SJP(S,J,P)中，S是学生，J表示课程，P表示名次，每一个学生选修每门课程的成绩都会有一定的名次，每门课程中每一个名次只有一个学生(即没有并列名次）。</p><p>函数依赖（S,J）决定P，（J,P）决定S;</p><p>所以（S,J）与（J,P）都可以作为候选码，这两个码由两个属性组成，不存在非主属性，显然没有非主属性对码的传递和部分函数依赖，所以SJP属于第三范式；而且满足上面1,2,3三条，所以SJP属于BCNF；</p><ul><li>栗子2</li></ul><p>关系模式STJ（S,T,J）中，S是学生，T是教师，J是课程。每一教师只教一门课，每门课有若干教师，某一学生选定某课程，就得到一个固定的教师。</p><p>函数依赖：（S,J）决定T;（S,T）决定J;T决定J;</p><p>这里候选码（S,J），（S,T）；</p><p>不存在非主属性对码的部分或传递函数依赖，所以STJ属于第三范式；</p><p>但是J部分函数依赖于码（T,S），不满足第2条，所以STJ不属于BCNF；</p>]]></content>
      
      
      <categories>
          
          <category> 其他笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>模式分解是否为无损链接的算法分析</title>
      <link href="/2020/10/21/%E6%A8%A1%E5%BC%8F%E5%88%86%E8%A7%A3%E6%98%AF%E5%90%A6%E4%B8%BA%E6%97%A0%E6%8D%9F%E9%93%BE%E6%8E%A5%E7%9A%84%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
      <url>/2020/10/21/%E6%A8%A1%E5%BC%8F%E5%88%86%E8%A7%A3%E6%98%AF%E5%90%A6%E4%B8%BA%E6%97%A0%E6%8D%9F%E9%93%BE%E6%8E%A5%E7%9A%84%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>方法一：无损连接定理</p><p>关系模式R(U，F)的一个分解，ρ={R1&lt;U1,F1&gt;,R2&lt;U2,F2&gt;}具有无损连接的充分必要条件是：</p><p>U1∩U2→U1-U2 €F+ 或U1∩U2→U2 -U1€F+</p><span id="more"></span><p>方法二：算法</p><p>ρ={R1&lt;U1,F1&gt;,R2&lt;U2,F2&gt;,...,Rk&lt;Uk,Fk&gt;}是关系模式R&lt;U,F&gt;的一个分解，U={A1,A2,...,An}，F={FD1,FD2,...,FDp}，并设F是一个最小依赖集，记FDi为Xi→Alj，其步骤如下：</p><p>① 建立一张n列k行的表，每一列对应一个属性，每一行对应分解中的一个关系模式。若属性Aj Ui，则在j列i行上真上aj，否则填上bij；</p><p>② 对于每一个FDi做如下操作：找到Xi所对应的列中具有相同符号的那些行。考察这些行中li列的元素，若其中有aj，则全部改为aj，否则全部改为bmli，m是这些行的行号最小值。</p><p><strong>如果在某次更改后，有一行成为：a1,a2,...,an，则算法终止。且分解ρ具有无损连接性</strong>，否则不具有无损连接性。</p><p>对F中p个FD逐一进行一次这样的处理，称为对F的一次扫描。</p><p>③ 比较扫描前后，表有无变化，如有变化，则返回第② 步，否则算法终止。如果发生循环，那么前次扫描至少应使该表减少一个符号，表中符号有限，因此，循环必然终止。</p><p>举例1：已知R&lt;U,F&gt;，U={A,B,C}，F={A→B}，如下的两个分解：</p><p>① ρ1={AB,BC}</p><p>② ρ2={AB,AC}</p><p>判断这两个分解是否具有无损连接性。</p><p>①因为AB∩BC=B，AB-BC=A，BC-AB=C</p><p>所以B→A ¢F+，B→C ¢ F+</p><p>故ρ1是有损连接。</p><p>② 因为AB∩AC=A，AB-AC=B，AC-AB=C</p><p>所以A→B €F+，A→C ¢F+</p><p>故ρ2是无损连接。</p><p>举例2：已知R&lt;U,F&gt;，U={A,B,C,D,E}，F={A→C,B→C,C→D,DE→C,CE→A}，R的一个分解为R1(AD)，R2(AB)，R3(BE)，R4(CDE)，R5(AE)，判断这个分解是否具有无损连接性。</p><p> ① 构造一个初始的二维表，若“属性”属于“模式”中的属性，则填aj，否则填bij</p><p><img data-src="https://images0.cnblogs.com/blog2015/652582/201504/211054351402115.png" /></p><p>② 根据A→C，对上表进行处理，由于属性列A上第1、2、5行相同均为a1，所以将属性列C上的b13、b23、b53改为同一个符号b13（取行号最小值）。</p><p><img data-src="https://images0.cnblogs.com/blog2015/652582/201504/211056092031146.png" /></p><p>③ 根据B→C，对上表进行处理，由于属性列B上第2、3行相同均为a2，所以将属性列C上的b13、b33改为同一个符号b13（取行号最小值）。</p><p><img data-src="https://images0.cnblogs.com/blog2015/652582/201504/211056516099856.png" /></p><p>④ 根据C→D，对上表进行处理，由于属性列C上第1、2、3、5行相同均为b13，所以将属性列D上的值均改为同一个符号a4。</p><p><img data-src="https://images0.cnblogs.com/blog2015/652582/201504/211057216409447.png" /></p><p>⑤ 根据DE→C，对上表进行处理，由于属性列DE上第3、4、5行相同均为a4a5，所以将属性列C上的值均改为同一个符号a3。</p><p><img data-src="https://images0.cnblogs.com/blog2015/652582/201504/211057502961728.png" /></p><p>⑥ 根据CE→A，对上表进行处理，由于属性列CE上第3、4、5行相同均为a3a5，所以将属性列A上的值均改为同一个符号a1。</p><p><img data-src="https://images0.cnblogs.com/blog2015/652582/201504/211058348282823.png" /></p><p>⑦ 通过上述的修改，使第三行成为a1a2a3a4a5，则算法终止。且分解具有无损连接性。</p>]]></content>
      
      
      <categories>
          
          <category> 其他笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网站开发日志</title>
      <link href="/2020/08/06/%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/"/>
      <url>/2020/08/06/%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<p>2020-08-06</p><ul><li>新增左侧菜单栏功能</li><li>新增菜单栏对比色功能</li></ul><p>菜单栏实现：内侧标题position使用relative可自动上下移动，想打开和关闭的组件使用display:block和none控制显示与隐藏，在标题栏div添加onclick事件更改display参数即可实现</p><p>对比色实现：使用getelementsbyclassname获得一样classname的一个列表，for循环让列表[i]项的style.backgroundColor（注意这里和css不一样）变成不一样的颜色（加余数判定）</p><p>注意：for循环内如果设置多个表的颜色，表内元素必须相同，不然进行时报错回中止for循环！！！</p><p>2020-08-07</p><ul><li>去除左右滚动条</li><li>调整左侧菜单布局样式</li></ul><p>滚动条：overflow:scroll;overflow-x:hidden</p><p>2020-08-10</p><ul><li>顶部菜单和右侧菜单添加一些内容</li><li>更改整体配色</li><li>更改整体布局，大小</li></ul><p>右侧菜单设置有问题待修复，下拉菜单：<select><option></p><p><img data-src="https://img.jbzj.com/file_images/article/201212/20121213112015996.png" /></p><p>若要弄这样的表，灰色部分使用th白色部分用td就可以分开设置，td内部加input就可以输入值</p><p>2020-08-12</p><ul><li>添加鼠标悬浮气泡功能</li><li>样式小调整</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">static showdiv()&#123;</span><br><span class="line">        var tool = document.getElementsByClassName(&#x27;geSidebarTooltip&#x27;)[0];</span><br><span class="line">        //图片更改</span><br><span class="line">        var locate = this.firstElementChild.src;</span><br><span class="line">        var cimg = tool.firstElementChild;</span><br><span class="line">        cimg.src = locate;</span><br><span class="line">        //文字更改</span><br><span class="line">        var words =this.id.charAt(4).toUpperCase() + this.id.substr(5);</span><br><span class="line">        tool.children[1].innerText=words;</span><br><span class="line">        //位置更改</span><br><span class="line">        var t = this.offsetTop;</span><br><span class="line">        tool.style.top=t-10+&#x27;px&#x27;;</span><br><span class="line">        tool.style.display=&#x27;block&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    static hidediv()&#123;</span><br><span class="line">        var tool = document.getElementsByClassName(&#x27;geSidebarTooltip&#x27;)[0];</span><br><span class="line">        tool.style.display=&#x27;none&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">var cpnt_btn_list = document.querySelectorAll(&#x27;.component_btn&#x27;);</span><br><span class="line">cpnt_btn_list.forEach(btn =&gt;&#123;</span><br><span class="line">    // formed as btn_ + component name</span><br><span class="line">    var cpnt_str = btn.id.charAt(4).toUpperCase() + btn.id.substr(5);</span><br><span class="line">    btn.component_type = eval(cpnt_str);</span><br><span class="line">    btn.addEventListener(&quot;click&quot;, Component_btn.attachComponent);</span><br><span class="line">    btn.addEventListener(&#x27;mouseover&#x27;,Component_btn.showdiv);</span><br><span class="line">    btn.addEventListener(&#x27;mouseout&#x27;,Component_btn.hidediv);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>以上为气泡核心代码，思路为先获得目标位置，图片src和文字描述，再通过js代码换进去，添加mouse over和mouseout就可以添加鼠标悬浮和移出功能</p><p>只需要在html文件中添加一个div即可，div中添加主图img，下方文字div和左侧小箭头img。</p><p>2020-08-13</p><ul><li>添加checkbox函数，可以控制输入框disable值</li><li>右侧菜单新增奇偶颜色效果</li><li>新增dragging bar箭头效果</li><li>修复bug</li></ul><p>checkbox首先需要定义函数，添加onclick函数，定义两个变量分别选择box和需要更改的input list，第一个可以直接用id，第二个建议先选出父元素再用tagname选出input。添加判断条件q.checked，内部两个for循环就可解决，注意disabled是attrabute，需要用set和remove，set要传入两个参数</p><p>箭头效果用css就可以，用js不知道为什么会出错</p><p>2020-08-19</p><ul><li>新增顶部工具栏标签</li><li>新增标签换颜色函数</li><li>将函数运用到左侧和顶部标签</li></ul><p>button标签的border是没按下时的边框，outline是按下之后的边框，建议颜色都是inherit</p><p>h换色函数需要首先把所有标签都编号，判断当下颜色是否改变，没改变就变，然后把所有其他的都变成初始值</p><p>应用的时候使用箭头函数btn=&gt;{}此时btn就是每次点击的this，使用匿名函数可以实现有参数的函数</p><p>2020-08-21</p><ul><li>尝试svg</li><li>增加顶部工具栏标签个数</li></ul><p>js中数字直接相加有可能是首尾相连，所以需要用parseInt转换！！</p><p>2020-08-31</p><ul><li>完成批量增加html元素功能</li></ul><p>添加时需要先选中要添加的位置，最好做一个空的div，然后使用innerHTML的方式直接添加，需注意的是换行和"都需要用\转义</p><p>删除时只需要将其innerHTML变成""就可以</p><p>2020-10-26</p><p>人工alert函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    &lt;div id=&quot;light&quot; class=&quot;white_content&quot;&gt;</span><br><span class="line">    &lt;/div&gt; </span><br><span class="line">    &lt;div id=&quot;fade&quot; class=&quot;black_overlay&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.black_overlay&#123; </span><br><span class="line">    display: none; </span><br><span class="line">    position: absolute; </span><br><span class="line">    top: 0%; </span><br><span class="line">    left: 0%; </span><br><span class="line">    width: 100%; </span><br><span class="line">    height: 100%; </span><br><span class="line">    background-color: black; </span><br><span class="line">    z-index:1001; </span><br><span class="line">    -moz-opacity: 0.8; </span><br><span class="line">    opacity:.80; </span><br><span class="line">    filter: alpha(opacity=88); </span><br><span class="line">&#125; </span><br><span class="line">.white_content &#123; </span><br><span class="line">    display: none; </span><br><span class="line">    position: absolute; </span><br><span class="line">    top: 35%;</span><br><span class="line">    left: 45%;</span><br><span class="line">    width: 10%;</span><br><span class="line">    height: 15%;</span><br><span class="line">    padding: 20px; </span><br><span class="line">    background-color: white; </span><br><span class="line">    z-index:1002; </span><br><span class="line">    overflow: auto; </span><br><span class="line">    border: 5px solid black;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function artificial_alert(text)&#123;</span><br><span class="line">    document.getElementById(&#x27;light&#x27;).innerHTML=&quot;&lt;p&gt;&quot;+text+&quot;&lt;/p&gt;&lt;button type=\&quot;button\&quot; onclick=\&quot;closeDialog()\&quot;&gt;关闭&lt;/button&gt;&quot;</span><br><span class="line">    if(document.getElementById(&#x27;light&#x27;).style.display== &#x27;block&#x27;)&#123;</span><br><span class="line">        document.getElementById(&#x27;light&#x27;).style.display = &#x27;none&#x27;;</span><br><span class="line">        document.getElementById(&#x27;fade&#x27;).style.display = &#x27;none&#x27;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        document.getElementById(&#x27;light&#x27;).style.display = &#x27;block&#x27;;</span><br><span class="line">        document.getElementById(&#x27;fade&#x27;).style.display = &#x27;block&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理就是动态添加需要alert的文字进去</p><p>2020-11-04</p><p>最近在搞bootstrap</p><p>导入时只需要</p><p><code>&lt;link rel="stylesheet" href="https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css"&gt;</code></p><p><code>&lt;script src="https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js"&gt;&lt;/script&gt;</code></p><p><code>&lt;script src="https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js"&gt;&lt;/script&gt;</code></p><p>就可以，但是在npm下运行时需要把jq下载到本地，同时引入在线jq和本地jq才可以</p><p>输入框默认值，点击清除，不点击恢复：</p><p><code>onfocus="if(this.value=='test')&#123;this.value=''&#125;" onblur="if(this.value=='')&#123;this.value='test'&#125;" value="test"</code></p><p>用for循环appendChild时不能只靠innerHTML修改元素，必须重新声明才可以</p><p>列表可以使用push 和pop</p><p>2020/11/23</p><p>实现长宽比：</p><p>垂直方向的padding</p><p>这是最早提出的一种实现方案，主要借助的原理是利用<code>padding-top</code>或者<code>padding-bottom</code>的百分比值，实现容器长宽比。在CSS中<code>padding-top</code>或<code>padding-bottom</code>的百分比值是根据容器的<code>width</code>来计算的。如此一来就很好的实现了容器的长宽比。采用这种方法，需要把容器的<code>height</code>设置为<code>0</code>。而容器内容的所有元素都需要采用<code>position:absolute</code>，不然子元素内容都将被<code>padding</code>挤出容器（造成内容溢出）。</p><p>比如我们容器的长宽比是<code>16:9</code>，那么根据计算：<code>100% * 9 / 16</code>可以得到<code>56.25%</code>。如果你希望的是<code>4:3</code>，那么对应的就是<code>100% * 3 / 4</code>。</p><p>具体的CSS代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.aspectration &#123;</span><br><span class="line">    position: relative; /*因为容器所有子元素需要绝对定位*/</span><br><span class="line">    height: 0; /*容器高度是由padding来控制，盒模型原理告诉你一切*/</span><br><span class="line">    width: 100%; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.aspectration[data-ratio=&quot;16:9&quot;] &#123;</span><br><span class="line">    padding-top: 56.25%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.aspectration[data-ratio=&quot;4:3&quot;]&#123;</span><br><span class="line">    padding-top: 75%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过通配符<code>*</code>选择器，让其子元素的宽高和容器<code>.aspectration</code>一样大小：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.aspectration &gt; * &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git学习笔记</title>
      <link href="/2020/07/28/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/07/28/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>下载安装</p><ul><li><p>到目标文件夹中git init初始化</p></li><li><p>把文件添加到git仓库使用命令<code>git add &lt;file&gt;</code></p></li><li><p>使用命令 <code>git commit -m &lt;message&gt;</code></p></li><li><p>要随时掌握工作区的状态，使用<code>git status</code>命令。</p></li><li><p>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</p></li><li><p><code>HEAD</code>指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。（上一个是HEAD^,上100个是HEAD~100）</p></li><li><p>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</p></li><li><p>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</p></li></ul><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</p><p>命令<code>git rm</code>用于删除一个文件</p><p>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>；</p><p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p><p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；.</p><p>要克隆一个仓库，首先必须知道仓库的地址，然后使用<code>git clone</code>命令克隆。</p><p>$ git clone git@github.com:1982606762/worked1</p><p>Git鼓励大量使用分支：</p><p>查看分支：<code>git branch</code></p><p>创建分支：<code>git branch &lt;name&gt;</code></p><p>切换分支：<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code></p><p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code></p><p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p><p>删除分支：<code>git branch -d &lt;name&gt;</code></p><p>远程连接github：</p><h2 id="检查ssh-keys是否存在">1. 检查SSH keys是否存在</h2><p>输入下面的命令，如果有文件<code>id_rsa.pub</code> 或 <code>id_dsa.pub</code>，则直接进入步骤3将SSH key添加到GitHub中，否则进入第二步生成SSH key</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -al ~/.ssh</span><br><span class="line"># Lists the files in your .ssh directory, if they exist</span><br></pre></td></tr></table></figure><h2 id="生成新的ssh-key">2. 生成新的ssh key</h2><p><strong>第一步：生成public/private rsa key pair</strong><br />在命令行中输入<code>ssh-keygen -t rsa -C "your_email@example.com"</code></p><p>默认会在相应路径下（/your_home_path）生成<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，如下面代码所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</span><br><span class="line"># Creates a new ssh key using the provided email</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/your_home_path/.ssh/id_rsa):</span><br></pre></td></tr></table></figure><p><strong>第二步：输入passphrase（本步骤可以跳过）</strong></p><p>设置passphrase后，进行版本控制时，每次与GitHub通信都会要求输入passphrase，以避免某些“失误”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase): [Type a passphrase]</span><br><span class="line">Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure><p>sample result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved in /your_home_path/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /your_home_path/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">#01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com</span><br></pre></td></tr></table></figure><p><strong>第三步：将新生成的key添加到ssh-agent中:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># start the ssh-agent in the background</span><br><span class="line">eval &quot;$(ssh-agent -s)&quot;</span><br><span class="line">Agent pid 59566</span><br><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><h2 id="将ssh-key添加到github中">3. 将ssh key添加到GitHub中</h2><p>用自己喜欢的文本编辑器打开<code>id_rsa.pub</code>文件，里面的信息即为SSH key，将这些信息复制到GitHub的<code>Add SSH key</code>页面即可</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git教程</title>
      <link href="/2020/07/28/git%E6%95%99%E7%A8%8B/"/>
      <url>/2020/07/28/git%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><strong>目录</strong></p><ul><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label0">一、版本控制概要 工作区 暂存区 本地仓库 远程仓库</a><ul><li><p><a href="https://www.cnblogs.com/best/p/7474442.html#_lab2_0_0">1.1、什么是版本控制</a></p></li><li><p><a href="https://www.cnblogs.com/best/p/7474442.html#_lab2_0_1">1.2、常用术语</a></p></li><li><p><a href="https://www.cnblogs.com/best/p/7474442.html#_lab2_0_2">1.3、常见的版本控制器</a></p></li><li><p><a href="https://www.cnblogs.com/best/p/7474442.html#_lab2_0_3">1.4、版本控制分类</a></p><ul><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_0_3_0">1.4.1、本地版本控制</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_0_3_1">1.4.2、集中版本控制</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_0_3_2">1.4.3、分布式版本控制</a></li></ul></li><li><p><a href="https://www.cnblogs.com/best/p/7474442.html#_lab2_0_4">1.5、Git与SVN最主要区别</a></p><span id="more"></span></li></ul></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label1">二、Git安装与配置</a><ul><li><a href="https://www.cnblogs.com/best/p/7474442.html#_lab2_1_0">2.1、什么是Git</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_lab2_1_1">2.2、搭建Git工作环境</a><ul><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_1_1_0">2.2.1、下载Git</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_1_1_1">2.2.2、安装Git</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_1_1_2">2.2.3、启动Git</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_1_1_3">2.2.4、Linux与Mac OS安装Git</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_1_1_4">2.2.5、Bash基本操作命令</a></li></ul></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_lab2_1_2">2.3、Git配置 - git config</a><ul><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_1_2_0">2.3.1、查看配置 - git config -l</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_1_2_1">2.3.2、Git配置文件分类</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_1_2_2">2.3.3、设置用户名与邮箱（用户标识，必要）</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_1_2_3">2.3.4、添加或删除配置项</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_1_2_4">2.3.5、更多配置项</a></li></ul></li></ul></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label2">三、Git理论基础</a><ul><li><a href="https://www.cnblogs.com/best/p/7474442.html#_lab2_2_0">3.1、工作区域</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_lab2_2_1">3.2、工作流程</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_lab2_2_2">3.3、图解教程</a></li></ul></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3">四、Git操作</a><ul><li><a href="https://www.cnblogs.com/best/p/7474442.html#_lab2_3_0">4.1、创建工作目录与常用指令</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_lab2_3_1">4.2、获得GIT仓库</a><ul><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_3_1_0">4.2.1、创建全新仓库</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_3_1_1">4.2.2、克隆远程仓库</a></li></ul></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_lab2_3_2">4.3、GIT文件操作</a><ul><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_3_2_0">4.3.1、文件4种状态</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_3_2_1">4.3.2、查看文件状态</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_3_2_2">4.3.3、添加文件与目录</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_3_2_3">4.3.4、移除文件与目录（撤销add）</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_3_2_4">4.3.5、查看文件修改后的差异</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_3_2_5">4.3.6、签出</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_3_2_6">4.3.6、忽略文件</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_3_2_7">4.3.7、提交</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_3_2_8">4.3.8、日志与历史</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_3_2_9">4.3.9、查看文件列表</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_3_2_10">4.3.10、撤销更新</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_3_2_11">4.3.11、删除文件</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_3_2_12">4.3.12、文件操作小结</a></li></ul></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_lab2_3_3">4.4、GIT分支</a><ul><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_3_3_0">4.4.1、新建分支与切换分支</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_3_3_1">4.4.2、查看分支</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_3_3_2">4.4.3、分支合并</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_3_3_3">4.4.4、解决冲突</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_3_3_4">4.4.5、删除分支</a></li></ul></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_lab2_3_4">4.5、Git GUI 操作</a><ul><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_3_4_0">4.5.1、GitHub for Desktop</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_3_4_1">4.5.2、Source Tree</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_3_4_2">4.5.3、TortoiseGit</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_3_4_3">4.5.4、Git集成Gui工具</a></li></ul></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_lab2_3_5">4.6、IDE集成的Git客户端</a><ul><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_3_5_0">4.6.1、Eclipse – Egit</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_3_5_1">4.6.2、Visual Studio – Git Integration &amp; GitHub Extension</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_3_5_2">4.6.3、IntelliJ IDEA</a></li></ul></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_lab2_3_6">4.7、帮助与代码统计</a></li></ul></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label4">五、远程仓库</a><ul><li><a href="https://www.cnblogs.com/best/p/7474442.html#_lab2_4_0">5.1、托管平台</a><ul><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_4_0_0">5.1.1、GitHub</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_4_0_1">5.1.2、Gitlab</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_4_0_2">5.1.3、Bitbucket</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_4_0_3">5.1.4、开源中国代码托管</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_4_0_4">5.1.5、(推荐)coding.net</a></li></ul></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_lab2_4_1">5.2、申请帐号与设置</a><ul><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_4_1_0">5.2.1、申请帐号</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_4_1_1">5.2.2、创建项目</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_4_1_2">5.2.3、提交源代码到远程仓库</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_4_1_3">5.2.4、Markdown文件（.md文件）</a></li></ul></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_lab2_4_2">5.3、远程仓库操作</a><ul><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_4_2_0">5.3.1、常用操作指令</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_4_2_1">5.3.2、git clone 克隆</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_4_2_2">5.3.3、git remote</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_4_2_3">5.3.4、git fetch</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_4_2_4">5.3.5、git pull</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label3_4_2_5">5.3.6、git push</a></li></ul></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_lab2_4_3">5.4、在命令行中同步本地仓库示例</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_lab2_4_4">5.5、IDEA中Git的使用</a></li></ul></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label5">六、作业与评分标准</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label6">七、资源与资料下载</a></li><li><a href="https://www.cnblogs.com/best/p/7474442.html#_label7">八、视频</a></li></ul><h1 id="一版本控制概要-工作区-暂存区-本地仓库-远程仓库">一、版本控制概要 工作区 暂存区 本地仓库 远程仓库</h1><h2 id="什么是版本控制">1.1、什么是版本控制</h2><p>版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p><ul><li>实现跨区域多人协同开发</li><li>追踪和记载一个或者多个文件的历史记录</li><li>组织和保护你的源代码和文档</li><li>统计工作量</li><li>并行开发、提高开发效率</li><li>跟踪记录整个软件的开发过程</li><li>减轻开发人员的负担，节省时间，同时降低人为错误</li></ul><p>简单说就是用于管理多人协同开发项目的技术。</p><p>没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题。</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180916182707546-1204473891.png" /></p><h2 id="常用术语">1.2、常用术语</h2><p><strong>1)、仓库（Repository）</strong><br />受版本控制的所有文件修订历史的共享数据库</p><p><strong>2)、工作空间（Workspace)</strong><br />本地硬盘或Unix 用户帐户上编辑的文件副本</p><p><strong>3)、工作树/区（Working tree）</strong><br />工作区中包含了仓库的工作文件。您可以修改的内容和提交更改作为新的提交到仓库。</p><p><strong>4)、暂存区（Staging area）</strong><br />暂存区是工作区用来提交更改（commit）前可以暂存工作区的变化。</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170904202237913-177051853.png" /></p><p><strong>5)、索引（Index）</strong><br />索引是暂存区的另一种术语。</p><p><strong>6)、签入（Checkin）</strong><br />将新版本复制回仓库</p><p><strong>7)、签出（Checkout）</strong><br />从仓库中将文件的最新修订版本复制到工作空间</p><p><strong>8)、提交（Commit）</strong><br />对各自文件的工作副本做了更改，并将这些更改提交到仓库</p><p><strong>9)、冲突（Conflict）</strong><br />多人对同一文件的工作副本进行更改，并将这些更改提交到仓库</p><p><strong>10)、合并（Merge）</strong><br />将某分支上的更改联接到此主干或同为主干的另一个分支</p><p><strong>11)、分支（Branch）</strong><br />从主线上分离开的副本，默认分支叫master</p><p><strong>12)、锁（Lock）</strong><br />获得修改文件的专有权限。</p><p><strong>13)、头（HEAD）</strong><br />头是一个象征性的参考，最常用以指向当前选择的分支。</p><p><strong>14)、修订（Revision）</strong><br />表示代码的一个版本状态。Git通过用SHA1 hash算法表示的ID来标识不同的版本。</p><p><strong>15)、标记（Tags）</strong><br />标记指的是某个分支某个特定时间点的状态。通过标记，可以很方便的切换到标记时的状态。</p><h2 id="常见的版本控制器">1.3、常见的版本控制器</h2><p>主流的版本控制器有如下这些：</p><ul><li><strong>Git</strong></li><li><strong>SVN</strong>（Subversion）</li><li><strong>CVS</strong>（Concurrent Versions System）</li><li><strong>VSS</strong>（Micorosoft Visual SourceSafe）</li><li><strong>TFS</strong>（Team Foundation Server）</li><li>Visual Studio Online</li></ul><p>版本控制产品非常的多（Perforce、Rational ClearCase、RCS（GNU Revision Control System）、Serena Dimention、SVK、BitKeeper、Monotone、Bazaar、Mercurial、SourceGear Vault），现在影响力最大且使用最广泛的是Git与SVN</p><h2 id="版本控制分类">1.4、版本控制分类</h2><h3 id="本地版本控制"><strong>1.4.1、本地版本控制</strong></h3><p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如RCS。</p><p><img data-src="https://images0.cnblogs.com/blog/168097/201308/05163110-c8a48b29015245b78dc0127429ef5213.png" /></p><h3 id="集中版本控制"><strong>1.4.2、集中版本控制</strong></h3><p>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170904213634085-673206677.png" /></p><p>所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：SVN、CVS、VSS</p><h3 id="分布式版本控制">1.4.3、分布式版本控制</h3><p>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时push到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170904214244944-1222535795.png" /></p><h2 id="git与svn最主要区别">1.5、Git与SVN最主要区别</h2><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170904215630788-377479009.png" /></p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170904215806085-1977930707.png" /></p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170904215943554-1806020988.png" /></p><p>Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网了，因为版本都在自己电脑上。协同的方法是这样的：比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p><h1 id="二git安装与配置">二、Git安装与配置</h1><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170904222351757-505218464.png" /></p><h2 id="什么是git">2.1、什么是Git</h2><p>Git是目前世界上最先进的分布式版本控制系统。</p><p>Git是免费、开源的</p><p>最初Git是为辅助 Linux 内核开发的，来替代 BitKeeper</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170904223054569-1226906652.png" /></p><p><strong>作者</strong>：Linux和Git之父李纳斯·托沃兹（Linus Benedic Torvalds）1969、芬兰</p><p><strong>优点：</strong></p><ul><li>适合分布式开发，强调个体。</li><li>公共服务器压力和数据量都不会太大。</li><li>速度快、灵活。</li><li>任意两个开发者之间可以很容易的解决冲突。</li><li>离线工作。</li></ul><p><strong>缺点：</strong></p><ul><li>模式上比SVN更加复杂。</li><li>不符合常规思维。</li><li>代码保密性差，一旦开发者把整个库克隆下来就可以完全公开所有代码和版本信息。</li></ul><p><strong>官网</strong>： <a href="https://git-scm.com/">https://git-scm.com/</a></p><p><strong>源码：</strong> <a href="https://github.com/git/git/">https://github.com/git/git/</a></p><h2 id="搭建git工作环境">2.2、搭建Git工作环境</h2><h3 id="下载git">2.2.1、下载Git</h3><p>打开 <a href="https://git-scm.com/">git官网</a>，下载git对应操作系统的版本。</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170904224935226-646404598.png" /></p><p>选择版本：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170904225056351-1443818096.png" /></p><p>这里我选择下载<strong><a href="https://github.com/git-for-windows/git/releases/download/v2.14.1.windows.1/Git-2.14.1-64-bit.exe">64-bit Git for Windows Setup</a></strong></p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170904225407569-334038713.png" /></p><h3 id="安装git"><strong>2.2.2、安装Git</strong></h3><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170904225914054-2025747538.png" /></p><p>选择安装配置信息</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170904225939491-904441630.png" /></p><p>一直Next默认就好了，如果需要设置就要仔细读一下安装界面上的选项。</p><h3 id="启动git">2.2.3、启动Git</h3><p>安装成功后在开始菜单中会有Git项，菜单下有3个程序：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170904230524616-939776409.png" /></p><p><strong>Git Bash：</strong>Unix与Linux风格的命令行，使用最多，推荐最多</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170904230713476-944403758.png" /></p><p>与DOS风格的命令有些区别，不习惯可以选择Git CMD</p><p><strong>Git CMD：</strong>Windows风格的命令行</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170904230927897-26895067.png" /></p><p><strong>Git GUI</strong>：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170904231104460-2046803495.png" /></p><p>点击Create New Repository可以直接创建一个新的仓库。</p><h3 id="linux与mac-os安装git">2.2.4、Linux与Mac OS安装Git</h3><p>Linux安装Git：sudo apt-get install git 命令行就可以安装了。</p><p>Mac OS安装Git： <a href="https://git-scm.com/download/mac">https://git-scm.com/download/mac</a>，下载双击.pkg安装</p><h3 id="bash基本操作命令">2.2.5、Bash基本操作命令</h3><p>~就是home</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180919154202435-52586183.png" /></p><p>进入Bash默认位置，注意标题栏</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180919154225870-1917375331.png" /></p><p>1）、cd : 改变目录。</p><p>　　cd ~ 回Home（windows是当前用户所在目录）</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180919154324409-306328267.png" /></p><p>2）、cd . . 回退到上一个目录，直接cd进入默认目录</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180919160233082-1412129938.png" /></p><p>3）、pwd : 显示当前所在的目录路径。</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180919154416679-1310518200.png" /></p><p>4）、ls(ll): 都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细。</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180919160328270-648989596.png" /></p><p>5）、touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180919155055507-12757213.png" /></p><p>6）、rm: 删除一个文件, rm index.js 就会把index.js文件删除。</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180919155231636-215916688.png" /></p><p>7）、mkdir: 新建一个目录,就是新建一个文件夹。</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180919154553575-134187339.png" /></p><p>8）、rm -r : 删除一个文件夹, rm -r src 删除src目录， 好像不能用通配符。</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180919160430268-551577385.png" /></p><p>9）、mv 移动文件, mv index.html src index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下。</p><p>10）、reset 重新初始化终端/清屏。</p><p>11）、clear 清屏。</p><p>12）、history 查看命令历史。</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180919155347185-500520690.png" /></p><p>13）、help 帮助。</p><p>14）、exit 退出。</p><p>15）、#表示注释</p><p>16）、输出与注释</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180919154720082-675925069.png" /></p><p>17）、创建文件</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p>小于号：命令默认从键盘获得的输入，改成从文件，或者其它打开文件以及设备输入</p><blockquote><blockquote><p>是追加内容</p></blockquote></blockquote><blockquote><p>是覆盖原有内容</p></blockquote><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180919154949137-950612185.png" /></p><p> 18、显示文件内容 cat</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180919160635784-744444602.png" /></p><h2 id="git配置---git-config">2.3、Git配置 - git config</h2><h3 id="查看配置---git-config--l">2.3.1、查看配置 - git config -l</h3><p>使用git config -l 可以查看现在的git环境详细配置</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170905111941679-369062685.png" /></p><p>查看不同级别的配置文件：</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p>#查看系统config git config --system --list 　　 #查看当前用户（global）配置 git config --global --list</p><p>#查看当前仓库配置信息 git config --local --list</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><h3 id="git配置文件分类">2.3.2、Git配置文件分类</h3><p>在Windows系统中，Git在<span class="math inline">\(HOME目录中查找.gitconfig文件（一般位于C:\\Documents and Settings\)</span>USER下）</p><p><strong>Git相关的配置文件有三个：</strong></p><p>1）、 /etc/gitconfig：包含了适用于系统所有用户和所有项目的值。(Win：C:\Program Files\Git\mingw64\etc\gitconfig) --system 系统级</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170905155620835-541203307.png" /></p><p>2）、~/.gitconfig：只适用于当前登录用户的配置。(Win：C:\Users\Administrator\.gitconfig)  --global 全局</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170905112611116-974195699.png" /></p><p>3）、位于git项目目录中的.git/config：适用于特定git项目的配置。(Win：C:\gitProject) --local当前项目</p><p>注意：对于同一配置项，三个配置文件的优先级是1&lt;2&lt;3</p><p>这里可以直接编辑配置文件，通过命令设置后会响应到这里。</p><h3 id="设置用户名与邮箱用户标识必要">2.3.3、设置用户名与邮箱（用户标识，必要）</h3><p>当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中：</p><p>　　$ git config --global user.name <strong>"zhangguo"</strong> #名称 　　$ git config --global user.email zhangguo@qq.com #邮箱</p><p>只需要做一次这个设置，如果你传递了--global 选项，因为Git将总是会使用该信息来处理你在系统中所做的一切操作。如果你希望在一个特定的项目中使用不同的名称或e-mail地址，你可以在该项目中运行该命令而不要--global选项。 总之--global为全局配置，不加为某个项目的特定配置。</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170905135629991-890437951.png" /></p><h3 id="添加或删除配置项">2.3.4、添加或删除配置项</h3><p><strong>1）、添加配置项</strong></p><p>git config [--local--global--system] section.key value [--local--global--system] #可选的，对应本地，全局，系统不同级别的设置，请看2.3.2 section.key #区域下的键 value #对应的值</p><p>--local 项目级</p><p>--global 当前用户级</p><p>--system 系统级 </p><p>例如我们要在student区域下添加一个名称为height值为198的配置项，执行结果如下：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170905160142351-561831872.png" /></p><p><strong>2）、删除配置项</strong></p><p>git config [--local--global--system] --unset section.key</p><p> 将系统级的height配置项移除</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170905161225726-295254907.png" /></p><h3 id="更多配置项">2.3.5、更多配置项</h3><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p>git config --global color.ui true #打开所有的默认终端着色 git config --global alias.ci commit #别名 ci 是commit的别名 [alias]<br />co = checkout<br />ci = commit<br />st = status<br />pl = pull<br />ps = push<br />dt = difftool<br />l = log --stat<br />cp = cherry-pick<br />ca = commit -a<br />b = branch</p><p>user.name #用户名 user.email #邮箱 core.editor #文本编辑器<br />merge.tool #差异分析工具<br />core.paper <strong>"less -N"</strong> #配置显示方式<br />color.diff true #diff颜色配置<br />alias.co checkout #设置别名 git config user.name #获得用户名 git config core.filemode false #忽略修改权限的文件</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p>所有config命令参数</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p>语法: git config [<options>]</p><p>文件位置<br />--global #use global config file 使用全局配置文件 --system #use system config file 使用系统配置文件 --local #use repository config file 使用存储库配置文件 -f, --file <file> #use given config file 使用给定的配置文件 --blob <blob-id> #read config from given blob object 从给定的对象中读取配置</p><p>动作<br />--get #get value: name [value-regex] 获得值：[值]名[正则表达式] --get-all #get all values: key [value-regex] 获得所有值：[值]名[正则表达式] --get-regexp #get values for regexp: name-regex [value-regex] 得到的值根据正则 --get-urlmatch #get value specific for the URL: section[.var] URL 为URL获取特定的值 --replace-all #replace all matching variables: name value [value_regex] 替换所有匹配的变量：名称值[ value_regex ] --add #add a new variable: name value 添加一个新变量：name值 --unset #remove a variable: name [value-regex] 删除一个变量名[值]：正则表达式 --unset-all #remove all matches: name [value-regex] 删除所有匹配的正则表达式：名称[值] --rename-section #rename section: old-name new-name 重命名部分：旧名称 新名称 --remove-section #remove a section: name 删除部分：名称 -l, --list #list all 列出所有 -e, --edit #open an editor 打开一个编辑器 --get-color #find the color configured: slot [default] 找到配置的颜色：插槽[默认] --get-colorbool #find the color setting: slot [stdout-is-tty] 发现颜色设置：槽[ stdout是TTY ]</p><p>类型<br />--bool #value is "true" or "false" 值是“真”或“假”。 --int #value is decimal number 值是十进制数。 --bool-or-int #value is --bool or --int 值--布尔或int --path #value is a path (file or directory name) 值是路径（文件或目录名）</p><p>其它<br />-z, --null #terminate values with NUL byte 终止值与null字节 --name-only #show variable names only 只显示变量名 --includes #respect include directives on lookup 尊重包括查找指令 --show-origin #show origin of config (file, standard input, blob, command line) 显示配置（文件、标准输入、数据块、命令行）的来源</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><h1 id="三git理论基础">三、Git理论基础</h1><h2 id="工作区域">3.1、工作区域</h2><p>Git本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage/Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170905201017069-171460014.png" /></p><ul><li>Workspace：工作区，就是你平时存放项目代码的地方</li><li>Index / Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li><li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li><li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li></ul><p>本地的三个区域确切的说应该是git仓库中HEAD指向的版本</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170906230652788-1835188684.png" /></p><ul><li>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。</li><li>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li><li>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。</li><li>Index/Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</li><li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。</li><li>Stash：隐藏，是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。</li></ul><h2 id="工作流程">3.2、工作流程</h2><p>git的工作流程一般是这样的：</p><p>１、在工作目录中添加、修改文件；</p><p>２、将需要进行版本管理的文件放入暂存区域；</p><p>３、将暂存区域的文件提交到git仓库。</p><p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170905201033647-1915833066.png" /></p><h2 id="图解教程">3.3、图解教程</h2><p>个人认为Git的原理相比别的版本控制器还是复杂一些的，有一份图解教程比较直观：</p><p><a href="https://github.com/MarkLodato/visual-git-guide">图解教程英文原版</a></p><p><a href="http://www.cnblogs.com/yaozhongxiao/p/3811130.html">图解教程中文版</a></p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170914100820891-2098204183.png" /></p><h1 id="四git操作">四、Git操作</h1><h2 id="创建工作目录与常用指令">4.1、创建工作目录与常用指令</h2><p>工作目录（WorkSpace)一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</p><p>日常使用只要记住下图6个命令：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170905212837976-775285128.png" /></p><h2 id="获得git仓库">4.2、获得GIT仓库</h2><p>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库。</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170905214339226-738603749.png" /></p><h3 id="创建全新仓库">4.2.1、创建全新仓库</h3><p>需要用GIT管理的项目的根目录执行：</p><p># 在当前目录新建一个Git代码库 $ git init</p><p><strong>执行：</strong></p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170905215656866-1398401674.png" /></p><p><strong>结果：</strong></p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170905215735366-1289732483.png" /></p><p>执行后可以看到，仅仅在项目目录多出了一个.git目录，关于版本等的所有信息都在这个目录里面。</p><p>当然如果使用如下命令，可以把创建目录与仓库一起完成：</p><p># 新建一个目录，将其初始化为Git代码库 $ git init [project-name]</p><p> 执行命令与运行结果：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170905220337507-804117637.png" /></p><h3 id="克隆远程仓库">4.2.2、克隆远程仓库</h3><p> 另一种方式是克隆远程目录，由于是将远程服务器上的仓库完全镜像一份至本地，而不是取某一个特定版本，所以用clone而不是checkout，语法格式如下：</p><p># 克隆一个项目和它的整个代码历史(版本信息) $ git clone [url]</p><p><strong>执行：</strong></p><p>比如我们要从克隆的远程仓库托管在github上，地址为：https://github.com/zhangguo5/SuperPlus.git，这是一个公开的项目</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170905221014272-913470815.png" /></p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170905221312116-63802822.png" /></p><p><strong>结果：</strong></p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170905221458694-121760087.png" /></p><h2 id="git文件操作">4.3、GIT文件操作</h2><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。GIT不关心文件两个版本之间的具体差别，而是关心文件的整体是否有改变，若文件被改变，在添加提交时就生成文件新版本的快照，而判断文件整体是否改变的方法就是用SHA-1算法计算文件的校验和。</p><h3 id="文件4种状态">4.3.1、文件4种状态</h3><p><img data-src="https://git-scm.com/book/en/v2/book/02-git-basics/images/lifecycle.png" /></p><ul><li><strong>Untracked</strong>: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过<code>git add</code> 状态变为<code>Staged</code>.</li><li><strong>Unmodify</strong>: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为<code>Modified</code>. 如果使用<code>git rm</code>移出版本库, 则成为<code>Untracked</code>文件</li><li><strong>Modified</strong>: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过<code>git add</code>可进入暂存<code>staged</code>状态, 使用<code>git checkout</code> 则丢弃修改过, 返回到<code>unmodify</code>状态, 这个<code>git checkout</code>即从库中取出文件, 覆盖当前修改</li><li><strong>Staged</strong>: 暂存状态. 执行<code>git commit</code>则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为<code>Unmodify</code>状态. 执行<code>git reset HEAD filename</code>取消暂存, 文件状态为<code>Modified</code></li></ul><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170909091456335-1787774607.jpg" /></p><h3 id="查看文件状态">4.3.2、查看文件状态</h3><p>上面说文件有4种状态，通过如下命令可以查看到文件的状态：</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p>#查看指定文件状态 git status [filename]</p><p>#查看所有文件状态 git status</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p>命令：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170905225929726-953984446.png" /></p><p>结果：</p><p>foo.htm文件的状态为untracked（未跟踪），提示通过git add可以暂存</p><p>GIT在这一点做得很好，在输出每个文件状态的同时还说明了怎么操作，像上图就有怎么暂存、怎么跟踪文件、怎么取消暂存的说明。</p><h3 id="添加文件与目录">4.3.3、添加文件与目录</h3><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170905231716304-244902919.png" /></p><p>工作区（Working Directory）就是你在电脑里能看到的目录。</p><p>版本库（Repository）工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。</p><p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p><p>将untracked状态的文件添加到暂存区，语法格式如下：</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p># 添加指定文件到暂存区 $ git add [file1] [file2] ...</p><h1 id="添加指定目录到暂存区包括子目录">添加指定目录到暂存区，包括子目录</h1><p>$ git add [dir]</p><h1 id="添加当前目录的所有文件到暂存区">添加当前目录的所有文件到暂存区</h1><p>$ git add .</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p>执行：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170905230902819-1267851128.png" /></p><h3 id="移除文件与目录撤销add">4.3.4、移除文件与目录（撤销add）</h3><p><img data-src="https://images0.cnblogs.com/blog/99928/201411/201751509379751.png" /></p><p>当执行如下命令时，会直接从暂存区删除文件，工作区则不做出改变</p><p>#直接从暂存区删除文件，工作区则不做出改变 git rm --cached <file></p><p>执行命令</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170905234240804-1332106185.png" /></p><p>通过重写目录树移除add文件：</p><p>#如果已经用add 命令把文件加入stage了，就先需要从stage中撤销 git reset HEAD <file>...</p><p>当执行 “git reset HEAD” 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。</p><p>示例：把f1.txt文件从暂存区撤回工作区</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170906214833804-177821547.png" /></p><p>移除所有未跟踪文件</p><p>#移除所有未跟踪文件 #一般会加上参数-df，-d表示包含目录，-f表示强制清除。 git clean [options]</p><p>示例：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170906151958444-1958472278.png" /></p><p>移除前：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170906152037054-939716292.png" /></p><p>执行移除：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170906152107147-393725026.png" /></p><p>移除后：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170906152135616-1007222940.png" /></p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p>#只从stage中删除，保留物理文件 git rm --cached readme.txt</p><p>#不但从stage中删除，同时删除物理文件 git rm readme.txt</p><p>#把a.txt改名为b.txt git mv a.txt b.txt</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p>当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。</p><p>当执行 “git reset HEAD” 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。</p><p>当执行 “git rm –cached <file>” 命令时，会直接从暂存区删除文件，工作区则不做出改变。</p><p>当执行 “git checkout .” 或者 “git checkout — <file>” 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。</p><p>当执行 “git checkout HEAD .” 或者 “git checkout HEAD <file>” 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改 动。</p><h3 id="查看文件修改后的差异">4.3.5、查看文件修改后的差异</h3><p>git diff用于显示WorkSpace中的文件和暂存区文件的差异</p><p>用"git status"只能查看对哪些文件做了改动，如果要看改动了什么，可以用：</p><p>#查看文件修改后的差异 git diff [files]</p><p>命令：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170906141531554-463319760.png" /></p><p> ---a表示修改之前的文件，+++b表示修改后的文件</p><p>#比较暂存区的文件与之前已经提交过的文件 git diff --cached</p><p>也可以把WorkSpace中的状态和repo中的状态进行diff，命令如下:</p><p>#比较repo与工作空间中的文件差异 git diff HEAD~n</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170914095506203-2063795525.png" /></p><h3 id="签出"><strong>4.3.6、签出</strong></h3><p>如果仓库中已经存在文件f4.txt，在工作区中对f4修改了，如果想撤销可以使用checkout，签出覆盖</p><p>检出命令git checkout是git最常用的命令之一，同时也是一个很危险的命令，因为这条命令会重写工作区</p><p>语法：</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p>#用法一 git checkout [-q] [<commit>] [--] <paths>... #用法二 git checkout [<branch>] #用法三 git checkout [-m] [[-b]--orphan] &lt;new_branch&gt;] [&lt;start_point&gt;]</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p><commit>是可选项，如果省略则相当于从暂存区（index）进行检出</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170906224842804-513302659.png" /></p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p>$ git checkout branch #检出branch分支。要完成图中的三个步骤，更新HEAD以指向branch分支，以及用branch 指向的树更新暂存区和工作区。</p><p>$ git checkout #汇总显示工作区、暂存区与HEAD的差异。</p><p>$ git checkout HEAD #同上</p><p>$ git checkout -- filename #用暂存区中filename文件来覆盖工作区中的filename文件。相当于取消自上次执行git add filename以来（如果执行过）的本地修改。</p><p>$ git checkout branch -- filename #维持HEAD的指向不变。用branch所指向的提交中filename替换暂存区和工作区中相 应的文件。注意会将暂存区和工作区中的filename文件直接覆盖。</p><p>$ git checkout -- . 或写作 git checkout . #注意git checkout 命令后的参数为一个点（“.”）。这条命令最危险！会取消所有本地的 #修改（相对于暂存区）。相当于用暂存区的所有文件直接覆盖本地文件，不给用户任何确认的机会！</p><p>$ git checkout commit_id -- file_name #如果不加commit_id，那么git checkout -- file_name 表示恢复文件到本地版本库中最新的状态。</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p>示例： </p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170906223105851-2141952910.png" /></p><h3 id="忽略文件">4.3.6、忽略文件</h3><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p><p>在主目录下建立".gitignore"文件，此文件有如下规则：</p><ol type="1"><li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li><li>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,...}）代表可选的字符串等。</li><li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li><li>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li><li>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li></ol><p>如：</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p>#为注释 *.txt #忽略所有 .txt结尾的文件 !lib.txt #但lib.txt除外 /temp #仅忽略项目根目录下的TODO文件,不包括其它目录temp build/ #忽略build/目录下的所有文件 doc/*.txt #会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p><a href="http://www.cnblogs.com/kevingrace/p/5690241.html">更多规则请点这里</a></p><p>示例：</p><p>创建一个.gitignore文件忽视所有的日志文件</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170906150554460-1028534587.png" /></p><p>查看状态：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170906150711069-480648048.png" /></p><p>从上图中可以看出2个日志文件并没有添加到暂存区，直接被忽视了。</p><p>针对各种语言与项目的Git忽视文件： <a href="https://github.com/kaedei/gitignore">https://github.com/kaedei/gitignore</a>   <a href="https://github.com/github/gitignore">https://github.com/github/gitignore</a></p><p>通用的java忽视文件：</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p># Compiled class file *.class</p><h1 id="log-file">Log file</h1><p>*.log</p><h1 id="bluej-files">BlueJ files</h1><p>*.ctxt</p><h1 id="mobile-tools-for-java-j2me">Mobile Tools for Java (J2ME)</h1><p>.mtj.tmp/</p><h1 id="package-files">Package Files</h1><p>*.jar *.war *.ear *.zip *.tar.gz *.rar</p><h1 id="virtual-machine-crash-logs-see-httpwww.java.comendownloadhelperror_hotspot.xml">virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml</h1><p>hs_err_pid*</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p>通用的Visual Studio开发项目忽视文件：<img data-src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" /> View Code</p><p>idea忽视文件：</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p>.idea/ *.iml out/ gen/ idea-gitignore.jar resources/templates.list resources/gitignore/* build/ build.properties junit*.properties IgnoreLexer.java~ .gradle</p><p>/verification</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><h3 id="提交">4.3.7、提交</h3><p>通过add只是将文件或目录添加到了index暂存区，使用commit可以实现将暂存区的文件提交到本地仓库。</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p># 提交暂存区到仓库区 $ git commit -m [message]</p><h1 id="提交暂存区的指定文件到仓库区">提交暂存区的指定文件到仓库区</h1><p>$ git commit [file1] [file2] ... -m [message]</p><h1 id="提交工作区自上次commit之后的变化直接到仓库区跳过了add对新文件无效">提交工作区自上次commit之后的变化，直接到仓库区，跳过了add,对新文件无效</h1><p>$ git commit -a</p><h1 id="提交时显示所有diff信息">提交时显示所有diff信息</h1><p>$ git commit -v</p><h1 id="使用一次新的commit替代上一次提交">使用一次新的commit，替代上一次提交</h1><h1 id="如果代码没有任何新变化则用来改写上一次commit的提交信息">如果代码没有任何新变化，则用来改写上一次commit的提交信息</h1><p>$ git commit --amend -m [message]</p><h1 id="重做上一次commit并包括指定文件的新变化">重做上一次commit，并包括指定文件的新变化</h1><p>$ git commit --amend [file1] [file2] ...</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p>示例：</p><p>提交前的状态</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170906153238929-20184387.png" /></p><p>提交：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170906153319819-191287492.png" /></p><p>提交后的状态：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170906153352694-1534298704.png" /></p><p>从上图中可以看出暂存区中没有了bar.htm</p><p><strong>修订提交</strong></p><p>如果我们提交过后发现有个文件改错了，或者只是想修改提交说明，这时可以对相应文件做出修改，将修改过的文件通过"git add"添加到暂存区，然后执行以下命令：</p><p>#修订提交 git commit --amend</p><p><strong>撤销提交（commit）</strong></p><p>原理就是放弃工作区和index的改动，同时HEAD指针指向前一个commit对象</p><p>#撤销上一次的提交 git reset --hard HEAD~1</p><p> 要通过git log查看提交日志，也可直接指定提交编号或序号</p><p>示例：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170906215817304-744932869.png" /></p><p>撤销提交<br />git revert <commit-id><br />这条命令会把指定的提交的所有修改回滚，并同时生成一个新的提交。</p><h3 id="日志与历史">4.3.8、日志与历史</h3><p>查看提交日志可以使用git log指令，语法格式如下：</p><p>#查看提交日志 git log [<options>] [<revision range>] [[\--] <path>…?]</p><p>示例：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170906162101757-272912226.png" /></p><p>"git log --graph"以图形化的方式显示提交历史的关系，这就可以方便地查看提交历史的分支信息，当然是控制台用字符画出来的图形。</p><p>"git log -1"则表示显示1行。</p><p>使用history可以查看您在bash下输入过的指令：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170906162304663-1459403979.png" /></p><p>几乎所有输入过的都被记录下来的，不愧是做版本控制的。</p><p><strong>查看所有分支日志</strong></p><p>"git reflog"中会记录这个仓库中所有的分支的所有更新记录，包括已经撤销的更新。</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170907101206757-412323808.png" /></p><h3 id="查看文件列表">4.3.9、查看文件列表</h3><p>使用git ls-files指令可以查看指定状态的文件列表，格式如下：</p><p>#查看指定状态的文件 git ls-files [-z] [-t] [-v] (--[cacheddeletedothersignoredstageunmergedkilledmodified])* (-[cdoisukm])*</p><p>示例：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170906213836397-1160093052.png" /></p><h3 id="撤销更新">4.3.10、撤销更新</h3><p><strong>1）、撤销暂存区更新</strong></p><p>使用"git add"把更新提交到了暂存区。这时"git status"的输出中提示我们可以通过"git reset HEAD <file>..."把暂存区的更新移出到WorkSpace中</p><p>示例：f6已经提交，工作区修改，暂存区修改，撤销</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170906233841179-595609603.png" /></p><p><strong>2)、撤销本地仓库更新</strong></p><p>使用git log查看提交日志</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170906234944507-1852886113.png" /></p><p>撤销提交有两种方式：<strong>使用HEAD指针</strong>和<strong>使用commit id</strong></p><p>在Git中，有一个HEAD指针指向当前分支中最新的提交。当前版本，我们使用"HEAD<sup>"，那么再钱一个版本可以使用"HEAD"，如果想回退到更早的提交，可以使用"HEAD<sub>n"。（也就是，HEAD^=HEAD</sub>1，HEAD</sup>^=HEAD~2）</p><p>git reset --hard HEAD^ git reset --hard HEAD~1 git reset --59cf9334cf957535cb328f22a1579b84db0911e5</p><p>示例：回退到添加f6</p><p>回退前：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170906235156351-597175458.png" /></p><p>回退后：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170906235057710-1820019779.png" /></p><p>现在又想恢复被撤销的提交可用"git reflog"查看仓库中所有的分支的所有更新记录，包括已经撤销的更新，撤销方法与前面一样。</p><p>git reset --hard HEAD@{7} git reset --hard e0e79d7</p><p>--hard：撤销并删除相应的更新</p><p>--soft：撤销相应的更新，把这些更新的内容放到Stage中</p><h3 id="删除文件">4.3.11、删除文件</h3><p><strong>1）、删除未跟踪文件</strong></p><p>如果文件还是未跟踪状态，直接删除文件就可了，bash中使用rm可以删除文件，示例如下：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170907105943507-935637930.png" /></p><p><strong>2）、删除已提交文件</strong></p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170907110401929-1828626391.png" /></p><p>-f 强制删除，物理删除了，同时删除工作区和暂存区中的文件</p><p><strong>撤销删除：</strong></p><p>#to discard changes in working directory git checkout -- <file>...</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170907111343257-1372946435.png" /></p><p><strong>3）、删除暂存区的文件，不删除工作区的文件</strong></p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170907111546679-1645938864.png" /></p><p>使用git reset HEAD <file>...同样可以实现上面的功能</p><h3 id="文件操作小结">4.3.12、文件操作小结</h3><p><img data-src="https://images0.cnblogs.com/blog/221923/201501/061510341401056.png" /></p><p> Git很强大，很灵活，这是毋庸置疑的。但也正因为它的强大造成了它的复杂，因此会有很多奇奇怪怪的问题出现，多用就好了。</p><h2 id="git分支">4.4、GIT分支</h2><p>分支在GIT中相对较难</p><p>分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。</p><p>如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN！</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180920210529631-1549374224.png" /></p><p>分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。</p><p>现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。</p><p>Git分支的速度非常快。</p><p>截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。</p><p><img data-src="https://images0.cnblogs.com/blog/168097/201308/20194528-f5bf7e93960148a782f9d72f93a134bc.png" /></p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170905212648335-1801547172.gif" /></p><figure><img data-src="https://images0.cnblogs.com/blog/554581/201505/231044049057798.png" alt="特性分支的图示" /><figcaption aria-hidden="true">特性分支的图示</figcaption></figure><p>git分支中常用指令：</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p># 列出所有本地分支 $ git branch</p><h1 id="列出所有远程分支">列出所有远程分支</h1><p>$ git branch -r</p><h1 id="列出所有本地分支和远程分支">列出所有本地分支和远程分支</h1><p>$ git branch -a</p><h1 id="新建一个分支但依然停留在当前分支">新建一个分支，但依然停留在当前分支</h1><p>$ git branch [branch-name]</p><h1 id="新建一个分支并切换到该分支">新建一个分支，并切换到该分支</h1><p>$ git checkout -b [branch]</p><h1 id="新建一个分支指向指定commit">新建一个分支，指向指定commit</h1><p>$ git branch [branch] [commit]</p><h1 id="新建一个分支与指定的远程分支建立追踪关系">新建一个分支，与指定的远程分支建立追踪关系</h1><p>$ git branch --track [branch] [remote-branch]</p><h1 id="切换到指定分支并更新工作区">切换到指定分支，并更新工作区</h1><p>$ git checkout [branch-name]</p><h1 id="切换到上一个分支">切换到上一个分支</h1><p>$ git checkout -</p><h1 id="建立追踪关系在现有分支与指定的远程分支之间">建立追踪关系，在现有分支与指定的远程分支之间</h1><p>$ git branch --set-upstream [branch] [remote-branch]</p><h1 id="合并指定分支到当前分支">合并指定分支到当前分支</h1><p>$ git merge [branch]</p><h1 id="选择一个commit合并进当前分支">选择一个commit，合并进当前分支</h1><p>$ git cherry-pick [commit]</p><h1 id="删除分支">删除分支</h1><p>$ git branch -d [branch-name]</p><h1 id="删除远程分支">删除远程分支</h1><p>$ git push origin --delete [branch-name] $ git branch -dr [remote/branch]</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><h3 id="新建分支与切换分支">4.4.1、新建分支与切换分支</h3><p>每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。<br />一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点：<br /><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180920210647291-1528543055.png" /></p><p>每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长：</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180920210256578-751843766.gif" /></p><p>默认分支是这样的，master是主分支</p><figure><img data-src="https://www.liaoxuefeng.com/files/attachments/0013849087937492135fbf4bbd24dfcbc18349a8a59d36d000/0" alt="git-br-initial" /><figcaption aria-hidden="true">git-br-initial</figcaption></figure><p>1）、新建一个分支，但依然停留在当前分支，使用：$ git branch [branch-name]</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908102319366-860612118.png" /></p><p>切换分支到dev1后的结果：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908110413257-321369438.png" /></p><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375840038939c291467cc7c747b1810aab2fb8863508000">关于分支廖雪峰解释的比较清楚，我们引用一下</a>。</p><p>当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上：</p><figure><img data-src="https://www.liaoxuefeng.com/files/attachments/001384908811773187a597e2d844eefb11f5cf5d56135ca000/0" alt="git-br-create" /><figcaption aria-hidden="true">git-br-create</figcaption></figure><p>你看，Git创建一个分支很快，因为除了增加一个<code>dev</code>指针，改改<code>HEAD</code>的指向，工作区的文件都没有任何变化！</p><p>不过，从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变：</p><figure><img data-src="https://www.liaoxuefeng.com/files/attachments/0013849088235627813efe7649b4f008900e5365bb72323000/0" alt="git-br-dev-fd" /><figcaption aria-hidden="true">git-br-dev-fd</figcaption></figure><p>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并：</p><figure><img data-src="https://www.liaoxuefeng.com/files/attachments/00138490883510324231a837e5d4aee844d3e4692ba50f5000/0" alt="git-br-ff-merge" /><figcaption aria-hidden="true">git-br-ff-merge</figcaption></figure><p>所以Git合并分支也很快！就改改指针，工作区内容也不变！</p><p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支：</p><figure><img data-src="https://www.liaoxuefeng.com/files/attachments/001384908867187c83ca970bf0f46efa19badad99c40235000/0" alt="git-br-rm" /><figcaption aria-hidden="true">git-br-rm</figcaption></figure><p>动画演示：</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180920210908347-486995158.gif" /></p><p>2）、切换分支，git branch <name>，如果name为-则为上一个分支</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908132937991-1683911580.png" /></p><p>切换为上一个分支</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908133024413-690367079.png" /></p><p>3）、新建一个分支，并切换到该分支，$ git checkout -b [branch]</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908111024772-643503878.png" /></p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908111155288-294742108.png" /></p><p>4）、新建一个分支，指向指定commit使用命令：$ git branch [branch] [commit]</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908134134241-2117296784.png" /></p><p>上面创建了dev3分支且指向了master中首次提交的位置，切换到dev3查看日志如下：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908134438476-888421004.png" /></p><p>master上本来有两个提交记录的，此时的dev3指向的是第1次提交的位置</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908134547913-960980351.png" /></p><p> 5）、新建一个分支，与指定的远程分支建立追踪关系使用命令：$ git branch --track [branch] [remote-branch]</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908160347741-1146762696.png" /></p><h3 id="查看分支">4.4.2、查看分支</h3><p>1）、列出所有本地分支使用$ git branch</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908160532413-665563097.png" /></p><p>2）、列表所有远程分支使用$ git branch -r</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908160625554-32272071.png" /></p><p>3)、列出所有本地分支和远程分支使用$ git branch -a</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908160704413-490309889.png" /></p><h3 id="分支合并">4.4.3、分支合并</h3><p>合并指定分支到当前分支使用指令$ git merge [branch]</p><p>这里的合并分支就是对分支的指针操作，我们先创建一个分支再合并到主分支：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908200941007-525713587.png" /></p><p>这里的file11.txt主分支与dev6的内容现在是不同的，因为在dev6中已被修改过，我们可以使用指令查看：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908201243038-1579475148.png" /></p><p>现在我们将dev6合并到主分支中去，从下图中可以看出dev6中有一次提交，而master并没有</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908201946241-1502411831.png" /></p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908202307929-640297009.png" /></p><p>合并后在master上查看file11.txt文件内容与dev6上的内容就一样了，合并后dev6中多出的提交在master也拥有了。</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908202408257-864175348.png" /></p><h3 id="解决冲突">4.4.4、解决冲突</h3><p>如果同一个文件在合并分支时都被修改了则会引起冲突，如下所示：</p><p>提交前两个分支的状态</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908210135757-25776448.png" /></p><p>在dev6分支中同样修改file11.txt</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908210227741-1265576286.png" /></p><p>dev6与master分支中file11.txt文件都被修改且提交了，现在合并分支</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908210610835-267872418.png" /></p><p>提示冲突，现在我们看看file11.txt在master分支中的状态</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908210749319-1779643226.png" /></p><p>Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，其中&lt;&lt;&lt;HEAD是指主分支修改的内容，&gt;&gt;&gt;&gt;&gt;dev6 是指dev6上修改的内容</p><p>解决的办法是我们可以修改冲突文件后重新提交，请注意当前的状态产master MERGING：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908211751257-770094797.png" /></p><p>重新提交后冲突解决：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908212011241-1014866334.png" /></p><p>手动解决完冲突后就可以把此文件添 加到索引(index)中去，用git commit命令来提交，就像平时修改了一个文件 一样。</p><p>用_git log --graph_命令可以看到分支合并图。</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908212534382-1166076106.png" /></p><p><strong>分支策略</strong></p><p>master主分支应该非常稳定，用来发布新版本，一般情况下不允许在上面工作，工作一般情况下在新建的dev分支上工作，工作完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。</p><h3 id="删除分支-1">4.4.5、删除分支</h3><p>删除本地分支可以使用命令：$ git branch -d [branch-name]，-D（大写）强制删除</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908213554257-570203049.png" /></p><p>删除远程分支可以使用如下指令：</p><p>$ git push origin --delete [branch-name]</p><p>$ git branch -dr [remote/branch]</p><p>-d表示删除分支。分支必须完全合并在其上游分支，或者在HEAD上没有设置上游</p><p>-r表示远程的意思remotes，如果-dr则表示删除远程分支</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908215310460-364059006.png" /></p><h2 id="git-gui-操作">4.5、Git GUI 操作</h2><p>通过命令行可以深刻的理解Git，Git GUI或IDE插件却可以更加直观操作Git，常用的Git GUI有如下这些：</p><h3 id="github-for-desktop">4.5.1、GitHub for Desktop</h3><p>全球开发人员交友俱乐部提供的强大工具，功能完善，使用方便。对于使用GitHub的开发人员来说是非常便捷的工具。</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170907140035413-1131037433.png" /></p><p>GitHub for Desktop不带三方合并工具，你必须自己手动解决冲突才可以。</p><p>– 免费<br />– 同时支持 Windows 和 Mac：对于需要经常在不同的操作系统间切换的开发人员来说非常方便。<br />– 漂亮的界面：作为每天盯着看的工具，颜值是非常重要的<br />– 支持Pull Request：直接从客户端提交PR，很方便<br />– Timeline 支持：直接在时间线上显示每次提交的时间点和大小<br />– 支持git LFS：存储大文件更加节省空间和高效<br />– 不支持三方合并：需要借助第三方工具才行</p><h3 id="source-tree">4.5.2、Source Tree</h3><p>SourceTree是老牌的Git GUI管理工具了，也号称是最好用的Git GUI工具。强大，功能丰富，基本操作和高级操作都设计得非常流畅，适合初学者上手，支持Git Flow。</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170907140158757-544911682.png" /></p><p>– 免费<br />– 功能强大：无论你是新手还是重度用户，SourceTree 都会让你觉得很顺手。对于非常重度用户，Source Tree还支持自定义脚本的执行。<br />– 同时支持 Windows 和 Mac 操作系统<br />– 同时支持 Git 和 Mercurial 两种 VCS<br />– 内置GitHub, BitBucket 和 Stash 的支持：直接绑定帐号即可操作远程repo</p><h3 id="tortoisegit">4.5.3、TortoiseGit</h3><p>小乌龟，SVN的超广泛使用也使得这个超好用的Svn客户端成了几乎每个开发人员的桌面必备软件。小乌龟只提供Windows版本，提供中文版支持的。</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170907140326304-1891514624.png" /></p><p>– 免费<br />– 只支持Windows操作系统：与文件管理器的良好集成<br />– 中文界面<br />– 与TortoiseSVN一脉相承的操作体验</p><h3 id="git集成gui工具">4.5.4、Git集成Gui工具</h3><p>安装Git时会集成安装Gui工具，在Git菜单下可以找到，特点是：免费、简单、不需要额外安装</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170907140832085-1204207971.png" /></p><h2 id="ide集成的git客户端">4.6、IDE集成的Git客户端</h2><p>对于使用IDE进行开发的程序员来说，可以不离开常用的IDE就直接操作源代码管理系统是最好的选择，以下是我对几个常见的IDE集成的git客户端：</p><h3 id="eclipse-egit">4.6.1、Eclipse – Egit</h3><p>作为Java集成开发环境的代表，Eclipse内置了egit这个插件来提供git的集成支持。实话实说，这个插件的功能非常丰富，无论是普通的clone, commit, pull/push操作；还是复杂一些的git flow都有支持。</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170907160153538-341592917.png" /></p><h3 id="visual-studio-git-integration-github-extension">4.6.2、Visual Studio – Git Integration &amp; GitHub Extension</h3><p>VS里面的Git支持已经相当的完善。直接克隆github上的repo</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170907175457757-369811937.png" /></p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170907160233319-365419113.png" /></p><h3 id="intellij-idea">4.6.3、IntelliJ IDEA</h3><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170907160932882-1312828188.png" /></p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170907161123257-1702754976.png" /></p><h2 id="帮助与代码统计">4.7、帮助与代码统计</h2><p><strong>1）、帮助文档</strong></p><p>完整的安装了Git后有一个官方帮助，这是最权威的资料，方法如下：</p><p>比如我们要查看git commit的使用</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908220526257-321639384.png" /></p><p>执行时会打开对应的git帮助文档，其实就在本地，当然您也可以去官网在线搜索，地址是： <a href="https://git-scm.com/docs">https://git-scm.com/docs</a>。</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908220755226-1752282117.png" /></p><p><strong>2）、信息查看与统计命令</strong></p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p>#统计某人的代码提交量，包括增加，删除： git log --author=<strong>"$(git config --get user.name)"</strong> --pretty=tformat: --numstat gawk <strong>'{ add += $1 ; subs += $2 ; loc += $1 - $2 } END { printf "added lines: %s removed lines : %s total lines: %s\n",add,subs,loc }'</strong> -</p><p>#仓库提交者排名前 5（如果看全部，去掉 head 管道即可）： git log --pretty=<strong>'%aN'</strong> sort uniq -c sort -k1 -n -r head -n 5</p><p>#仓库提交者（邮箱）排名前 5：这个统计可能不会太准，因为很多人有不同的邮箱，但会使用相同的名字 git log --pretty=format:%ae gawk -- <strong>'{ ++c[$0]; } END { for(cc in c) printf "%5d %s\n",c[cc],cc; }'</strong> sort -u -n -r head -n 5</p><p>#贡献者统计： git log --pretty=<strong>'%aN'</strong> sort -u wc -l</p><p>#提交数统计： git log --oneline wc -l</p><h1 id="显示有变更的文件">显示有变更的文件</h1><p>$ git status</p><h1 id="显示当前分支的版本历史">显示当前分支的版本历史</h1><p>$ git log</p><h1 id="显示commit历史以及每次commit发生变更的文件">显示commit历史，以及每次commit发生变更的文件</h1><p>$ git log --stat</p><h1 id="搜索提交历史根据关键词">搜索提交历史，根据关键词</h1><p>$ git log -S [keyword]</p><h1 id="显示某个commit之后的所有变动每个commit占据一行">显示某个commit之后的所有变动，每个commit占据一行</h1><p>$ git log [tag] HEAD --pretty=format:%s</p><h1 id="显示某个commit之后的所有变动其提交说明必须符合搜索条件">显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</h1><p>$ git log [tag] HEAD --grep feature</p><h1 id="显示某个文件的版本历史包括文件改名">显示某个文件的版本历史，包括文件改名</h1><p>$ git log --follow [file] $ git whatchanged [file]</p><h1 id="显示指定文件相关的每一次diff">显示指定文件相关的每一次diff</h1><p>$ git log -p [file]</p><h1 id="显示过去5次提交">显示过去5次提交</h1><p>$ git log -5 --pretty --oneline</p><h1 id="显示所有提交过的用户按提交次数排序">显示所有提交过的用户，按提交次数排序</h1><p>$ git shortlog -sn</p><h1 id="显示指定文件是什么人在什么时间修改过">显示指定文件是什么人在什么时间修改过</h1><p>$ git blame [file]</p><h1 id="显示暂存区和工作区的差异">显示暂存区和工作区的差异</h1><p>$ git diff</p><h1 id="显示暂存区和上一个commit的差异">显示暂存区和上一个commit的差异</h1><p>$ git diff --cached [file]</p><h1 id="显示工作区与当前分支最新commit之间的差异">显示工作区与当前分支最新commit之间的差异</h1><p>$ git diff HEAD</p><h1 id="显示两次提交之间的差异">显示两次提交之间的差异</h1><p>$ git diff [first-branch]...[second-branch]</p><h1 id="显示今天你写了多少行代码">显示今天你写了多少行代码</h1><p>$ git diff --shortstat <strong>"@{0 day ago}"</strong></p><h1 id="显示某次提交的元数据和内容变化">显示某次提交的元数据和内容变化</h1><p>$ git show [commit]</p><h1 id="显示某次提交发生变化的文件">显示某次提交发生变化的文件</h1><p>$ git show --name-only [commit]</p><h1 id="显示某次提交时某个文件的内容">显示某次提交时，某个文件的内容</h1><p>$ git show [commit]:[filename]</p><h1 id="显示当前分支的最近几次提交">显示当前分支的最近几次提交</h1><p>$ git reflog</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p>示例：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908221829116-134750466.png" /></p><h1 id="五远程仓库">五、远程仓库</h1><p>Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上，但开发参与者必须在同一个网络中，且必须有一个项目的原始版本，通常的办法是让一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。完全可以自己搭建一台运行Git的服务器但现在更适合的做法是使用免费的托管平台。</p><p>同时相较于传统的代码都是管理到本机或者内网。 一旦本机或者内网机器出问题，代码可能会丢失，使用远端代码仓库将永远存在一个备份。同时也免去了搭建本地代码版本控制服务的繁琐。 云计算时代 Git 以其强大的分支和克隆功能，更加方便了开发者远程协作。</p><h2 id="托管平台">5.1、托管平台</h2><p>Git代码托管平台，首先推荐的是GitHub，好多好的开源项目都来自GitHub，但是GitHub只能新建公开的Git仓库，私有仓库要收费，有时候访问比较卡，如果你做的是一个开源项目，可以首选GitHub。下面推荐几个比较好的Git代码托管平台：</p><h3 id="github"><strong>5.1.1、GitHub</strong></h3><p>关于GItHub相信大家都有耳闻，我就不详细介绍了。GitHub地址： <a href="https://github.com/">https://github.com/</a>，其首页如图：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170907163230647-1553459974.png" /></p><h3 id="gitlab"><strong>5.1.2、Gitlab</strong></h3><p>对于有些人，提到GitHub就会自然的想到Gitlab,Gitlab支持无限的公有项目和私有项目。Gitlab地址： <a href="https://about.gitlab.com/">https://about.gitlab.com/</a>，其首页截图如图：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908232416038-78562400.png" /></p><h3 id="bitbucket"><strong>5.1.3、Bitbucket</strong></h3><p>bitbucket<strong>免费支持5个开发成员的团队创建无限私有代码托管库</strong>。bitbucket地址：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908232541022-628927929.png" /></p><h3 id="开源中国代码托管"><strong>5.1.4、开源中国代码托管</strong></h3><p>开源中国一个账号最多可以创建1000个项目，包含公有和私有，开源中国代码托管地址： <a href="https://bitbucket.org/">http://git.oschina.net/</a>，其首页如图：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908231825210-161687220.png" /></p><h3 id="推荐coding.net">5.1.5、(推荐)coding.net</h3><p>谈到coding.net,首先必须提的是速度快，功能与开源中国相似，同样一个账号最多可以创建1000个项目(5个私有)，也支持任务的创建等。coding.net地址： <a href="https://coding.net/">https://coding.net/</a>：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170907163009335-1747153204.png" /></p><p>我个人比较推荐Coding.net、GItHub。</p><p>当然还有许多，如CSDN，百度，阿里等，欢迎大家比较后推荐。</p><p>选择国外的主机请考虑网速，选择国内的主机请考虑稳定与安全性。</p><h2 id="申请帐号与设置">5.2、申请帐号与设置</h2><p>因为coding.net免费，可以创建私有项目，且速度不错，这里我们以coding.net为托管平台完成远程仓库的帐号申请与操作。</p><h3 id="申请帐号">5.2.1、申请帐号</h3><p>1）、打开 <a href="https://coding.net/">https://coding.net/</a>，点击右上角的注册按钮：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170907181140835-1585524305.png" /></p><p> 2)、填写好注册信息通过邮箱或手机验证后注册就成功了。登录到个人首页。</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170907195449147-1451952853.png" /></p><p>如果是QQ邮箱请注意激活邮件可能会被当着垃圾邮件，到垃圾箱中可以找到。</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170907195931444-1942096571.png" /></p><h3 id="创建项目">5.2.2、创建项目</h3><p>登录成功后，点击左侧菜单项目，点击加号新建项目，这里创建的是一个公开项目，没有Readme.md、许可证与忽视文件，原因是如果你本地已经有一个项目了，想提交到远程仓库而新创建的3个文件本地没有，当然有办法但初学避免麻烦这里我就不添加这三个文件了，输入相关信息后点击创建就成功了。</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170907200515007-1400118509.png" /></p><h3 id="提交源代码到远程仓库">5.2.3、提交源代码到远程仓库</h3><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170907201134616-522881160.png" /></p><p>从上图可以看出创建地址有两种：</p><p>https 类型的：https://git.coding.net/zhangguoGit/project7.git</p><p>SSH类型的：git@git.coding.net:zhangguoGit/project7.git</p><h4 id="https推荐轻量级用户使用">HTTPS（推荐轻量级用户使用）</h4><p>使用加密的网页访问通道读写仓库，使用用户名及密码进行鉴权。 避免重复输入密码，查看 <a href="https://coding.net/help/faq/git/git.html#push-">怎样在每次 Push 时不用重复输入密码</a>？</p><blockquote><p>提示：Git 用户名为 Coding 的账户邮箱或者个性后缀，密码为 Coding 的账户密码。<br />注意：HTTPS 方式 push 大文件可能引发错误，查看  <a href="https://coding.net/help/faq/git/git.html">Push 出错怎么办</a>？</p></blockquote><h4 id="ssh推荐资深用户或经常推送大型文件用户使用">SSH（推荐资深用户或经常推送大型文件用户使用）</h4><p>SSH全称(Secure SHell)是一种网络协议，顾名思义就是非常安全的shell，主要用于计算机间加密传输。<br />使用加密通道读写仓库，无单次上传限制，需先设置 <a href="https://coding.net/help/doc/git/ssh-key.html#ssh-">“账户 SSH 公钥”</a>，完成配对验证。</p><p>导入仓库可以将已存在的Git项目或SVN项目直接导入。</p><p>在命令行创建项目：</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p>#1、创建目录 mkdir project7</p><p>#2、进入目录 cd project7</p><p>#3、初始化目录为git项目 git init</p><p>#4、创建md文件追加内容# project7(一级标题) echo <strong>"# project7"</strong> &gt;&gt; README.md</p><p>#5、添加说明文件到暂存区 git add README.md</p><p>#6、提交到本地仓库并写日志 git commit -m <strong>"first commit"</strong></p><p>#7、添加远程主机，主机名为origin 地址为https://git.coding.net/zhangguoGit/project7.git git remote add origin https://git.coding.net/zhangguoGit/project7.git</p><p>#8、本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了，-u 参数指定一个默认主机 git push -u origin master</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p>如果创建已经创建则只需要第7步与第8步就好了。</p><h3 id="markdown文件.md文件">5.2.4、Markdown文件（.md文件）</h3><p>Markdown 是一种轻量级标记语言,它允许人们“使用易读易写的纯文本格式编写文档,然后转换成有效的XHTML(或者HTML)文档。</p><p>Markdown 语法的目标是：成为一种适用于网络的书写语言。</p><h4 id="标题">1.标题</h4><p><code># 一级标题</code><br /><code>## 二级标题</code><br /><code>### 三级标题</code><br /><code>#### 四级标题</code><br /><code>##### 五级标题</code><br /><code>###### 六级标题</code></p><p class="heading" id="七级标题">七级标题</p><p>效果：</p><p><img data-src="https://images2015.cnblogs.com/blog/600165/201701/600165-20170121165419890-1445220158.png" /></p><h4 id="列表">2.列表</h4><p>分为有序列表和无序列表。</p><p><strong>有序列表</strong></p><p><code>1. 1</code><br /><code>2. 2</code><br /><code>3. 3</code></p><p><strong>无序列表</strong></p><p><code>* 1</code><br /><code>* 2</code><br /><code>* 3</code></p><h4 id="引用">3.引用</h4><p><code>&gt; 这是引用</code></p><h4 id="图片和链接">4.图片和链接</h4><p>两者格式区别在于“ ! ”。</p><p><code>![图片描述](图片链接)</code></p><p><code>[链接描述](链接地址)</code></p><h4 id="粗体和斜体">5.粗体和斜体</h4><p><code>**这是粗体**</code></p><p><code>*这是斜体*</code></p><h4 id="表格">6.表格</h4><p><code>Tables Are Cool</code><br /><code>------------ :------------: -----:</code><br /><code>col 3 is right-aligned $1600</code><br /><code>col 2 is centered $12</code><br /><code>zebra stripes are neat &amp;1</code></p><h4 id="代码框">7.代码框</h4><p><code>用``这个把代码包裹起来</code></p><h4 id="分割线">8.分割线</h4><p>输入<code>***</code>即可。</p><p>示例：<img data-src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" /> View Code</p><p>对应的HTML:<img data-src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" /> View Code</p><p>结果：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170907210054679-1023512249.png" /></p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170907210200163-1550642136.png" /></p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170907210125585-383098544.png" /></p><p><a href="http://tool.oschina.net/markdown/">在线实时预览</a>工具</p><p><img data-src="https://segmentfault.com/img/bVdcyw" /></p><h2 id="远程仓库操作">5.3、远程仓库操作</h2><p>申请到了Git远程仓库的帐号并创建了一个空的远程仓库现在我们就可以结合本地的仓库与远程仓库一起协同工作了，模拟多人协同开发，这里我们全部使用命令完成。</p><h3 id="常用操作指令">5.3.1、常用操作指令</h3><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p># 下载远程仓库的所有变动 $ git fetch [remote]</p><h1 id="显示所有远程仓库">显示所有远程仓库</h1><p>$ git remote -v</p><h1 id="显示某个远程仓库的信息">显示某个远程仓库的信息</h1><p>$ git remote show [remote]</p><h1 id="增加一个新的远程仓库并命名">增加一个新的远程仓库，并命名</h1><p>$ git remote add [shortname] [url]</p><h1 id="取回远程仓库的变化并与本地分支合并">取回远程仓库的变化，并与本地分支合并</h1><p>$ git pull [remote] [branch]</p><h1 id="上传本地指定分支到远程仓库">上传本地指定分支到远程仓库</h1><p>$ git push [remote] [branch]</p><h1 id="强行推送当前分支到远程仓库即使有冲突">强行推送当前分支到远程仓库，即使有冲突</h1><p>$ git push [remote] --force</p><h1 id="推送所有分支到远程仓库">推送所有分支到远程仓库</h1><p>$ git push [remote] --all</p><p>#简单查看远程---所有仓库 git remote （只能查看远程仓库的名字）<br />#查看单个仓库 git remote show [remote-branch-name]</p><p>#新建远程仓库 git remote add [branchname] [url]</p><p>#修改远程仓库 git remote rename [oldname] [newname]</p><p>#删除远程仓库 git remote rm [remote-name]</p><p>#获取远程仓库数据 git fetch [remote-name] (获取仓库所有更新，但不自动合并当前分支) git pull (获取仓库所有更新，并自动合并到当前分支)</p><p>#上传数据，如git push origin master git push [remote-name] [branch]</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><h3 id="git-clone-克隆">5.3.2、git clone 克隆</h3><p>远程操作的第一步，通常是从远程主机克隆一个版本库，这时就要用到<code>git clone</code>命令。</p><p>$ git clone <版本库的网址></p><p>比如，克隆一个上课示例的版本库。</p><p>$ git clone https://github.com/zhangguo5/AngularJS04_BookStore.git</p><p>该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为<code>git clone</code>命令的第二个参数。</p><p>$ git clone <版本库的网址> <本地目录名></p><p><code>git clone</code>支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p>$ git clone http[s]://example.com/path/to/repo.git/ $ git clone ssh://example.com/path/to/repo.git/ $ git clone git://example.com/path/to/repo.git/ $ git clone /opt/git/project.git $ git clone file:///opt/git/project.git $ git clone ftp[s]://example.com/path/to/repo.git/ $ git clone rsync://example.com/path/to/repo.git/</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p>SSH协议还有另一种写法。</p><p>$ git clone [user@]example.com:path/to/repo.git/</p><p>通常来说，Git协议下载速度最快，SSH协议用于需要用户认证的场合。各种协议优劣的详细讨论请参考 <a href="http://git-scm.com/book/en/Git-on-the-Server-The-Protocols">官方文档</a>。</p><p>示例：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908222646397-430894497.png" /></p><p>结果：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908222707960-282622883.png" /></p><h3 id="git-remote">5.3.3、git remote</h3><p>为了便于管理，Git要求每个远程主机都必须指定一个主机名。<code>git remote</code>命令就用于管理主机名。</p><p>不带选项的时候，<code>git remote</code>命令列出所有远程主机。</p><p>$ git remote</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908222818397-722213136.png" /></p><p>使用<code>-v</code>选项，可以参看远程主机的网址。</p><p>$ git remote -v</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908222926897-216628652.png" /></p><p>上面命令表示，当前只有一台远程主机，叫做origin，以及它的网址。</p><p>克隆版本库的时候，所使用的远程主机自动被Git命名为<code>origin</code>。如果想用其他的主机名，需要用<code>git clone</code>命令的<code>-o</code>选项指定。</p><p>$ git clone -o WeUI https://github.com/Tencent/weui.git $ git remote</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908223611616-773447420.png" /></p><p>上面命令表示，克隆的时候，指定远程主机叫做WeUI。</p><p><code>git remote show</code>命令加上主机名，可以查看该主机的详细信息。</p><p>$ git remote show <主机名></p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908223918257-1858209596.png" /></p><p><code>git remote add</code>命令用于添加远程主机。</p><p>$ git remote add <主机名> <网址></p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908224213663-945242668.png" /></p><p><code>git remote rm</code>命令用于删除远程主机。</p><p>$ git remote rm <主机名></p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908224407179-621857253.png" /></p><p><code>git remote rename</code>命令用于远程主机的改名。</p><p>$ git remote rename <原主机名> <新主机名></p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908224328835-2011669932.png" /></p><h3 id="git-fetch">5.3.4、git fetch</h3><p>一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到<code>git fetch</code>命令。</p><p>$ git fetch <远程主机名></p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908224517710-282516709.png" /></p><p>上面命令将某个远程主机的更新，全部取回本地。</p><p><code>git fetch</code>命令通常用来查看其他人的进程，因为它取回的代码对你本地的开发代码没有影响。</p><p>默认情况下，<code>git fetch</code>取回所有分支（branch）的更新。如果只想取回特定分支的更新，可以指定分支名。</p><p>$ git fetch <远程主机名> <分支名></p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908224858882-553214269.png" /></p><p>比如，取回<code>origin</code>主机的<code>master</code>分支。</p><p>$ git fetch origin master</p><p>所取回的更新，在本地主机上要用"远程主机名/分支名"的形式读取。比如<code>origin</code>主机的<code>master</code>，就要用<code>origin/master</code>读取。</p><p><code>git branch</code>命令的<code>-r</code>选项，可以用来查看远程分支，<code>-a</code>选项查看所有分支。</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p>$ git branch -r origin/master</p><p>$ git branch -a * master remotes/origin/master</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p>上面命令表示，本地主机的当前分支是<code>master</code>，远程分支是<code>origin/master</code>。</p><p>取回远程主机的更新以后，可以在它的基础上，使用<code>git checkout</code>命令创建一个新的分支。</p><p>$ git checkout -b newBrach origin/master</p><p>上面命令表示，在<code>origin/master</code>的基础上，创建一个新分支。</p><p>此外，也可以使用<code>git merge</code>命令或者<code>git rebase</code>命令，在本地分支上合并远程分支。</p><p>$ git merge origin/master # 或者 $ git rebase origin/master</p><p>上面命令表示在当前分支上，合并<code>origin/master</code>。</p><h3 id="git-pull">5.3.5、git pull</h3><p><code>git pull</code>命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。</p><p>$ git pull <远程主机名> <远程分支名>:<本地分支名></p><p>比如，取回<code>origin</code>主机的<code>next</code>分支，与本地的<code>master</code>分支合并，需要写成下面这样。</p><p>$ git pull origin next:master</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908225306444-501626163.png" /></p><p>如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</p><p>$ git pull origin next</p><p>上面命令表示，取回<code>origin/next</code>分支，再与当前分支合并。实质上，这等同于先做<code>git fetch</code>，再做<code>git merge</code>。</p><p>$ git fetch origin $ git merge origin/next</p><p>在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在<code>git clone</code>的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的<code>master</code>分支自动"追踪"<code>origin/master</code>分支。</p><p>Git也允许手动建立追踪关系。</p><p>git branch --set-upstream master origin/next</p><p>上面命令指定<code>master</code>分支追踪<code>origin/next</code>分支。</p><p>如果当前分支与远程分支存在追踪关系，<code>git pull</code>就可以省略远程分支名。</p><p>$ git pull origin</p><p>上面命令表示，本地的当前分支自动与对应的<code>origin</code>主机"追踪分支"（remote-tracking branch）进行合并。</p><p>如果当前分支只有一个追踪分支，连远程主机名都可以省略。</p><p>$ git pull</p><p>上面命令表示，当前分支自动与唯一一个追踪分支进行合并。</p><p>如果合并需要采用rebase模式，可以使用<code>--rebase</code>选项。</p><p>$ git pull --rebase <远程主机名> <远程分支名>:<本地分支名></p><p>如果远程主机删除了某个分支，默认情况下，<code>git pull</code> 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致<code>git pull</code>不知不觉删除了本地分支。</p><p>但是，你可以改变这个行为，加上参数 <code>-p</code> 就会在本地删除远程已经删除的分支。</p><p>$ git pull -p # 等同于下面的命令 $ git fetch --prune origin $ git fetch -p</p><h3 id="git-push">5.3.6、git push</h3><p><code>git push</code>命令用于将本地分支的更新，推送到远程主机。它的格式与<code>git pull</code>命令相仿。</p><p>$ git push <远程主机名> <本地分支名>:<远程分支名></p><p>注意，分支推送顺序的写法是<来源地>:<目的地>，所以<code>git pull</code>是<远程分支>:<本地分支>，而<code>git push</code>是<本地分支>:<远程分支>。</p><p>如果省略远程分支名，则表示将本地分支推送与之存在"追踪关系"的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。</p><p>$ git push origin master</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908225504819-2024610007.png" /></p><p>上面命令表示，将本地的<code>master</code>分支推送到<code>origin</code>主机的<code>master</code>分支。如果后者不存在，则会被新建。</p><p>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。</p><p>$ git push origin :master # 等同于 $ git push origin --delete master</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908225743272-1924279457.png" /></p><p>上面命令表示删除<code>origin</code>主机的<code>master</code>分支。</p><p>如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。</p><p>$ git push origin</p><p>上面命令表示，将当前分支推送到<code>origin</code>主机的对应分支。</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170908230824710-1381765944.png" /></p><p>如果是新建分支第一次push，会提示：<br />　　fatal: The current branch dev1 has no upstream branch.<br />　　To push the current branch and set the remote as upstream, use<br />　　git push --set-upstream origin dev1<br />　　输入这行命令，然后输入用户名和密码，就push成功了。</p><p>　　以后的push就只需要输入git push origin</p><p>原因是：</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p>#因为在git的全局配置中，有一个push.default属性，其决定了git push操作的默认行为。在Git 2.0之前，这个属性的默认被设为'matching'，2.0之后则被更改为了'simple'。</p><p>#我们可以通过git version确定当前的git版本（如果小于2.0，更新是个更好的选择），通过git config --global push.default 'option'改变push.default的默认行为（或者也可直接编辑~/.gitconfig文件）。</p><p>push.default 有以下几个可选值： nothing, current, upstream, simple, matching</p><p>其用途分别为： nothing - push操作无效，除非显式指定远程分支，例如git push origin develop（我觉得。。。可以给那些不愿学git的同事配上此项）。 current - push当前分支到远程同名分支，如果远程同名分支不存在则自动创建同名分支。 upstream - push当前分支到它的upstream分支上（这一项其实用于经常从本地分支push/pull到同一远程仓库的情景，这种模式叫做central workflow）。 simple - simple和upstream是相似的，只有一点不同，simple必须保证本地分支和它的远程 upstream分支同名，否则会拒绝push操作。 matching - push所有本地和远程两端都存在的同名分支。<br />因此如果我们使用了git2.0之前的版本，push.default = matching，git push后则会推送当前分支代码到远程分支，而2.0之后，push.default = simple，如果没有指定当前分支的upstream分支，就会收到上文的fatal提示。</p><p><a href="javascript:void(0);"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></p><p>如果当前分支只有一个追踪分支，那么主机名都可以省略。</p><p>$ git push</p><p>如果当前分支与多个主机存在追踪关系，则可以使用<code>-u</code>选项指定一个默认主机，这样后面就可以不加任何参数使用<code>git push</code>。</p><p>$ git push -u origin master</p><p>上面命令将本地的<code>master</code>分支推送到<code>origin</code>主机，同时指定<code>origin</code>为默认主机，后面就可以不加任何参数使用<code>git push</code>了。</p><p>不带任何参数的<code>git push</code>，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用<code>git config</code>命令。</p><p>$ git config --global push.default matching # 或者 $ git config --global push.default simple</p><p>还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用<code>--all</code>选项。</p><p>$ git push --all origin</p><p>上面命令表示，将所有本地分支都推送到<code>origin</code>主机。</p><p>如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做<code>git pull</code>合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用<code>--force</code>选项。</p><p>$ git push --force origin</p><p>上面命令使用<code>--force</code>选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用<code>--force</code>选项。</p><p>最后，<code>git push</code>不会推送标签（tag），除非使用<code>--tags</code>选项。</p><p>$ git push origin --tags</p><h2 id="在命令行中同步本地仓库示例">5.4、在命令行中同步本地仓库示例</h2><p>假定我们创建好了一个远程仓库地址为：https://coding.net/u/zhangguo5/p/project7/git，现在我们在本地创建一个项目并同步到远程仓库中。</p><p>1）、创建文件添加到暂存区</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170907221032944-2131239213.png" /></p><p>2）、提交到本地仓库</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170907233021210-1805159090.png" /></p><p>3）、提交到远程仓库</p><p>添加远程主机地址：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170907233146726-618960592.png" /></p><p>推送文件：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170907233217163-1083264263.png" /></p><p>结果：</p><p><img data-src="https://images2017.cnblogs.com/blog/63651/201709/63651-20170907233514601-722647890.png" /></p><p>说明：这里我使用的是SSH方式提交的，所有并没有让我输入用户名与密码，如果你使用https方式提交则要配置用户名与邮箱，还要输入密码。</p><h2 id="idea中git的使用">5.5、IDEA中Git的使用</h2><p>工作中多人使用版本控制软件协作开发，常见的应用场景归纳如下：</p><p>假设小组中有两个人，组长盖茨，组员艾伦</p><p>场景一：盖茨创建项目并提交到远程Git仓库</p><p>场景二：艾伦从远程Git仓库上获取项目源码</p><p>场景三：艾伦修改了部分源码，提交到远程仓库</p><p>场景四：盖茨从远程仓库获取艾伦的提交</p><p>场景五：艾伦接受了一个新功能的任务，创建了一个分支并在分支上开发</p><p>场景六：艾伦把分支提交到远程Git仓库</p><p>场景七：盖茨获取艾伦提交的分支</p><p>场景八：盖茨把分支合并到主干</p><p>下面来看以上各场景在IDEA中对应的操作。</p><h3 id="场景一盖茨创建项目并提交到远程git仓库">场景一：盖茨创建项目并提交到远程Git仓库</h3><p>在IDEA中配置Git</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180920141427767-901140053.png" /></p><p>测试环境是否正常</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180920141409311-586608847.png" /></p><p>创建好项目，这里创建了一个Maven项目，结构如下，当然可以是任意项目：</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180920143021934-620435706.png" /></p><p>选择VCS - &gt; Enable Version Control Integration，允许将项目集成到版本控制器中</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180920143127862-875826995.png" /></p><p>选择版本控制器类型</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180920143252849-358884850.png" /></p><p>完成后当前项目就变成一个Git项目，是工作空间</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180920143444863-1229632962.png" /></p><p>点击OK后创建完成本地仓库，注意，这里仅仅是本地的。下面把项目源码添加到本地仓库。</p><p>下图是Git与提交有关的三个命令对应的操作，Add命令是把文件从IDE的工作目录添加到本地仓库的stage区，Commit命令把stage区的暂存文件提交到当前分支的仓库，并清空stage区。Push命令把本地仓库的提交同步到远程仓库。</p><p><img data-src="http://img.blog.csdn.net/20160912164147415" /></p><p>IDEA中对操作做了一定的简化，Commit和Push可以在一步中完成。</p><p>具体操作，在项目上点击右键，选择Git菜单，如果使用Add则将文件从工作空间提交到暂存库，Commit Directory则是同时完成提交到暂存与本地仓库。</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180920143700375-806004833.png" /></p><p> 选择要提交的文件，填写消息</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180920143830555-392877031.png" /></p><p>将本地仓库的内容提交到远程仓库</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180920144004253-519745931.png" /></p><p> 定义远程地址的别名</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180920144050315-1166288414.png" /></p><p> 输入名称与URL</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180920144129834-1942009089.png" /></p><p> 点击push将本地仓库的内容推送到远程服务器</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180920144159428-1481782478.png" /></p><p> 提示Push Successful就成功了</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180920144245875-982615328.png" /></p><p> 提交后的远程库</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180920152326515-1222065389.png" /></p><h3 id="场景二艾伦从远程git仓库上获取项目源码">场景二：艾伦从远程Git仓库上获取项目源码</h3><p>即克隆项目，操作如下：</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180921090308063-894175099.png" /></p><p>输入盖茨Push时填写的远程仓库地址</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180921090539618-574071207.png" /></p><p>填写仓库地址、要克隆到的父目录与项目目录</p><p>接下来按向导操作，即可把项目从远程仓艾伦隆到本地仓库和IDE工作区。</p><p>当提示签出成功点击打开就可以看到项目了</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180921091133126-1795267174.png" /></p><p>下载到本地的文件</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180921091153215-1596000519.png" /></p><p>其它方法</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180921092509906-1699848482.png" /></p><h3 id="场景三艾伦修改了部分源码提交到远程仓库">场景三：艾伦修改了部分源码，提交到远程仓库</h3><p>这个操作和首次提交的流程基本一致，分别是 Add -&gt; Commit -&gt; Push。请参考场景一</p><p> 添加一个类，并提交</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180921092810217-620233879.png" /></p><p>提交到本地仓库</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180921092952435-275640137.png" /></p><p>提交到远程仓库</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180921093048080-1290516284.png" /></p><h3 id="场景四盖茨从远程仓库获取艾伦的提交">场景四：盖茨从远程仓库获取艾伦的提交</h3><p>获取更新有两个命令：Fetch和Pull，Fetch是从远程仓库下载文件到本地的origin/master，然后可以手动对比修改决定是否合并到本地的master库。Pull则是直接下载并合并。如果各成员在工作中都执行修改前先更新的规范，则可以直接使用Pull方式以简化操作。</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180921093340336-15924408.png" /></p><p>选择分支</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180921093502048-1763009179.png" /></p><h3 id="场景五艾伦接受了一个新功能的任务创建了一个分支并在分支上开发">场景五：艾伦接受了一个新功能的任务，创建了一个分支并在分支上开发</h3><p>建分支也是一个常用的操作，例如临时修改bug、开发不确定是否加入的功能等，都可以创建一个分支，再等待合适的时机合并到主干。</p><p>创建流程如下：</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180921103220405-236249664.png" /></p><p>选择New Branch并输入一个分支的名称</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180921103304779-1296696768.png" /></p><p>创建完成后注意IDEA的右下角，如下图，Git: dev表示已经自动切换到dev分支，当前工作在这个分支上。</p><p>点击后弹出一个小窗口，在Local Branches中有其他可用的本地分支选项，点击后选择Checkout即可切换当前工作的分支(见场景7操作切换其他分支)。</p><p>如下图，点击Checkout</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180921103657862-71867930.png" /></p><p>注意，这里创建的分支仅仅在本地仓库，如果想让组长盖茨获取到这个分支，还需要提交到远程仓库。</p><h3 id="场景六艾伦把分支提交到远程git仓库">场景六：艾伦把分支提交到远程Git仓库</h3><p>切换到新建的分支，使用Push功能</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180921110324518-1638272727.png" /></p><p>提交到远程</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180921103840955-1507128951.png" /></p><p>艾伦将新开发的功能提交到远程</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180921105157137-1125324175.png" /></p><p>提交到远程</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180921105256157-172806174.png" /></p><h3 id="场景七盖茨获取艾伦提交的分支">场景七：盖茨获取艾伦提交的分支</h3><p>使用Pull功能打开更新窗口，点击Remote栏后面的刷新按钮，会在Branches to merge栏中刷新出新的分支。这里并不想做合并，所以不要选中任何分支，直接点击Pull按钮完成操作。</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180921110528560-1474239907.png" /></p><p>更新后，再点击右下角，可以看到在Remote Branches区已经有了新的分支，点击后在弹出的子菜单中选择Checkout as new local branch，在本地仓库中创建该分支。完成后在Local Branches区也会出现该分支的选项，可以按上面的方法，点击后选择Checkout切换。</p><p>切换远程分支：</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180921110644482-1912206515.png" /></p><p>切换本地分支：</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180921111021875-866209849.png" /></p><h3 id="场景八盖茨把分支合并到主干">场景八：盖茨把分支合并到主干</h3><p>新功能开发完成，体验很好，项目组决定把该功能合并到主干上。</p><p>切换到master分支，选择Merge Changes</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180921111129568-2139545429.png" /></p><p>选择要合并的分支，点击Merge完成</p><p><img data-src="https://img2018.cnblogs.com/blog/63651/201809/63651-20180921111235450-1637014827.png" /></p><p><a href="https://pan.baidu.com/s/1qYlw2YS">Git教程下载_王亮（大神）</a></p><p>示例1：<img data-src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" /> View Code</p><p>示例2：<img data-src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" /> View Code</p><p>示例3：<img data-src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" /> View Code</p><p>Copyright © 2020 张果<br />Powered by .NET Core on Kubernetes</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用MYSQL QUERY browser时出现error1251的解决方案</title>
      <link href="/2020/07/15/%E4%BD%BF%E7%94%A8mysql-query-browser%E6%97%B6%E5%87%BA%E7%8E%B0error1251%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2020/07/15/%E4%BD%BF%E7%94%A8mysql-query-browser%E6%97%B6%E5%87%BA%E7%8E%B0error1251%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>出现1251一般是密码问题</p><p>首先使用cmd 输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>登录后输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter user root@localhost identified by &#x27;newpassword&#x27; password expire never;</span><br><span class="line"></span><br><span class="line">mysql&gt; alter user root@localhost identified with mysql_native_password by &#x27;newpassword&#x27;;</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;　　　　# 刷新权限</span><br></pre></td></tr></table></figure><p>newpassword是新密码</p><p>之后就可以正常链接了</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows10 MYSQL Installer 安装（mysql-installer-community-5.7.19.0.msi）</title>
      <link href="/2020/07/15/windows10-mysql-installer-%E5%AE%89%E8%A3%85%EF%BC%88mysql-installer-community-5-7-19-0-msi%EF%BC%89/"/>
      <url>/2020/07/15/windows10-mysql-installer-%E5%AE%89%E8%A3%85%EF%BC%88mysql-installer-community-5-7-19-0-msi%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>1.进入官网找到自己所需的安装包：https://dev.mysql.com/  ，路径：DOWNLOAD--&gt;MYSQL Community Edition(GRL)--&gt;MYSQL on Windows (Installer &amp; Tool)</p><p>或直接点击 <a href="https://dev.mysql.com/downloads/windows/installer/">https://dev.mysql.com/downloads/windows/installer/</a> 查看最新版本。</p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1202941-20170722225513168-99169810.png" /></p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1202941-20170722225525340-1635922988.png" /></p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831313-3095-20170722225535090-1925937407.png" /></p><p>2.找到所需的安装包,</p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831313-8105-20170722225609184-438065502.png" /></p><p>3.点击download。这里选择的是安装版（mysql -install-community）</p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831313-8141-1-20170722225738356-88388521.png" /></p><p>4.选择不登陆下载。</p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831313-7844-20170722225950840-2044210671.png" /></p><p>5.双击运行下载好的mysql-installer-community-5.7.19.0.msi，程序运行需要一些时间，请等待一下。</p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831314-6138-20170722230026215-1797155710.png" /></p><p>6.运行成功之后，进入欢迎的界面.选择我同意协议，不然无法进行下一步。</p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831314-1312-20170722230046043-978659071.png" /></p><p>7. 进入类型选择页面，本人需要mysql云服务就选择了developer default（7.1是默认安装的步骤），如果只想安装mysql server的就选择custom模式（7.2步骤是选择自己需要的服务器类型，所选择的用于做一些数据分析）</p><ul><li>developer default（开发者默认）：安装mysql开发所需的所有产品</li><li>server only（服务器）：只安装mysql服务器产品</li><li>client only（客户端）：只安装没有服务器的mysql客户端产品</li><li>full（完全）：安装所有包含的mysql产品和功能</li><li>custom（手动）：手动选择系统上应安装的产品</li></ul><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831314-6490-20170722230201246-220989429.png" /></p><p>7.1开发者默认模式检测以下程序会安装不成功，点击下一步进入下一个安装流程—&gt;跳到第八步。</p><p>check requirements：以下产品的请求失败，安装程序将自动尝试解决其中一些问题。标记为手动的要求无法自动解决。单击这些项目以尝试手动恢复。</p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831314-6339-20170722230232793-1759462371.png" /></p><p>检测到不可安装的程序说明：</p><p>Visual Studio：是一款代码编辑工具（可编写C#、Visual Basic、C++、TypeScript、F# ），如果你安装的话就安装要求去安装Visual Studio version：2012.2013.2015.2017其中一个版本</p><p>Connector/pyton 3.4：电脑有python3.6了就没选择3.4版本的。如果你没安装有python可按要求去安装一些内容。</p><p>7.2选择mysql server（服务） 5.7.19 x64</p><p>选择mysql workbench(mysql 的工作薄) 6.3.9 x64</p><p>选择mysql notiyier(通知) 1.1.7 x86(因为这里只有一个选择所以选择了86)点击下一步进入下一个安装流程—&gt;跳到第九步。</p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831314-7923-20170722230314340-1501335191.png" /></p><p>8.当我们点击下一步的时候安装程序出现了提示：（一个或者移动产品要求没有得到满足，那些符合要求的产品将不会安装/升级。你想要继续吗），这里我选择的是：YES</p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831315-4997-1-20170722230439528-92431868.png" /></p><p>9.在安装所选界面能看到我们接下来所需要安装的程序，点击execute</p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831315-6544-20170722230506262-176699446.png" /></p><p>10安装程序进度界面，安装需要一些时间。点击dide tails能看到安装日志</p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831315-4350-20170722230524700-2060141633.png" /></p><p>11.程序安装完成之后，点击next</p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831315-5686-20170722230808200-494027333.png" /></p><p>12.在product configutration（产品配置）页面能看到需要配置的程序，点击next（页面英语介绍：现在我们将逐一介绍以下产品的配置向导。您可以随时取消，如果您希望离开此向导，而不必配置所有产品）</p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831316-1727-20170722230838934-1132653366.png" /></p><p>13.先配置mysql server的类型以及网络：type and networking（类型和网络），这里有两种mysql server类型，选择第一种类型点击next。</p><p>有两种类型简单介绍</p><ul><li>1.standalone mysql server/classic mysql replication：独立的mysql服务器/经典的mysql复制。choose this option if you want to run the mysql server either standalone with the opportunity to later configure classic mysql replication：选择这个选项，如果你想运行mysql服务器是独立的，有机会以后配置经典的mysql复制</li><li>2. innodb cluster sandbox thst setup(for testing only)：</li></ul><p>innodb集群沙箱thst设置（仅用于测试）</p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831316-4284-20170722230918575-127114164.png" /></p><p>14.设置服务器配置类型以及连接端口：继续next</p><p>Config Type:选择Development Machine，用于小型以及学习所用足够了。</p><p>Port number：输入3306，也可以输入其他最好是3306-3309之间。</p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831316-1042-20170722231058356-1269244144.png" /></p><p>15.配置root的密码（该密码要记住），系统提示这密码虚弱</p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831317-1713-20170722231209903-956653442.png" /></p><p>16. 添加其他管理员，点击add user 输入账号密码点击ok（如果添加的管理员只允许在本地登录就将host改成local），回到界面之后点击next</p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831317-3908-20170722231228387-1590560639.png" /></p><p>17.配置mysql在windows系统中的名字，是否选择开机启动mysql服务，其它的没进行修改，点击"Next"。</p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831317-1586-20170722231608825-2099636815.png" /></p><p>18.配置插件和扩展页面没进行修改直接下一步：</p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831317-4097-20170722231638887-180558399.png" /></p><p>19.Mysql server :apply configuration（应用配置页面），选择execute进行安装配置</p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831318-8984-20170722231654278-649027984.png" /></p><p>20. mysql server应用配置的log，选择finish</p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831318-9740-20170722231714809-1553936235.png" /></p><p>21.安装程序又回到了product configutration（产品配置）页面，此时我们看到mysql server安装成功的显示，继续下一步：</p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831318-2164-20170722231738825-1692782858.png" /></p><p>22. 配置mysql router：勾选configure mysql route for innoDB cluster之后输入密码。（如果不想输入密码可直接点击点一下）点击下一步</p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831318-2952-20170722231755762-1299837152.png" /></p><p>23.Mysql router :apply configuration（应用配置页面）点击execute,</p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831319-7917-20170722231811528-357673493.png" /></p><p>24.安装完成之后点击选择finish</p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831319-7786-20170722231826746-634086390.png" /></p><p>25.检测root密码</p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831319-2072-20170722231844528-1242732523.png" /></p><p>26.安装一些server，老规矩点击execute，完成之后点击finish</p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831319-9386-20170722231902950-256599456.png" /></p><p>27. 程序回到产品配置页面。继续下一步：</p><p>28.安装程序完成界面。</p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831319-1406-20170722231933637-179722774.png" /></p><p>29. 双击运行之前下载的安装包，能看到我们所安装的产品。</p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831320-7960-20170722232012418-1876643408.png" /></p><p>30. 配置mysql环境变量</p><p>上面安装的是时候我们看到mysql默认安装路径是：C:\Program Files\MySQL\MySQL Server 5.7</p><p>我的电脑右键—&gt;属性à高级系统设置à环境变量à新建MYSQL_HOME,将安装目录输入：</p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831320-7374-41-20170722232031684-1843508.png" /></p><p>找到path编辑：输入%MYSQL_HOME%\bin</p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831320-5015-20170722232044090-1304683536.png" /></p><p>打开cmd输入mysql –u root –p</p><p>输入root的密码</p><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/10/1571831320-6727-20170722232055731-2127042770.png" /></p>]]></content>
      
      
      <categories>
          
          <category> 其他笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>稳定排序和不稳定排序</title>
      <link href="/2020/06/10/%E7%A8%B3%E5%AE%9A%E6%8E%92%E5%BA%8F%E5%92%8C%E4%B8%8D%E7%A8%B3%E5%AE%9A%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/06/10/%E7%A8%B3%E5%AE%9A%E6%8E%92%E5%BA%8F%E5%92%8C%E4%B8%8D%E7%A8%B3%E5%AE%9A%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>首先，排序算法的稳定性大家应该都知道，通俗地讲就是能保证排序前2个相等的数其在序列的前后位置顺序和排序后它们两个的前后位置顺序相同。在简单形式化一下，如果Ai = Aj，Ai原来在位置前，排序后Ai还是要在Aj位置前。</p><p>      其次，说一下稳定性的好处。排序算法如果是稳定的，那么从一个键上排序，然后再从另一个键上排序，第一个键排序的结果可以为第二个键排序所用。基数排序就是这样，先按低位排序，逐次按高位排序，低位相同的元素其顺序再高位也相同时是不会改变的。另外，如果排序算法稳定，对基于比较的排序算法而言，元素交换的次数可能会少一些（个人感觉，没有证实）。</p><p>回到主题，现在分析一下常见的排序算法的稳定性，每个都给出简单的理由。</p><p>(1)冒泡排序</p><p>冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，我想你是不会再无聊地把他们俩交换一下的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法。</p><p>(2)选择排序</p><p>选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，依次类推，直到第n - 1个元素，第n个元素不用选择了，因为只剩下它一个最大的元素了。那么，在一趟选择，如果当前元素比一个元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么交换后稳定性就被破坏了。比较拗口，举个例子，序列5 8 5 2 9，我们知道第一遍选择第1个元素5会和2交换，那么原序列中2个5的相对前后顺序就被破坏了，所以选择排序不是一个稳定的排序算法。</p><p>(3)插入排序<br />插入排序是在一个已经有序的小序列的基础上，一次插入一个元素。当然，刚开始这个有序的小序列只有1个元素，就是第一个元素。比较是从有序序列的末尾开始，也就是想要插入的元素和已经有序的最大者开始比起，如果比它大则直接插入在其后面，否则一直往前找直到找到它该插入的位置。如果碰见一个和插入元素相等的，那么插入元素把想插入的元素放在相等元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，所以插入排序是稳定的。</p><p>(4)快速排序<br />快速排序有两个方向，左边的i下标一直往右走，当a[i] &lt;= a[center_index]，其中center_index是中枢元素的数组下标，一般取为数组第0个元素。而右边的j下标一直往左走，当a[j] &gt; a[center_index]。如果i和j都走不动了，i &lt;= j，交换a[i]和a[j],重复上面的过程，直到i &gt; j。 交换a[j]和a[center_index]，完成一趟快速排序。在中枢元素和a[j]交换的时候，很有可能把前面的元素的稳定性打乱，比如序列为5 3 3 4 3 8 9 10 11，现在中枢元素5和3（第5个元素，下标从1开始计）交换就会把元素3的稳定性打乱，所以快速排序是一个不稳定的排序算法，不稳定发生在中枢元素和a[j] 交换的时刻。</p><p>(5)归并排序<br />归并排序是把序列递归地分成短序列，递归出口是短序列只有1个元素（认为直接有序）或者2个序列（1次比较和交换），然后把各个有序的段序列合并成一个有序的长序列，不断合并直到原序列全部排好序。可以发现，在1个或2个元素时，1个元素不会交换，2个元素如果大小相等也没有人故意交换，这不会破坏稳定性。那么，在短的有序序列合并的过程中，稳定是是否受到破坏？没有，合并过程中我们可以保证如果两个当前元素相等时，我们把处在前面的序列的元素保存在结果序列的前面，这样就保证了稳定性。所以，归并排序也是稳定的排序算法。</p><p>(6)基数排序<br />基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序，最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以其是稳定的排序算法。</p><p>(7)希尔排序(shell)<br />希尔排序是按照不同步长对元素进行插入排序，当刚开始元素很无序的时候，步长最大，所以插入排序的元素个数很少，速度很快；当元素基本有序了，步长很小， 插入排序对于有序的序列效率很高。所以，希尔排序的时间复杂度会比O(n^2)好一些。由于多次插入排序，我们知道一次插入排序是稳定的，不会改变相同元素的相对顺序，但在不同的插入排序过程中，相同的元素可能在各自的插入排序中移动，最后其稳定性就会被打乱，所以shell排序是不稳定的。</p><p>(8)堆排序<br />我们知道堆的结构是节点i的孩子为2 * i和2 * i + 1节点，大顶堆要求父节点大于等于其2个子节点，小顶堆要求父节点小于等于其2个子节点。在一个长为n 的序列，堆排序的过程是从第n / 2开始和其子节点共3个值选择最大（大顶堆）或者最小（小顶堆），这3个元素之间的选择当然不会破坏稳定性。但当为n / 2 - 1， n / 2 - 2， ... 1这些个父节点选择元素时，就会破坏稳定性。有可能第n / 2个父节点交换把后面一个元素交换过去了，而第n / 2 - 1个父节点把后面一个相同的元素没 有交换，那么这2个相同的元素之间的稳定性就被破坏了。所以，堆排序不是稳定的排序算法。</p><p>综上，得出结论: <strong>选择排序、快速排序、希尔排序、堆排序不是稳定的排序算法，而冒泡排序、插入排序、归并排序和基数排序是稳定的排序算法</strong></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>折半查找/二分查找判定树及平均查找长度</title>
      <link href="/2020/05/22/%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E5%88%A4%E5%AE%9A%E6%A0%91%E5%8F%8A%E5%B9%B3%E5%9D%87%E6%9F%A5%E6%89%BE%E9%95%BF%E5%BA%A6/"/>
      <url>/2020/05/22/%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E5%88%A4%E5%AE%9A%E6%A0%91%E5%8F%8A%E5%B9%B3%E5%9D%87%E6%9F%A5%E6%89%BE%E9%95%BF%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<p>长度为n的折半查找判定树的构造方法为：</p><p>⑴ 当n=0时，折半查找判定树为空；</p><p>⑵ 当n＞0时，折半查找判定树的根结点是有序表中序号为mid=(n+1)/2的记录，根结点的左子树是与有序表r[1] ~ r[mid-1]相对应的折半查找判定树，根结点的右子树是与r[mid+1] ~ r[n]相对应的折半查找判定树。</p><p>例如，长度为10的折半查找判定树的具体生成过程为：</p><p>⑴ 在长度为10的有序表中进行折半查找，不论查找哪个记录，都必须先和中间记录进行比较，而中间记录的序号为(1+10)/2=5（注意是整除即向下取整），即判定树的根结点是5，如图7-2(a)所示；</p><p>⑵ 考虑判定树的左子树，即将查找区间调整到左半区，此时的查找区间是</p><p>[1，4]，也就是说，左分支上为根结点的值减1，代表查找区间的高端high，此时，根结点的左孩子是(1+4)/2=2，如图7-2(b)所示；</p><p>⑶ 考虑判定树的右子树，即将查找区间调整到右半区，此时的查找区间是</p><p>[6，10]，也就是说，右分支上为根结点的值加1，代表查找区间的低端low，此时，根结点的右孩子是(6+10)/2=8，如图7-2(c)所示；</p><p>⑷ 重复⑵⑶步，依次确定每个结点的左右孩子，如图7-2(d)所示。</p><p><img data-src="https://img-blog.csdn.net/20160108180718291?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" /></p><p><img data-src="https://img-blog.csdn.net/20160108181550336?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" /></p><p>对于折半查找判定树，需要补充以下两点： <br />⑴ 折半查找判定树是一棵二叉排序树，即每个结点的值均大于其左子树上所有结点的值，小于其右子树上所有结点的值； <br />⑵ 折半查找判定树中的结点都是查找成功的情况，将每个结点的空指针指向一个实际上并不存在的结点——称为外结点，所有外结点即是查找不成功的情况，如图7-2(e)所示。如果有序表的长度为n，则外结点一定有n+1个。 在折半查找判定树中，某结点所在的层数即是查找该结点的比较次数，整个判定树代表的有序表的平均查找长度即为查找每个结点的比较次数之和除以有序表的长度。例如，长度为10的有序表的平均查找长度为： <br />ASL=(1×1+2×2+3×4+4×3)/10=29/10 <br />在折半查找判定树中，查找不成功时的比较次数即是查找相应外结点时与内结点的比较次数。整个判定树代表的有序表在查找失败时的平均查找长度即为查找每个外结点的比较次数之和除以外结点的个数。例如，长度为10的有序表在查找失败时的平均查找长度为： <br />ASL=(3×5+4×6)/11=39/11</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>7-3 求二叉树的叶子结点个数 (20分)</title>
      <link href="/2020/05/10/7-3-%E6%B1%82%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%8F%B6%E5%AD%90%E7%BB%93%E7%82%B9%E4%B8%AA%E6%95%B0-20%E5%88%86/"/>
      <url>/2020/05/10/7-3-%E6%B1%82%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%8F%B6%E5%AD%90%E7%BB%93%E7%82%B9%E4%B8%AA%E6%95%B0-20%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>以二叉链表作为二叉树的存储结构，求二叉树的叶子结点个数。</p><h3 id="输入格式">输入格式:</h3><p>输入二叉树的先序序列。</p><p>提示：一棵二叉树的先序序列是一个字符串，若字符是‘#’,表示该二叉树是空树，否则该字符是相应结点的数据元素。</p><h3 id="输出格式">输出格式:</h3><p>输出有两行：</p><p>第一行是二叉树的中序遍历序列；</p><p>第二行是二叉树的叶子结点个数。</p><h3 id="输入样例">输入样例:</h3><p>ABC##DE#G##F###</p><h3 id="输出样例">输出样例:</h3><p>CBEGDFA</p><p>3</p><p>需要三个函数：前序建立树，中序输出，计算叶子结点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//根据有#的前序遍历生成树</span><br><span class="line">tree fcreate()</span><br><span class="line">&#123;</span><br><span class="line">    tree t;</span><br><span class="line">    char s;</span><br><span class="line">    //按每个字符输入</span><br><span class="line">    scanf(&quot;%c&quot;,&amp;s);</span><br><span class="line">    if(s==&#x27;#&#x27;)return nullptr;</span><br><span class="line">    else &#123;</span><br><span class="line">        t=(tree)malloc(sizeof(struct treenode));</span><br><span class="line">        t-&gt;data = s;</span><br><span class="line">        t-&gt;lchild = fcreate();</span><br><span class="line">        t-&gt;rchild = fcreate();</span><br><span class="line">        return t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//中序输出</span><br><span class="line">void Inordertranverse(tree t)</span><br><span class="line">&#123;</span><br><span class="line">    if(!t)return;</span><br><span class="line">    Inordertranverse(t-&gt;lchild);</span><br><span class="line">    cout&lt;&lt;t-&gt;data;</span><br><span class="line">    Inordertranverse(t-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//计数树的根结点数</span><br><span class="line">int count(tree t,int c)</span><br><span class="line">&#123;</span><br><span class="line">    if(t) &#123;</span><br><span class="line">        if (t-&gt;lchild == nullptr &amp;&amp; t-&gt;rchild == nullptr)c++;</span><br><span class="line">        c=count(t-&gt;lchild, c);</span><br><span class="line">        c=count(t-&gt;rchild, c);</span><br><span class="line">    &#125;</span><br><span class="line">    return c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>7-4 交换二叉树中每个结点的左孩子和右孩子 (20分)</title>
      <link href="/2020/05/10/7-4-%E4%BA%A4%E6%8D%A2%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E6%AF%8F%E4%B8%AA%E7%BB%93%E7%82%B9%E7%9A%84%E5%B7%A6%E5%AD%A9%E5%AD%90%E5%92%8C%E5%8F%B3%E5%AD%A9%E5%AD%90-20%E5%88%86/"/>
      <url>/2020/05/10/7-4-%E4%BA%A4%E6%8D%A2%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E6%AF%8F%E4%B8%AA%E7%BB%93%E7%82%B9%E7%9A%84%E5%B7%A6%E5%AD%A9%E5%AD%90%E5%92%8C%E5%8F%B3%E5%AD%A9%E5%AD%90-20%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>以二叉链表作为二叉树的存储结构，交换二叉树中每个结点的左孩子和右孩子。</p><h3 id="输入格式">输入格式:</h3><p>输入二叉树的先序序列。</p><p>提示：一棵二叉树的先序序列是一个字符串，若字符是‘#’,表示该二叉树是空树，否则该字符是相应结点的数据元素。</p><h3 id="输出格式">输出格式:</h3><p>输出有两行：</p><p>第一行是原二叉树的中序遍历序列；</p><p>第二行是交换后的二叉树的中序遍历序列。</p><h3 id="输入样例">输入样例:</h3><p>ABC##DE#G##F###</p><h3 id="输出样例">输出样例:</h3><p>CBEGDFA</p><p>AFDGEBC</p><p>需要三个函数：根据前序输入生成树，交换，中序输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//根据有#的前序遍历生成树</span><br><span class="line">tree fcreate()</span><br><span class="line">&#123;</span><br><span class="line">    tree t;</span><br><span class="line">    char s;</span><br><span class="line">    //按每个字符输入</span><br><span class="line">    scanf(&quot;%c&quot;,&amp;s);</span><br><span class="line">    if(s==&#x27;#&#x27;)return nullptr;</span><br><span class="line">    else &#123;</span><br><span class="line">        t=(tree)malloc(sizeof(struct treenode));</span><br><span class="line">        t-&gt;data = s;</span><br><span class="line">        t-&gt;lchild = fcreate();</span><br><span class="line">        t-&gt;rchild = fcreate();</span><br><span class="line">        return t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void Inordertranverse(tree t)</span><br><span class="line">&#123;</span><br><span class="line">    if(!t)return;</span><br><span class="line">    Inordertranverse(t-&gt;lchild);</span><br><span class="line">    cout&lt;&lt;t-&gt;data;</span><br><span class="line">    Inordertranverse(t-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//交换每个结点左右子树</span><br><span class="line">void Exchange(tree &amp;bt)</span><br><span class="line">&#123;</span><br><span class="line">    tree temp;</span><br><span class="line">    if(bt)&#123;</span><br><span class="line">        temp = bt -&gt; lchild;</span><br><span class="line">        bt -&gt; lchild = bt -&gt; rchild;</span><br><span class="line">        bt -&gt; rchild = temp;</span><br><span class="line">        Exchange(bt -&gt; lchild);</span><br><span class="line">        Exchange(bt -&gt; rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    tree t;</span><br><span class="line">    t=fcreate();</span><br><span class="line">    Inordertranverse(t);</span><br><span class="line">    Exchange(t);</span><br><span class="line">    Inordertranverse(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>7-1 三元组顺序表表示的稀疏矩阵转置Ⅱ (10分)</title>
      <link href="/2020/04/24/7-1-%E4%B8%89%E5%85%83%E7%BB%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E8%A1%A8%E7%A4%BA%E7%9A%84%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5%E8%BD%AC%E7%BD%AE%E2%85%B1-10%E5%88%86/"/>
      <url>/2020/04/24/7-1-%E4%B8%89%E5%85%83%E7%BB%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E8%A1%A8%E7%A4%BA%E7%9A%84%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5%E8%BD%AC%E7%BD%AE%E2%85%B1-10%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>三元组顺序表表示的稀疏矩阵转置Ⅱ。设a和b为三元组顺序表变量，分别表示矩阵M和T。要求按照a中三元组的次序进行转置，并将转置后的三元组置入b中恰当的位置。</p><h3 id="输入格式">输入格式:</h3><p>输入第1行为矩阵行数m、列数n及非零元素个数t。 按行优先顺序依次输入t行，每行3个数，分别表示非零元素的行标、列标和值。</p><h3 id="输出格式">输出格式:</h3><p>按置入b中的顺序输出置入的位置下标，转置后的三元组行标、列标和值，数据之间用空格分隔，共t行。</p><h3 id="输入样例1">输入样例1:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 4 3</span><br><span class="line">0 1 -5</span><br><span class="line">1 0 1</span><br><span class="line">2 2 2</span><br></pre></td></tr></table></figure><h3 id="输出样例1">输出样例1:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 1 0 -5</span><br><span class="line">0 0 1 1</span><br><span class="line">2 2 2 2</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">    int x,y;</span><br><span class="line">    int data;</span><br><span class="line">&#125;triple;</span><br><span class="line"></span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">    triple data[1001];</span><br><span class="line">    int mu,nu,tu;</span><br><span class="line">&#125;TSMatrix;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    TSMatrix m1,m2;</span><br><span class="line">    int m,n,t;</span><br><span class="line">    cin&gt;&gt;m&gt;&gt;n&gt;&gt;t;</span><br><span class="line">    m1.mu=m;m1.nu=n;m1.tu=t;</span><br><span class="line">    for (int i = 0; i &lt; t; ++i) &#123;</span><br><span class="line">        cin&gt;&gt;m1.data[i].x&gt;&gt;m1.data[i].y&gt;&gt;m1.data[i].data;</span><br><span class="line">    &#125;</span><br><span class="line">    m2.mu=m1.nu;m2.nu=m1.mu;m2.tu=m1.tu;</span><br><span class="line">    if(m2.tu)</span><br><span class="line">    &#123;</span><br><span class="line">        int q=0;</span><br><span class="line">        for (int i = 0; i &lt; m1.nu; ++i) &#123;</span><br><span class="line">            for (int j = 0; j &lt; m1.tu; ++j) &#123;</span><br><span class="line">                if (m1.data[j].y==i)</span><br><span class="line">                &#123;</span><br><span class="line">                    m2.data[q].x=m1.data[j].y;</span><br><span class="line">                    m2.data[q].y=m1.data[j].x;</span><br><span class="line">                    m2.data[q].data=m1.data[j].data;</span><br><span class="line">                    q++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int k = 0; k &lt; m1.nu; ++k) &#123;</span><br><span class="line">            for (int i = 0; i &lt; m1.tu; ++i) &#123;</span><br><span class="line">                if(m2.data[i].y==k)</span><br><span class="line">                &#123;</span><br><span class="line">                    cout&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;m2.data[i].x&lt;&lt;&quot; &quot;&lt;&lt;m2.data[i].y&lt;&lt;&quot; &quot;&lt;&lt;m2.data[i].data&lt;&lt;endl;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>对称矩阵压缩存储的地址计算</title>
      <link href="/2020/04/20/%E5%AF%B9%E7%A7%B0%E7%9F%A9%E9%98%B5%E5%8E%8B%E7%BC%A9%E5%AD%98%E5%82%A8%E7%9A%84%E5%9C%B0%E5%9D%80%E8%AE%A1%E7%AE%97/"/>
      <url>/2020/04/20/%E5%AF%B9%E7%A7%B0%E7%9F%A9%E9%98%B5%E5%8E%8B%E7%BC%A9%E5%AD%98%E5%82%A8%E7%9A%84%E5%9C%B0%E5%9D%80%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p>设有一个10对称矩阵A，采用压缩存储，a[0][0]地址为1000，每个元素占两个字节，则a[3][6]地址为多少？</p><p>对对称阵进行压缩存取是将对称元素只存一个，并将<a href="https://www.baidu.com/s?wd=%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao">数据存储</a>在一维数组中<br />首先来确定a[i][j]在b[k]中的i，j与k的关系<br />首先是判定i与j的关系， 如果是下三角存储，则分一下两种情况<br />1、如果i&lt;j, 则交换i与j的值，将上copy三角的位置值变换到下三角位置<br />2、如果i&gt;=j，则不用执行操作直接走下面的流程</p><p>此时，i表示行坐标，j表示了坐标i之前有i行，即有1+2+...+i = (i+1)*i/2，在i标识的第i+1行有j+1个元素，由此zd可以确定k的值为(i+1)*i/2+j+1 = k+1 由此可得k = (i+1)*i/2+j</p><p>由此可以的，a[3][6], i=3, j=6, 由于i&lt;j, 交换得i=6， j=3<br />由此 k = (6+1)*6/2+3 = 24<br />又由于&amp;b[0] = 1000 每个元素占两个字节, 则b[24] = 1000+2*24 = 1048<br />由此便得到a[3][6]的地址为1048</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>串编程题</title>
      <link href="/2020/04/12/%E4%B8%B2%E7%BC%96%E7%A8%8B%E9%A2%98/"/>
      <url>/2020/04/12/%E4%B8%B2%E7%BC%96%E7%A8%8B%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>7-1 串的模式匹配 (30分)</p><p>给定一个主串S（长度&lt;=10<sup>6）和一个模式T（长度&lt;=10</sup>5），要求在主串S中找出与模式T相匹配的子串，返回相匹配的子串中的第一个字符在主串S中出现的位置。</p><h3 id="输入格式">输入格式:</h3><p>输入有两行： 第一行是主串S； 第二行是模式T.</p><h3 id="输出格式">输出格式:</h3><p>输出相匹配的子串中的第一个字符在主串S中出现的位置。若匹配失败，输出0.</p><h3 id="输入样例">输入样例:</h3><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aaaaaba</span><br><span class="line">ba</span><br></pre></td></tr></table></figure><h3 id="输出样例">输出样例:</h3><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><p>首先有kmp算法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line">typedef int Status;</span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">    char *ch;</span><br><span class="line">    int length;</span><br><span class="line">&#125;HString;</span><br><span class="line"></span><br><span class="line">//把string类型变成char*类型</span><br><span class="line">char* trans(string s)</span><br><span class="line">&#123;</span><br><span class="line">    int size = s.length();</span><br><span class="line">    char* s1=new char[size];</span><br><span class="line">    strcpy(s1,s.c_str());</span><br><span class="line">    return s1;</span><br><span class="line">&#125;</span><br><span class="line">//生成串s1</span><br><span class="line">Status Strassign(HString &amp;s1,char *char1)</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    char *c;</span><br><span class="line">    //if(s1.ch)free(s1.ch);</span><br><span class="line">    //i为char1长度</span><br><span class="line">    for (i = 0,c=char1; *c ; ++c,++i) ;</span><br><span class="line">    //如果char1为空返回空指针</span><br><span class="line">    if(!i)&#123;s1.ch=nullptr;return 0;&#125;</span><br><span class="line">    s1.ch=(char*)malloc(i* sizeof(char));</span><br><span class="line">    for (int j = 0; j &lt;i ; ++j) &#123;</span><br><span class="line">        s1.ch[j]=char1[j];</span><br><span class="line">    &#125;</span><br><span class="line">    s1.length=i;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//把s2和s3链接到s1中</span><br><span class="line">Status Concat(HString &amp;s1,HString s2,HString s3)</span><br><span class="line">&#123;</span><br><span class="line">    //if(s1.ch)free(s1.ch);</span><br><span class="line">    if(s2.length+s3.length&lt;=0)&#123;s1.ch= nullptr;return 0;&#125;</span><br><span class="line">    s1.ch=(char*)malloc((s2.length+s3.length)* sizeof(char));</span><br><span class="line">    for (int i = 0; i &lt; s2.length; ++i) &#123;</span><br><span class="line">        s1.ch[i]=s2.ch[i];</span><br><span class="line">    &#125;</span><br><span class="line">    for (int j = 0; j &lt; s3.length; ++j) &#123;</span><br><span class="line">        s1.ch[j+s2.length]=s3.ch[j];</span><br><span class="line">    &#125;</span><br><span class="line">    s1.length=s2.length+s3.length;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//输出串</span><br><span class="line">Status Printstr(HString &amp;s1)</span><br><span class="line">&#123;</span><br><span class="line">    if(!s1.ch)&#123; return 0;&#125;</span><br><span class="line">    for (int i = 0; i &lt; s1.length; ++i) &#123;</span><br><span class="line">        cout&lt;&lt;s1.ch[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//模式匹配</span><br><span class="line">int Index(string S,string T,int pos)</span><br><span class="line">&#123;</span><br><span class="line">    int i=pos,j=0;</span><br><span class="line">    while (i&lt;S.length()&amp;&amp;j&lt;=T.length())</span><br><span class="line">    &#123;</span><br><span class="line">        if(S[i]==T[j])&#123;++i;++j;&#125;</span><br><span class="line">        else&#123;i=i-j+1;j=0;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(j&gt;=T.length())return i-j+1;</span><br><span class="line">    else return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    string s1,s2;</span><br><span class="line">    HString S1,S2,S3;</span><br><span class="line">    cin&gt;&gt;s1;</span><br><span class="line">    cin&gt;&gt;s2;</span><br><span class="line">    char*s=trans(s1);</span><br><span class="line">    char*m=trans(s2);</span><br><span class="line">    Strassign(S1,s);</span><br><span class="line">    Strassign(S2,m);</span><br><span class="line">    int i=Index(s1,s2,0);</span><br><span class="line">    cout&lt;&lt;i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一种bf算法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//BF算法模式匹配</span><br><span class="line">int Index(string S,string T,int pos)</span><br><span class="line">&#123;</span><br><span class="line">    int i=pos,j=0;</span><br><span class="line">    while (i&lt;S.length()&amp;&amp;j&lt;=T.length())</span><br><span class="line">    &#123;</span><br><span class="line">        if(S[i]==T[j])&#123;++i;++j;&#125;</span><br><span class="line">        else&#123;i=i-j+1;j=0;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(j&gt;=T.length())return i-j+1;</span><br><span class="line">    else return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>剩余时间:4天<a href="https://pintia.cn/problem-sets/1243874236683579392/problems/type/7">返回</a>7-2 jmu-ds-栈与队列-stack、queue与string小综合 (5分)</p><p><strong>使用栈与队列逐个处理字符串中的每个字符</strong></p><p>将line中的字符依次入栈，然后输出栈中元素个数与栈顶元素。<br />然后将栈中元素依次出栈并输出，出栈时将不等于x的字符依次入队列，以空格分隔。<br />输出队列元素个数，队头与队尾，以空格分隔。<br />最后输出队列中所有元素。</p><h3 id="输入格式-1">输入格式:</h3><p>输入一个个字符串 输入一个字符</p><h3 id="输出格式-1">输出格式:</h3><p>栈中元素个数 栈顶元素 栈中符合条件的元素(以空格分隔) 队列中元素个数 队头元素 队尾元素 队列中所有元素(以空格分隔)</p><h3 id="输入样例-1">输入样例:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThisIsATest s</span><br></pre></td></tr></table></figure><h3 id="输出样例-1">输出样例:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">11 t</span><br><span class="line">tseTAsIsihT</span><br><span class="line">8 t T</span><br><span class="line">teTAIihT</span><br></pre></td></tr></table></figure><p>可以用c++自带的stack和queue库来实现，省去自己写的麻烦</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    stack&lt;char&gt;s;</span><br><span class="line">    string str;</span><br><span class="line">    queue&lt;char&gt;Q;</span><br><span class="line">    char x;</span><br><span class="line">    cin&gt;&gt;str;</span><br><span class="line">    for (int i = 0; str[i]!=&#x27;\0&#x27;; ++i) &#123;</span><br><span class="line">        s.push(str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    cout&lt;&lt;s.size()&lt;&lt;&quot; &quot;&lt;&lt;s.top()&lt;&lt;endl;</span><br><span class="line">    while(!s.empty()) &#123;</span><br><span class="line">        cout&lt;&lt;s.top();</span><br><span class="line">        if(s.top()!=x)</span><br><span class="line">        &#123;</span><br><span class="line">            Q.push(s.top());</span><br><span class="line">        &#125;</span><br><span class="line">        s.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;Q.size()&lt;&lt;&quot; &quot;&lt;&lt;Q.front()&lt;&lt;&quot; &quot;&lt;&lt;Q.back()&lt;&lt;endl;</span><br><span class="line">    while (!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;Q.front();</span><br><span class="line">        Q.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>7-2 队列操作 (10分)</title>
      <link href="/2020/04/05/7-2-%E9%98%9F%E5%88%97%E6%93%8D%E4%BD%9C-10%E5%88%86/"/>
      <url>/2020/04/05/7-2-%E9%98%9F%E5%88%97%E6%93%8D%E4%BD%9C-10%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>请实现一个MyQueue类，实现出队，入队，求队列长度.</p><p>实现入队函数 void push(int x); 实现出队函数 int pop(); 实现求队列长度函数 int size();</p><h3 id="输入格式">输入格式:</h3><p>每个输入包含1个测试用例。每个测试用例第一行给出一个正整数 n (n &lt;= 10^6) ，接下去n行每行一个数字，表示一种操作： 1 x ： 表示从队尾插入x，0&lt;=x&lt;=2^31-1。 2 ： 表示队首元素出队。 3 ： 表示求队列长度。</p><h3 id="输出格式">输出格式:</h3><p>对于操作2,若队列为空，则输出 “Invalid”,否则请输出队首元素。 对于操作3，请输出队列长度。 每个输出项最后换行。</p><h3 id="输入样例">输入样例:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1 100</span><br><span class="line">3</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="输出样例">输出样例:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">Invalid</span><br><span class="line">1</span><br><span class="line">100</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">#define MAXQSIZE 100</span><br><span class="line">#define OK 1</span><br><span class="line">#define ERROR 0</span><br><span class="line">#define OVERFLOW -2</span><br><span class="line">typedef int QElemType;</span><br><span class="line">typedef char SElemType;</span><br><span class="line">typedef int Status;</span><br><span class="line"></span><br><span class="line">    typedef struct &#123;</span><br><span class="line">        QElemType *base;</span><br><span class="line">        int front;</span><br><span class="line">        int rear;</span><br><span class="line">    &#125; SqQueue;</span><br><span class="line"></span><br><span class="line">class MyQueue &#123;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    Status EnQueue(SqQueue &amp;Q, QElemType e) &#123;</span><br><span class="line">        if (</span><br><span class="line">                Q.front == (Q.rear + 1) % MAXQSIZE</span><br><span class="line">                )</span><br><span class="line">            return ERROR;</span><br><span class="line">        Q.base[Q.rear] = e;</span><br><span class="line"></span><br><span class="line">        Q.rear = (Q.rear + 1) % MAXQSIZE;</span><br><span class="line">        return OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Status DeQueue(SqQueue &amp;Q) &#123;</span><br><span class="line">        if (</span><br><span class="line">                Q.front == Q.rear</span><br><span class="line">                ) &#123;</span><br><span class="line">            cout &lt;&lt; &quot;Invalid&quot; &lt;&lt; endl;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        int e = Q.base[Q.front];</span><br><span class="line"></span><br><span class="line">        Q.front = (Q.front + 1) % MAXQSIZE;</span><br><span class="line">        cout&lt;&lt;e&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    Status size(SqQueue &amp;Q)</span><br><span class="line">    &#123;</span><br><span class="line">        return(Q.rear-Q.front+MAXQSIZE)%MAXQSIZE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Status InitQueue(SqQueue &amp;Q) &#123;</span><br><span class="line"></span><br><span class="line">        Q.base = new QElemType[MAXQSIZE];</span><br><span class="line">        if (!Q.base)</span><br><span class="line">            exit(OVERFLOW);</span><br><span class="line"></span><br><span class="line">        Q.rear = Q.front = 0;</span><br><span class="line">        return OK;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    SqQueue q;</span><br><span class="line">    MyQueue q1;</span><br><span class="line">    q1.InitQueue(q);</span><br><span class="line">    int n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class="line">        int t;</span><br><span class="line">        cin&gt;&gt;t;</span><br><span class="line">        switch(t) &#123;</span><br><span class="line">            case 1:</span><br><span class="line">                int temp;</span><br><span class="line">                cin&gt;&gt;temp;</span><br><span class="line">                q1.EnQueue(q,temp);</span><br><span class="line">                continue;</span><br><span class="line">            case 2:</span><br><span class="line">                q1.DeQueue(q);</span><br><span class="line">                continue;</span><br><span class="line">            case 3:</span><br><span class="line">                cout&lt;&lt;q1.size(q)&lt;&lt;endl;</span><br><span class="line">                continue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意switch语句需要有continue</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>7-1 银行业务队列简单模拟 (25分)</title>
      <link href="/2020/04/05/7-1-%E9%93%B6%E8%A1%8C%E4%B8%9A%E5%8A%A1%E9%98%9F%E5%88%97%E7%AE%80%E5%8D%95%E6%A8%A1%E6%8B%9F-25%E5%88%86/"/>
      <url>/2020/04/05/7-1-%E9%93%B6%E8%A1%8C%E4%B8%9A%E5%8A%A1%E9%98%9F%E5%88%97%E7%AE%80%E5%8D%95%E6%A8%A1%E6%8B%9F-25%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>设某银行有A、B两个业务窗口，且处理业务的速度不一样，其中A窗口处理速度是B窗口的2倍 —— 即当A窗口每处理完2个顾客时，B窗口处理完1个顾客。给定到达银行的顾客序列，请按业务完成的顺序输出顾客序列。假定不考虑顾客先后到达的时间间隔，并且当不同窗口同时处理完2个顾客时，A窗口顾客优先输出。</p><h3 id="输入格式">输入格式:</h3><p>输入为一行正整数，其中第1个数字N(≤1000)为顾客总数，后面跟着N位顾客的编号。编号为奇数的顾客需要到A窗口办理业务，为偶数的顾客则去B窗口。数字间以空格分隔。</p><h3 id="输出格式">输出格式:</h3><p>按业务处理完成的顺序输出顾客的编号。数字间以空格分隔，但最后一个编号后不能有多余的空格。</p><h3 id="输入样例">输入样例:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8 2 1 3 9 4 11 13 15</span><br></pre></td></tr></table></figure><h3 id="输出样例">输出样例:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 3 2 9 11 4 13 15</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#define MAXSIZE 1000</span><br><span class="line">#define OVERFLOW -2</span><br><span class="line">#define OK 1</span><br><span class="line">#define ERROR -1</span><br><span class="line">using namespace std;</span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">    int *base;</span><br><span class="line">    int front;</span><br><span class="line">    int rear;</span><br><span class="line">&#125; SqQueue;</span><br><span class="line">int InitQueue(SqQueue &amp;Q)</span><br><span class="line">&#123;</span><br><span class="line">    Q.base=new int[MAXSIZE];</span><br><span class="line">    if(!Q.base)</span><br><span class="line">        return OVERFLOW;</span><br><span class="line">    Q.front=Q.rear=0;</span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br><span class="line">int DeQueue(SqQueue &amp;Q,int &amp;e)</span><br><span class="line">&#123;</span><br><span class="line">    if(Q.front==Q.rear)</span><br><span class="line">        return ERROR;</span><br><span class="line">    e=Q.base[Q.front];</span><br><span class="line">    Q.front=(Q.front+1)%MAXSIZE;</span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br><span class="line">void Print(int *arr,int n)</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;arr[0];</span><br><span class="line">    for(int i=1;i&lt;n;i++)</span><br><span class="line">        cout&lt;&lt;&quot; &quot;&lt;&lt;arr[i];</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    SqQueue A,B;</span><br><span class="line">    InitQueue(A);</span><br><span class="line">    InitQueue(B);</span><br><span class="line">    int N,data,tmp,i=0;</span><br><span class="line">    cin&gt;&gt;N;</span><br><span class="line">    int result[N];</span><br><span class="line">    for(int i=0; i&lt;N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;data;</span><br><span class="line">        if(data%2!=0)</span><br><span class="line">        &#123;</span><br><span class="line">            if((A.rear+1)%MAXSIZE==A.front)</span><br><span class="line">                return ERROR;</span><br><span class="line">            A.base[A.rear]=data;</span><br><span class="line">            A.rear=(A.rear+1)%MAXSIZE;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            if((B.rear+1)%MAXSIZE==B.front)</span><br><span class="line">                return ERROR;</span><br><span class="line">            B.base[B.rear]=data;</span><br><span class="line">            B.rear=(B.rear+1)%MAXSIZE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    while((A.front!=A.rear)&amp;&amp;(B.front!=B.rear))</span><br><span class="line">    &#123;</span><br><span class="line">        DeQueue(A,tmp);</span><br><span class="line">        result[i++]=tmp;</span><br><span class="line">        DeQueue(A,tmp);</span><br><span class="line">        result[i++]=tmp;</span><br><span class="line">        DeQueue(B,tmp);</span><br><span class="line">        result[i++]=tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    while(A.front!=A.rear)</span><br><span class="line">    &#123;</span><br><span class="line">        DeQueue(A,tmp);</span><br><span class="line">        result[i++]=tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    while(B.front!=B.rear)</span><br><span class="line">    &#123;</span><br><span class="line">        DeQueue(B,tmp);</span><br><span class="line">        result[i++]=tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    Print(result,N);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>7-5 括号匹配 (18分)</title>
      <link href="/2020/04/01/7-5-%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D-18%E5%88%86/"/>
      <url>/2020/04/01/7-5-%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D-18%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>检查一段C语言代码的小括号<code>( )</code>、 中括号 <code>[ ]</code> 和大括号<code>&#123; &#125;</code> 是否匹配。</p><h3 id="输入格式">输入格式:</h3><p>在一行中输入一段C语言代码，长度不超过1000个字符（行末以换行符结束）。</p><h3 id="输出格式">输出格式:</h3><p>第一行输出左括号的数量和右括号的数量，中间以一个空格间隔。<br />若括号是匹配的，在第二行打印<code>YES</code>，否则打印<code>NO</code>。</p><h3 id="输入样例1">输入样例1:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for(int i=0; i&lt;v; i++)&#123; visited[i] = 0; for(int j=0; j&lt;v; j++) scanf(&quot;%d&quot;,&amp;(g-&gt;Adj[i][j])); &#125;</span><br></pre></td></tr></table></figure><h3 id="输出样例1">输出样例1:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8 8</span><br><span class="line">YES</span><br></pre></td></tr></table></figure><h3 id="输入样例2">输入样例2:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for(int i=0; i&lt;v; i++) a(i]=0;</span><br></pre></td></tr></table></figure><h3 id="输出样例2">输出样例2:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2 2</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">bool is_left_kuohao(char ch)</span><br><span class="line">&#123;</span><br><span class="line">return ch == &#x27;(&#x27;  ch == &#x27;[&#x27;  ch == &#x27;&#123;&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool is_right_kuohao(char ch)</span><br><span class="line">&#123;</span><br><span class="line">return ch == &#x27;)&#x27;  ch == &#x27;]&#x27;  ch == &#x27;&#125;&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool match(char left, char right)</span><br><span class="line">&#123;</span><br><span class="line">return (left == &#x27;(&#x27; &amp;&amp; right == &#x27;)&#x27;) </span><br><span class="line">   (left == &#x27;[&#x27; &amp;&amp; right == &#x27;]&#x27;) </span><br><span class="line">   (left == &#x27;&#123;&#x27; &amp;&amp; right == &#x27;&#125;&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">string line;</span><br><span class="line">getline(cin, line);</span><br><span class="line"></span><br><span class="line">int left_kuohao_count = 0;</span><br><span class="line">int right_kuohao_count = 0;</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; line.length(); i++)</span><br><span class="line">&#123;</span><br><span class="line">if (is_left_kuohao(line[i]))</span><br><span class="line">left_kuohao_count += 1;</span><br><span class="line">if (is_right_kuohao(line[i]))</span><br><span class="line">right_kuohao_count += 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; left_kuohao_count &lt;&lt; &quot; &quot; </span><br><span class="line">     &lt;&lt; right_kuohao_count &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">stack&lt;char&gt; left_kuohaos;</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; line.length(); i++)</span><br><span class="line">&#123;</span><br><span class="line">if (is_left_kuohao(line[i]))</span><br><span class="line">left_kuohaos.push(line[i]);</span><br><span class="line">if (is_right_kuohao(line[i]))</span><br><span class="line">&#123;</span><br><span class="line">if (!left_kuohaos.empty() &amp;&amp; match(left_kuohaos.top(), line[i]))</span><br><span class="line">left_kuohaos.pop();</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;NO&quot; &lt;&lt; endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (left_kuohaos.empty())</span><br><span class="line">cout &lt;&lt; &quot;YES&quot; &lt;&lt; endl;</span><br><span class="line">else</span><br><span class="line">cout &lt;&lt; &quot;NO&quot; &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>7-2 堆栈操作合法性 (20分)</title>
      <link href="/2020/03/31/7-2-%E5%A0%86%E6%A0%88%E6%93%8D%E4%BD%9C%E5%90%88%E6%B3%95%E6%80%A7-20%E5%88%86/"/>
      <url>/2020/03/31/7-2-%E5%A0%86%E6%A0%88%E6%93%8D%E4%BD%9C%E5%90%88%E6%B3%95%E6%80%A7-20%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>假设以<code>S</code>和<code>X</code>分别表示入栈和出栈操作。如果根据一个仅由<code>S</code>和<code>X</code>构成的序列，对一个空堆栈进行操作，相应操作均可行（如没有出现删除时栈空）且最后状态也是栈空，则称该序列是合法的堆栈操作序列。请编写程序，输入<code>S</code>和<code>X</code>序列，判断该序列是否合法。</p><h3 id="输入格式">输入格式:</h3><p>输入第一行给出两个正整数N和M，其中N是待测序列的个数，M（≤50）是堆栈的最大容量。随后N行，每行中给出一个仅由<code>S</code>和<code>X</code>构成的序列。序列保证不为空，且长度不超过100。</p><h3 id="输出格式">输出格式:</h3><p>对每个序列，在一行中输出<code>YES</code>如果该序列是合法的堆栈操作序列，或<code>NO</code>如果不是。</p><h3 id="输入样例">输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 10</span><br><span class="line">SSSXXSXXSX</span><br><span class="line">SSSXXSXXS</span><br><span class="line">SSSSSSSSSSXSSXXXXXXXXXXX</span><br><span class="line">SSSXXSXXX</span><br></pre></td></tr></table></figure><h3 id="输出样例">输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">#define MAXSIZE  100</span><br><span class="line">#define ADDSIZE  10</span><br><span class="line">typedef int Status;</span><br><span class="line">typedef char SElemType;</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">    SElemType *base;</span><br><span class="line">    SElemType *top;</span><br><span class="line">    int stacksize;</span><br><span class="line">&#125; SqStack;</span><br><span class="line"></span><br><span class="line">Status Initstack(SqStack &amp;s,int e=MAXSIZE)</span><br><span class="line">&#123;</span><br><span class="line">    s.base=new SElemType[e];</span><br><span class="line">    s.top=s.base;</span><br><span class="line">    s.stacksize=e;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Status push(SElemType e,SqStack &amp;s)</span><br><span class="line">&#123;</span><br><span class="line">    if(s.top-s.base&gt;=s.stacksize)</span><br><span class="line">    &#123;</span><br><span class="line">        /*s.base=(SElemType*)realloc(s.base,(s.stacksize+ADDSIZE)* sizeof(SElemType));</span><br><span class="line">        if(!s.base)</span><br><span class="line">            exit(EOVERFLOW);</span><br><span class="line">        s.top=s.base+s.stacksize;</span><br><span class="line">        s.stacksize+=ADDSIZE;*/</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    *s.top++=e;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status pop(SElemType &amp;e,SqStack &amp;s)</span><br><span class="line">&#123;</span><br><span class="line">    if(s.top==s.base)return 0;</span><br><span class="line">    e=*--s.top;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status GetTop(SElemType &amp;e,SqStack &amp;s)</span><br><span class="line">&#123;</span><br><span class="line">    if(s.top==s.base)return 0;</span><br><span class="line">    e=*(s.top-1);</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool Isright(string s,int e)</span><br><span class="line">&#123;</span><br><span class="line">    int i=0,f=1;</span><br><span class="line">    SqStack sq;</span><br><span class="line">    Initstack(sq,e);</span><br><span class="line">    while (s[i] != &#x27;\0&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        if(s[i]==&#x27;S&#x27;) &#123;</span><br><span class="line">            if (push(s[i],sq) == 1)</span><br><span class="line">                i++;</span><br><span class="line">            else</span><br><span class="line">                &#123;</span><br><span class="line">                f = 0;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            if (pop(s[i],sq) == 1)</span><br><span class="line">                i++;</span><br><span class="line">            else &#123;</span><br><span class="line">                f = 0;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(sq.top==sq.base&amp;&amp;s[i]==&#x27;\0&#x27;)</span><br><span class="line">        f=1;</span><br><span class="line">    else</span><br><span class="line">        f=0;</span><br><span class="line">    return f == 1;</span><br><span class="line">&#125;</span><br><span class="line">bool IsRight(string s,int L)</span><br><span class="line">&#123;</span><br><span class="line">    int i=0,flag=1;</span><br><span class="line">    SqStack sq;</span><br><span class="line">    Initstack(sq,L);</span><br><span class="line">    while(s[i]!=&#x27;\0&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        if(s[i]==&#x27;S&#x27;)</span><br><span class="line">        &#123;</span><br><span class="line">            if(push(s[i],sq)==1)</span><br><span class="line">                i++;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                flag=0;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            if(pop(s[i],sq)==1)</span><br><span class="line">                i++;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                flag=0;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if((sq.top==sq.base) &amp;&amp; s[i]==&#x27;\0&#x27;)</span><br><span class="line">        flag=1;</span><br><span class="line">    else</span><br><span class="line">        flag=0;</span><br><span class="line">    return flag == 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int m,n;</span><br><span class="line">    string ss;</span><br><span class="line">    cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    for (int u = 0; u &lt; m; ++u) &#123;</span><br><span class="line">        cin&gt;&gt;ss;</span><br><span class="line">        if (IsRight(ss,n)== true)</span><br><span class="line">            cout&lt;&lt;&quot;YES&quot;&lt;&lt;endl;</span><br><span class="line">        else</span><br><span class="line">            cout&lt;&lt;&quot;NO&quot;&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>逆波兰式/后缀表达式</title>
      <link href="/2020/03/24/%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F-%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/03/24/%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F-%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><img data-src="http://www.zhaoxuanlang.cn/wp-content/uploads/2020/03/image-5.png" /></p><p>下面以(a+b)*c为例子进行说明：(a+b)*c的逆波兰式为ab+c*，假设计算机把ab+c*按从左到右的顺序压入栈中，并且按照遇到<a href="https://baike.baidu.com/item/%E8%BF%90%E7%AE%97%E7%AC%A6">运算符</a>就把栈顶两个元素<a href="https://baike.baidu.com/item/%E5%87%BA%E6%A0%88">出栈</a>，执行运算，得到的结果再入栈的原则来进行处理，那么ab+c*的执行结果如下：1）a入栈（0位置）2）b入栈（1位置）3）遇到运算符“+”，将a和b出栈，执行a+b的操作，得到结果d=a+b，再将d入栈（0位置）4）c入栈（1位置）5）遇到运算符“*”，将d和c出栈，执行d*c的操作，得到结果e，再将e入栈（0位置）经过以上运算，计算机就可以得到(a+b)*c的运算结果e了。逆波兰式除了可以实现上述类型的运算，它还可以派生出许多新的算法，数据结构，这就需要灵活运用了。逆波兰式只是一种序列体现形式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">int precede(char op)</span><br><span class="line">&#123; int x;</span><br><span class="line">switch(op)</span><br><span class="line">&#123;</span><br><span class="line">case &#x27;*&#x27;: x=2; break;</span><br><span class="line">case &#x27;/&#x27;: x=2; break;</span><br><span class="line">case &#x27;+&#x27;: x=1; break;</span><br><span class="line">case &#x27;-&#x27;: x=1; break;</span><br><span class="line">default : x=0;</span><br><span class="line">&#125;</span><br><span class="line">return x;</span><br><span class="line">&#125;</span><br><span class="line">char *RPExpression(char *e)</span><br><span class="line">&#123;/* 返回表达式e的逆波兰式 */</span><br><span class="line">char *c;</span><br><span class="line">c=(char*)malloc(sizeof(char)*20); //不能用char c[]</span><br><span class="line">Stack s1;</span><br><span class="line">InitStack(s1);</span><br><span class="line">int i=0,j=0;</span><br><span class="line">char ch;</span><br><span class="line">Push(s1,&#x27;@&#x27;);</span><br><span class="line">ch=e[i++];</span><br><span class="line">while(ch!= 0)</span><br><span class="line">&#123;</span><br><span class="line">if(ch==&#x27;(&#x27;)</span><br><span class="line">&#123;</span><br><span class="line">Push(s1,ch);</span><br><span class="line">ch=e[i++];</span><br><span class="line">&#125;</span><br><span class="line">else if(ch==&#x27;)&#x27;)</span><br><span class="line">&#123;</span><br><span class="line">while(Top(s1)!=&#x27;(&#x27;)</span><br><span class="line">&#123;</span><br><span class="line">Pop(s1,c[j++]);</span><br><span class="line">&#125;</span><br><span class="line">/* to[j++]=pop(&amp;s1);*/</span><br><span class="line">Pop(s1,ch);</span><br><span class="line">ch=e[i++];</span><br><span class="line">&#125;</span><br><span class="line">else if(ch==&#x27;+&#x27;ch==&#x27;-&#x27;ch==&#x27;*&#x27;ch==&#x27;/&#x27;)</span><br><span class="line">&#123;</span><br><span class="line">char w;</span><br><span class="line">w=Top(s1);</span><br><span class="line">while(precede(w)&gt;=precede(ch))</span><br><span class="line">&#123;</span><br><span class="line">Pop(s1,c[j++]);</span><br><span class="line">w=Top(s1);</span><br><span class="line">&#125;</span><br><span class="line">Push(s1,ch);</span><br><span class="line">ch=e[i++];</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">//while((ch&lt;=&#x27;z&#x27;&amp;&amp;ch&gt;=&#x27;a&#x27;)(ch&lt;=&#x27;Z&#x27; &amp;&amp; ch&gt;=&#x27;A&#x27;))&#123;</span><br><span class="line">c[j++]=ch;</span><br><span class="line">ch=e[i++];</span><br><span class="line">//&#125;</span><br><span class="line">//c[j++]=&#x27; &#x27;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Pop(s1,ch);</span><br><span class="line">while(ch!=&#x27;@&#x27;)</span><br><span class="line">&#123;</span><br><span class="line">c[j++]=ch;</span><br><span class="line">Pop(s1,ch);</span><br><span class="line">&#125;</span><br><span class="line">//c[j++]=;</span><br><span class="line">c[j++]=0;</span><br><span class="line">return c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>7-2 两个有序链表序列的合并 (20分)</title>
      <link href="/2020/03/09/7-2-%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E5%BA%8F%E5%88%97%E7%9A%84%E5%90%88%E5%B9%B6-20%E5%88%86/"/>
      <url>/2020/03/09/7-2-%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E5%BA%8F%E5%88%97%E7%9A%84%E5%90%88%E5%B9%B6-20%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>已知两个非降序链表序列S1与S2，设计函数构造出S1与S2合并后的新的非降序链表S3。</p><h3 id="输入格式">输入格式:</h3><p>输入分两行，分别在每行给出由若干个正整数构成的非降序序列，用−1表示序列的结尾（−1不属于这个序列）。数字用空格间隔。</p><h3 id="输出格式">输出格式:</h3><p>在一行中输出合并后新的非降序链表，数字间用空格分开，结尾不能有多余空格；若新链表为空，输出<code>NULL</code>。</p><h3 id="输入样例">输入样例:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 3 5 -1</span><br><span class="line">2 4 6 8 10 -1</span><br></pre></td></tr></table></figure><h3 id="输出样例">输出样例:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4 5 6 8 10</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;malloc.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef int Status;</span><br><span class="line">typedef int Elemtype;</span><br><span class="line">typedef struct LNode</span><br><span class="line">&#123;</span><br><span class="line">    Elemtype data;</span><br><span class="line">    LNode *next;</span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line">LinkList endCreate()</span><br><span class="line">&#123;</span><br><span class="line">    LinkList L,p,s;</span><br><span class="line">    Elemtype e;</span><br><span class="line">    L=(LinkList)malloc(sizeof(LNode));</span><br><span class="line">    L-&gt;next=NULL;</span><br><span class="line">    p=L;</span><br><span class="line">    cin&gt;&gt;e;</span><br><span class="line">    while (e!=-1)</span><br><span class="line">    &#123;</span><br><span class="line">        s=(LinkList)malloc(sizeof(LNode));</span><br><span class="line">        s-&gt;data=e;</span><br><span class="line">        p-&gt;next=s;</span><br><span class="line">        p=s;</span><br><span class="line">        cin&gt;&gt;e;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;next=NULL;</span><br><span class="line">    return L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LinkList headCreate()</span><br><span class="line">&#123;</span><br><span class="line">    LinkList L,s;</span><br><span class="line">    Elemtype e;</span><br><span class="line">    L=(LinkList)malloc(sizeof(LNode));</span><br><span class="line">    L-&gt;next=NULL;</span><br><span class="line">    cin&gt;&gt;e;</span><br><span class="line">    while (e!=-1)</span><br><span class="line">    &#123;</span><br><span class="line">        s=(LinkList)malloc(sizeof(LNode));</span><br><span class="line">        s-&gt;data=e;</span><br><span class="line">        s-&gt;next=L-&gt;next;</span><br><span class="line">        L-&gt;next=s;</span><br><span class="line">        cin&gt;&gt;e;</span><br><span class="line">    &#125;</span><br><span class="line">    return L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void print(LinkList list)</span><br><span class="line">&#123;</span><br><span class="line">    LinkList e;</span><br><span class="line">    e=list-&gt;next;</span><br><span class="line">    if(!e)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;NULL&quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        while (e-&gt;next) &#123;</span><br><span class="line">            cout &lt;&lt; e-&gt;data &lt;&lt; &quot; &quot;;</span><br><span class="line">            e = e-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; e-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void merge(LinkList L1,LinkList L2,LinkList &amp;L3)</span><br><span class="line">&#123;</span><br><span class="line">    LinkList l1=L1-&gt;next,l2=L2-&gt;next,l3;</span><br><span class="line">    l3=L3=L1;</span><br><span class="line">    while (l1&amp;&amp;l2)</span><br><span class="line">    &#123;</span><br><span class="line">        if (l1-&gt;data&lt;=l2-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            l3-&gt;next=l1;</span><br><span class="line">            l3=l1;</span><br><span class="line">            l1=l1-&gt;next;</span><br><span class="line">        &#125; else</span><br><span class="line">        &#123;</span><br><span class="line">            l3-&gt;next=l2;</span><br><span class="line">            l3=l2;</span><br><span class="line">            l2=l2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    l3-&gt;next=l1?l1:l2;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    LinkList L1,L2,L3;</span><br><span class="line">    L1=endCreate();</span><br><span class="line">    L2=endCreate();</span><br><span class="line">    merge(L1,L2,L3);</span><br><span class="line">    print(L3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题两点重点，第一是实现merge操作。传进去两个链表和第三个的引用，然后一直判断直到某一个结束，如果L3后边是L1说明L1还有剩下的，如果不是说明剩下的都是L2后边；</p><p>第二个是输出，需要注意如果是空就输出NULL，他是让打印出NULL而不是return。。。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>7-1 求链式线性表的倒数第K项 (20分)</title>
      <link href="/2020/03/08/7-1-%E6%B1%82%E9%93%BE%E5%BC%8F%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACk%E9%A1%B9-20%E5%88%86/"/>
      <url>/2020/03/08/7-1-%E6%B1%82%E9%93%BE%E5%BC%8F%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACk%E9%A1%B9-20%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>给定一系列正整数，请设计一个尽可能高效的算法，查找倒数第K个位置上的数字。</p><span id="more"></span><h3 id="输入格式">输入格式:</h3><p>输入首先给出一个正整数K，随后是若干正整数，最后以一个负整数表示结尾（该负数不算在序列内，不要处理）。</p><h3 id="输出格式">输出格式:</h3><p>输出倒数第K个位置上的数据。如果这个位置不存在，输出错误信息<code>NULL</code>。</p><h3 id="输入样例">输入样例:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4 1 2 3 4 5 6 7 8 9 0 -1</span><br></pre></td></tr></table></figure><h3 id="输出样例">输出样例:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int  k , cnt=0,tmp,flag=0,found = 0;</span><br><span class="line">    cin&gt;&gt;k;</span><br><span class="line">    int* num=(int*)malloc(sizeof(int)*k); //只存k个正整数</span><br><span class="line">    while(1)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;tmp);</span><br><span class="line">        if(tmp&lt;0)                         //tmp为-1退出循环</span><br><span class="line">            break;</span><br><span class="line">        num[cnt++]=tmp;</span><br><span class="line">        if(!found&amp;&amp;cnt&gt;=k)</span><br><span class="line">            found=1;</span><br><span class="line">        cnt%=k;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    if(found==0)</span><br><span class="line">        printf(&quot;NULL&quot;);</span><br><span class="line">    else</span><br><span class="line">        printf(&quot;%d&quot;,num[cnt]);//输出位于最后输入的元素的下一个元素，因为最后输入的元素就是倒数第一个元素，cnt++后指向它的下一个元素，只存了k个，所以它的下一个就是倒数第k个了</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里只要cnt大于k则一定会找到，found就会变成1不会变回去</p><p>关键在于只分配k个大小xxx-10kk+1xxxx</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>单链表</title>
      <link href="/2020/03/07/%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
      <url>/2020/03/07/%E5%8D%95%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>2-3 某线性表中最常用的操作是在最后一个元素之后插入一个元素和删除第一个元素，则采用什么存储方式最节省运算时间？ (2分)b</p><ol type="1"><li>单链表</li><li>仅有尾指针的单循环链表</li><li>仅有头指针的单循环链表</li><li>双链表</li></ol><p>c虽然可以直接获得第一个元素，但是想要获得最后一个元素却需要遍历整个链表。而b给出的是带有尾结点的单循环链表，这样就可以直接得到最后一个元素，想要得到第一个元素只需要再遍历一个元素就可以，所以选择b</p><p>1-22下列函数试图求链式存储的线性表的表长，是否正确？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int  Length ( List  *PtrL )</span><br><span class="line">&#123;    List  *p = PtrL;      </span><br><span class="line">     int  j = 0;</span><br><span class="line">     while ( p ) &#123; </span><br><span class="line">           p++; </span><br><span class="line">           j++;                 </span><br><span class="line">     &#125;   </span><br><span class="line">     return  j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>F p++不能指向后一个元素</p><p>2-4</p><p>若某表最常用的操作是在最后一个结点之后插入一个结点或删除最后一个结点。则采用哪种存储方式最节省运算时间？ (2分)</p><ol type="1"><li>单链表</li><li>双链表</li><li>单循环链表</li><li>带头结点的双循环链表</li></ol><p>D 头结点上一个就是最后一个节点</p><p><img data-src="http://www.zhaoxuanlang.cn/wp-content/uploads/2020/03/image-1024x454.png" /></p><p>这道题的逻辑，简单来说，就是地址存放你当前元素的地址，链接地址是指向当前元素的下一个元素的地址。 因此，我们来看没插入f之前时，链表的顺序，由于头元素是c（地址1008H），由C开始，C的链接地址是1000H，也就是指向元素a（地址1000H），之后a的链接地址是1010H，也就是指向元素e。。。 按照上面这个思路遍历，我们可以得到链表的遍历顺序c（1008H）-&gt;a（1000H）-&gt;e（1010H）-&gt;b（1004H）-&gt;d（100CH）-&gt;null。 由于f逻辑上位于a和e之间，因此也就是说将f插入到ae之间，因此只需要修改a的链接地址（也就是指向下一个元素的地址）为f的地址（1014H），然后将f的链接地址修改为e的地址。<br />链表插入不影响其他元素，所以其他元素链接地址不变。</p><p><img data-src="http://www.zhaoxuanlang.cn/wp-content/uploads/2020/03/image-1.png" /></p><p>不带表头结点，头指针直接指向数据</p><p><img data-src="http://www.zhaoxuanlang.cn/wp-content/uploads/2020/03/image-2.png" /></p><p>在m之后</p><p>在一个长度为 n （ n&gt;1 ）的单链表上，设有头和尾两个指针，执行 操作与链表的长度有关。</p><ul><li>删除单链表中的第一个元素</li><li>删除单链表中的最后一个元素</li><li>在单链表第一个元素前插入一个新元素</li><li>在单链表最后一个元素后插入一个新元素</li></ul><p>A<br />头指针是指向第一个元素（结点）的指针。 当<strong>删除单链表中的第一个元素</strong>时只需要将头指针指向第二个元素，然后释放第一个元素储存空间申请的内存。与链表长度无关。</p><p>123</p><p><code>ListNode *temp = head-&gt;next;``head-&gt;next = temp-&gt;next;``free``(temp);</code></p><p>B<br />尾指针是指向最后一个元素（结点）的指针，与头指针类似。 当<strong>删除单链表中的最后一个元素</strong>时 由于不是双向链表，所以要从头指针开始，一直遍历直到倒数第二个元素，将倒数第二个元素（结点）指向NULL，释放原末端元素（结点）空间后，将尾指针等于新的末端元素（结点）。所以与链表长度有关。</p><p>12345</p><p><code>ListNode *p = head;``while``(p-&gt;next != rear) p = p-&gt;next;``p-&gt;next = NULL;``free``(r);``r = p;</code></p><p>C <strong>在单链表第一个元素前插入一个新元素</strong>时，只需要把新的元素（结点）指向原来的第一个元素（结点），然后使头指针指向新的元素（结点）。与链表长度无关。</p><p>12</p><p><code>new_point-&gt;next = head-&gt;next;``head-&gt;next = new_point;</code></p><p>D <strong>在单链表最后一个元素后插入一个新元素</strong>时，只需先将新结点指向NULL，然后将尾指针指向的原末端结点指向新的元素（结点），最后将尾指针指向新的元素（结点）。与链表长度无关。</p><p>123</p><p><code>new_point-&gt;next = NULL;``rear-&gt;next = new_point;``rear = new_point;</code></p><p><img data-src="http://www.zhaoxuanlang.cn/wp-content/uploads/2020/03/image-3.png" /></p><p>静态链表:数组的每一个下标都对应一个data和一个cur。数据域data用来存放数据元素，；而游标cur相当于单链表中的next指针，</p><p>存放该元素的后继在数组中的下标。</p><p><img data-src="http://www.zhaoxuanlang.cn/wp-content/uploads/2020/03/image-4.png" /></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>clion的安装和配置</title>
      <link href="/2020/03/05/clion%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/03/05/clion%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>写代码时一个易用的编译器是很重要的，若想写c/c++我推荐jetbrain家的clion，真的很方便</p><p>首先去官网下载<a href="https://www.jetbrains.com/clion/">官网页面</a>并安装</p><p>在这不提供破解方法，建议支持正版，破解方法可以在百度上搜索到</p><p>之后需要下载一个c/c++的译码器，我在这用的是MingW.不建议去官网下载，因为即使科学上网速度也还是很慢而且容易出错</p><p>在这提供我的百度网盘收藏链接，直接下载安装即可</p><p>链接：https://pan.baidu.com/s/1xYOb-eYFKSfJgwFxG9fZWw<br />提取码：kiec</p><p><strong>（2）配置CLion</strong><br />打开CLion，左上角File-Settings-Build-Toolchains，然后点击 <strong>+</strong> 号</p><p><img data-src="//upload-images.jianshu.io/upload_images/13625730-59b19c35c9589ad0.png?imageMogr2/auto-orient/stripimageView2/2/w/908/format/webp" /></p><p>settings</p><p><img data-src="//upload-images.jianshu.io/upload_images/13625730-9c1c7b4ac50f2320.png?imageMogr2/auto-orient/stripimageView2/2/w/624/format/webp" /></p><p>toolchains</p><p>Environment选择MinGW，然后填入刚刚解压的MinGW64的路径（这是我的路径）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\71022\Documents\mingw64</span><br></pre></td></tr></table></figure><p><img data-src="//upload-images.jianshu.io/upload_images/13625730-c97f11fcde1a679f.png?imageMogr2/auto-orient/stripimageView2/2/w/780/format/webp" /></p><p>image.png</p><p>然后CLion会自动帮你填上所有你该填的东西，点击OK，等调试的小虫子变绿就可以了。</p><p><img data-src="//upload-images.jianshu.io/upload_images/13625730-9f5aa1e8408cef27.png?imageMogr2/auto-orient/stripimageView2/2/w/781/format/webp" /></p><p>image.png</p><p><strong>当然，也会出现无法检测成功的情况，这时候就需要手动填写啦。</strong><br />CMake一般会自动选择。<br />Make填入路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\71022\Documents\mingw64\bin\mingw32-make.exe</span><br></pre></td></tr></table></figure><p>C Compiler填入路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\71022\Documents\mingw64\bin\gcc.exe</span><br></pre></td></tr></table></figure><p>C++ Compiler填入路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\71022\Documents\mingw64\bin\g++.exe</span><br></pre></td></tr></table></figure><p>Debugger一般会自己填入，如果没有可以手动填：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\71022\Documents\mingw64\bin\gdb.exe</span><br></pre></td></tr></table></figure><p>然后OK，等一段时间就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>7-3 学生顺序表的建立 (10分)</title>
      <link href="/2020/03/05/7-3-%E5%AD%A6%E7%94%9F%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%BB%BA%E7%AB%8B-10%E5%88%86/"/>
      <url>/2020/03/05/7-3-%E5%AD%A6%E7%94%9F%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%BB%BA%E7%AB%8B-10%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>完成对一个顺序表的建立，表中的每个元素是同学们的学号、姓名和三门课程的成绩，输入5个同学的信息，然后显示在屏幕上。（要求利用顺序表的基本操作）</p><h3 id="输入格式">输入格式:</h3><p>首先收入学生人数5，然后依次输入5个学生的学号、姓名和三门课的成绩</p><h3 id="输出格式">输出格式:</h3><p>输入5个学生的学号、姓名和三门课的成绩</p><h3 id="输入样例">输入样例:</h3><p>5 01 张三 89 89 89 02 李四 90 90 90 03 王五 89 89 89 04 钱六 97 97 97 05 赵倩 90 90 90</p><h3 id="输出样例">输出样例:</h3><p>1 张三 89.0 89.0 89.0 2 李四 90.0 90.0 90.0 3 王五 89.0 89.0 89.0 4 钱六 97.0 97.0 97.0 5 赵倩 90.0 90.0 90.0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">struct STU</span><br><span class="line">&#123;</span><br><span class="line">    int id;</span><br><span class="line">    char name[20];</span><br><span class="line">    float score1;</span><br><span class="line">    float score2;</span><br><span class="line">    float score3;</span><br><span class="line">&#125;stu[20];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int m;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;m);</span><br><span class="line">    for (int i = 0; i &lt;m ; ++i) &#123;</span><br><span class="line">        scanf(&quot;%d%s%f%f%f&quot;,&amp;stu[i].id,&amp;stu[i].name,&amp;stu[i].score1,&amp;stu[i].score2,&amp;stu[i].score3);</span><br><span class="line">    &#125;</span><br><span class="line">    for (int j = 0; j &lt; m-1; ++j) &#123;</span><br><span class="line">        printf(&quot;%d %s %.1f %.1f %.1f\n&quot;,j+1,stu[j].name,stu[j].score1,stu[j].score2,stu[j].score3);</span><br><span class="line">    &#125;</span><br><span class="line">    int j=m-1;</span><br><span class="line">    printf(&quot;%d %s %.1f %.1f %.1f&quot;,j+1,stu[j].name,stu[j].score1,stu[j].score2,stu[j].score3);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>7-4 顺序表的建立及遍历 (30分)</title>
      <link href="/2020/02/28/7-4-%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%BB%BA%E7%AB%8B%E5%8F%8A%E9%81%8D%E5%8E%86-30%E5%88%86/"/>
      <url>/2020/02/28/7-4-%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%BB%BA%E7%AB%8B%E5%8F%8A%E9%81%8D%E5%8E%86-30%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>读入n值及n个整数，建立顺序表并遍历输出。</p><h3 id="输入格式">输入格式:</h3><p>读入n及n个整数</p><h3 id="输出格式">输出格式:</h3><p>输出n个整数，以空格分隔（最后一个数的后面没有空格）。</p><h3 id="输入样例">输入样例:</h3><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">-3 10 20 78</span><br></pre></td></tr></table></figure><h3 id="输出样例">输出样例:</h3><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-3 10 20 78</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;malloc.h&gt;</span><br><span class="line">#define list 10</span><br><span class="line">#define max 10</span><br><span class="line"> </span><br><span class="line">typedef int Elemtype;</span><br><span class="line">typedef struct sqlist *List;</span><br><span class="line">struct sqlist&#123;</span><br><span class="line">Elemtype *elem;</span><br><span class="line">int length;</span><br><span class="line">int listsize;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">void initlist(List L)&#123;</span><br><span class="line">L-&gt;elem=(Elemtype *)malloc(list*sizeof(Elemtype));</span><br><span class="line">L-&gt;length=0;</span><br><span class="line">L-&gt;listsize=max;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void creat(List L)&#123;</span><br><span class="line">initlist(L);</span><br><span class="line">int i,n;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">for(i=0;i&lt;n;i++) &#123;</span><br><span class="line">   scanf(&quot;%d&quot;,&amp;L-&gt;elem[i]);</span><br><span class="line">   L-&gt;length++;</span><br><span class="line">   if(L-&gt;length==L-&gt;listsize) &#123;</span><br><span class="line">int *new_elem = (Elemtype *)malloc((L-&gt;listsize+list)*sizeof(Elemtype));</span><br><span class="line">memcpy(new_elem,L-&gt;elem,L-&gt;length);</span><br><span class="line">L-&gt;elem = new_elem;</span><br><span class="line">L-&gt;listsize+=list;</span><br><span class="line">   &#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void print(List L) &#123;</span><br><span class="line">for(int i=0; i&lt;L-&gt;length;i++) &#123;</span><br><span class="line">if(i==L-&gt;length-1)</span><br><span class="line">printf(&quot;%d&quot;,L-&gt;elem[i]);</span><br><span class="line">else</span><br><span class="line">printf(&quot;%d &quot;,L-&gt;elem[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main()&#123;</span><br><span class="line">List L = (List)malloc(sizeof(struct sqlist));</span><br><span class="line">initlist(L);</span><br><span class="line">creat(L);</span><br><span class="line">print(L);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>7-5 求集合交集 (20分)</title>
      <link href="/2020/02/28/7-5-%E6%B1%82%E9%9B%86%E5%90%88%E4%BA%A4%E9%9B%86-20%E5%88%86/"/>
      <url>/2020/02/28/7-5-%E6%B1%82%E9%9B%86%E5%90%88%E4%BA%A4%E9%9B%86-20%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>求整数集合A与整数集合B的交集。</p><h3 id="输入格式">输入格式:</h3><p>输入有三行： 第一行是A和B的元素个数m和n； 第二行是集合A的m个元素； 第三行是集合A的n个元素。</p><h3 id="输出格式">输出格式:</h3><p>输出交集的所有元素（按照在A集合出现的顺序输出，最后一个输出后面没有空格）。</p><h3 id="输入样例">输入样例:</h3><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3 4</span><br><span class="line">10 9 2</span><br><span class="line">9 10 8 0</span><br></pre></td></tr></table></figure><h3 id="输出样例">输出样例:</h3><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 9</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a,b,alist[999],blist[999];</span><br><span class="line">    scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</span><br><span class="line">    for(int i=0;i&lt;a;i++)&#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;alist[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    for(int j=0;j&lt;b;j++)&#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;blist[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    int clist[999]=&#123;0&#125;;</span><br><span class="line">    int q=0;</span><br><span class="line">    for(int k=0;k&lt;a;k++)&#123;</span><br><span class="line">        int temp=alist[k];</span><br><span class="line">        for(int p=0;p&lt;b;p++)&#123;</span><br><span class="line">            if(temp==blist[p])&#123;</span><br><span class="line">                clist[q]=temp;</span><br><span class="line">                q++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (q&gt;0)&#123;</span><br><span class="line">    for(int u=0;u&lt;q-1;u++)&#123;</span><br><span class="line">        printf(&quot;%d &quot;,clist[u]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d&quot;,clist[q-1]);</span><br><span class="line">    return 0;&#125; else&#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>7-2 jmu-ds-顺序表区间元素删除 (15分)</title>
      <link href="/2020/02/28/7-2-jmu-ds-%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%8C%BA%E9%97%B4%E5%85%83%E7%B4%A0%E5%88%A0%E9%99%A4-15%E5%88%86/"/>
      <url>/2020/02/28/7-2-jmu-ds-%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%8C%BA%E9%97%B4%E5%85%83%E7%B4%A0%E5%88%A0%E9%99%A4-15%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>若一个线性表L采用顺序存储结构存储，其中所有的元素为整数。设计一个算法，删除元素值在[x,y]之间的所有元素，要求算法的时间复杂度为O(n)，空间复杂度为O(1)。</p><h3 id="输入格式">输入格式:</h3><p>三行数据，第一行是顺序表的元素个数，第二行是顺序表的元素，第三行是x和y。</p><h3 id="输出格式">输出格式:</h3><p>删除元素值在[x,y]之间的所有元素后的顺序表。</p><h3 id="输入样例">输入样例:</h3><p>10<br />5 1 9 10 67 12 8 33 6 2<br />3 10</p><h3 id="输出样例">输出样例:</h3><p>1 67 12 33 2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int m;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;m );</span><br><span class="line"></span><br><span class="line">    int list[999];</span><br><span class="line">    for (int i = 0; i &lt; m; ++i) &#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;list[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int x,y;</span><br><span class="line">    scanf(&quot;%d%d&quot;,&amp;x,&amp;y);</span><br><span class="line"></span><br><span class="line">    int list2[999],q=0;</span><br><span class="line"></span><br><span class="line">    for (int j = 0; j &lt; m; ++j) &#123;</span><br><span class="line">        if (x&gt;list[j]y&lt;list[j])</span><br><span class="line">        &#123;</span><br><span class="line">            list2[q]=list[j];</span><br><span class="line">            q++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; q-1; ++i) &#123;</span><br><span class="line">        printf(&quot;%d &quot;,list2[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d&quot;,list2[q-1]);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>7-1 数组循环左移 (20分)</title>
      <link href="/2020/02/28/7-1-%E6%95%B0%E7%BB%84%E5%BE%AA%E7%8E%AF%E5%B7%A6%E7%A7%BB-20%E5%88%86/"/>
      <url>/2020/02/28/7-1-%E6%95%B0%E7%BB%84%E5%BE%AA%E7%8E%AF%E5%B7%A6%E7%A7%BB-20%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>本题要求实现一个对数组进行循环左移的简单函数：一个数组_a_中存有_n_（&gt;0）个整数，在不允许使用另外数组的前提下，将每个整数循环向左移_m_（≥0）个位置，即将_a_中的数据由（<em>a</em>​0​​<em>a</em>​1​​⋯<em>a</em>​<em>n</em>−1​​）变换为（<em>a</em>​<em>m</em>​​⋯<em>a</em>​<em>n</em>−1​​<em>a</em>​0​​<em>a</em>​1​​⋯<em>a</em>​<em>m</em>−1​​）（最前面的_m_个数循环移至最后面的_m_个位置）。如果还需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？</p><h3 id="输入格式">输入格式:</h3><p>输入第1行给出正整数_n_（≤100）和整数_m_（≥0）；第2行给出_n_个整数，其间以空格分隔。</p><h3 id="输出格式">输出格式:</h3><p>在一行中输出循环左移_m_位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。</p><h3 id="输入样例">输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8 3</span><br><span class="line">1 2 3 4 5 6 7 8</span><br></pre></td></tr></table></figure><h3 id="输出样例">输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4 5 6 7 8 1 2 3</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int m,n;</span><br><span class="line">    scanf(&quot;%d%d&quot;,&amp;m,&amp;n );</span><br><span class="line">    </span><br><span class="line">    int list[999];</span><br><span class="line">    for (int i = 0; i &lt; m; ++i) &#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;list[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    for (int j = 0; j &lt; n; ++j) &#123;</span><br><span class="line">        int temp = list[0];</span><br><span class="line">        for (int i = 1; i &lt;m ; ++i) &#123;</span><br><span class="line">            list[i-1]=list[i];</span><br><span class="line">        &#125;</span><br><span class="line">        list[m-1]=temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; m-1; ++i) &#123;</span><br><span class="line">        printf(&quot;%d &quot;,list[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d&quot;,list[m-1]);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言数组操作</title>
      <link href="/2020/02/28/c%E8%AF%AD%E8%A8%80%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/02/28/c%E8%AF%AD%E8%A8%80%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>1.数组定义</p><p>int a[5]</p><p>int a[5] = {1,2,3}</p><p>int a[]={1,2,3,4,5}</p><p>int a[5]={1,2,3,4,5}</p><p>例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># include &lt;stdio.h&gt;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    int a[5] = &#123;0&#125;;  //数组清零初始化</span><br><span class="line">    int i;</span><br><span class="line">    printf(&quot;请输入5个数:&quot;);</span><br><span class="line">    for (i=0; i&lt;5; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%d&quot;, &amp;a[i] );</span><br><span class="line">    &#125;</span><br><span class="line">    for (i=0; i&lt;5; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%d\x20&quot;, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第二章 链式表</title>
      <link href="/2020/02/28/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E9%93%BE%E5%BC%8F%E8%A1%A8/"/>
      <url>/2020/02/28/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E9%93%BE%E5%BC%8F%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>顺序表中增加一个数据平均n/2，删除一个平均(n-1)/2</p><p><img data-src="http://www.zhaoxuanlang.cn/wp-content/uploads/2020/02/image-2.png" /></p><p>计算方法位100+（5-1）*2</p><p>线性表的顺序存储结构和线性表的链式存储结构分别是(B )。</p><p>A．顺序存取的存储结构、顺序存取的存储结构<br />B．随机存取的存储结构、顺序存取的存储结构<br />C．随机存取的存储结构、随机存取的存储结构<br />D．任意存取的存储结构、任意存取的存储结构</p><h3 id="答案解析"><strong>答案解析</strong></h3><p>顺序存储结构中，数据元素存放在一组地址连续的存储单元中，每个数据元素地址可通过公式LOC(ai)=LOC(a1)+(i-1)L计算得到，从而实现了随机存取。对于链式存储结构，要对某结点进行存取，都得从链的头指针指向的结点开始，这是一种顺序存取的存储结构。</p><p>顺序表是线性表的（ ）存储表示。 (2分)</p><ol type="1"><li>有序</li><li>连续</li><li>数组</li><li>顺序存取</li></ol><p>若长度为n的非空线性表采用顺序存储结构，在表的第i个位置插入一个数据元素的合法值应该是（ ）。 (2分)</p><ol type="1"><li>1≤i≤n</li><li>1≤i≤n+1</li><li>0≤i≤n-1</li><li>0≤i≤n</li></ol><p>若线性表最常用的操作是存取第i个元素及其前驱的值，则采用( )存储方式节省时间。 (2分)</p><ol type="1"><li>单链表</li><li>双向链表</li><li>单循环链表</li><li>顺序表</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据、数据元素、数据项、数据对象的介绍和理解</title>
      <link href="/2020/02/23/%E6%95%B0%E6%8D%AE%E3%80%81%E6%95%B0%E6%8D%AE%E5%85%83%E7%B4%A0%E3%80%81%E6%95%B0%E6%8D%AE%E9%A1%B9%E3%80%81%E6%95%B0%E6%8D%AE%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%90%86%E8%A7%A3/"/>
      <url>/2020/02/23/%E6%95%B0%E6%8D%AE%E3%80%81%E6%95%B0%E6%8D%AE%E5%85%83%E7%B4%A0%E3%80%81%E6%95%B0%E6%8D%AE%E9%A1%B9%E3%80%81%E6%95%B0%E6%8D%AE%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<figure><img data-src="https://img-blog.csdnimg.cn/20190618173532304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzMxNjU3ODg5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p>数据结构是相互之间存在一种或多种特定关系的数据元素的集合。</p><p>数据：是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的符号集合。数据不仅仅包括整形、实型等数值类型，还包括字符及声音、图像、视频等非数值类型。<br />数据，也就是符号，必须具备两个前提：<br />a.可以输入到计算机中<br />b.能被计算机程序处理<br />对于整型、实型等数值类型，可以进行数值计算。<br />对于字符数据类型，就需要非数值的处理。而声音、图像、视频等其实是可以通过编码的手段变成字符数据来处理的</p><p>数据元素：是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理。也被称为记录。<br />比如 畜类 牛、马、羊、鸡、猪、狗等动物当然就是畜类的数据元素。</p><p>数据项：一个数据元素可以由若干个数据项组成。<br />比如人这样的元素，可以有眼、耳、鼻、嘴等数据项，也可以有姓名、年龄、性别等数据项。<br />数据项是数据不可分割的最小单位。</p><p>数据对象**：是性质相同的数据元素的集合，是数据的子集。<br />什么叫性质相同呢？是指数据元素具有相同数量和类型的数据项，比如人 这个例子，都有姓名、生日、性别等相同的数据项。<br />既然数据对象是数据的子集，在实际应用中，处理的数据元素通常具有相同性质，在不产生混淆的情况下，我们将数据对象简称为数据。</p><p>数据结构<br />结构，简单的理解就是关系，比如分子结构，就是组成分子的原子之间的排列方式。严格带你说，结构是指各个组成部分相互搭配的排列的方式。在现实世界中，不同数据元素之间不是独立的，而是存在特定的关系，我们将这些关系成为 结构。<br />数据结构：是相互之间存在一种或者多种特定关系的数据元素的集合。</p><p>根据网上大佬的理解 可能会更直观一些：<br />假设有两张表，A表为人员表，B表为课程表， 表的格式如下：</p><p><img data-src="http://www.zhaoxuanlang.cn/wp-content/uploads/2020/02/image-1-1024x316.png" /></p><p>重点：</p><p>这两张表就是数据<br />而单独的一张表就称为数据对象，即人员表是一个数据对象，课程表也是一个数据对象<br />而每张表中的每一行就称为数据元素<br />而姓名，性别，身高，课程代号，课程名就称为数据项</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Install Goolge BBR on CentOS</title>
      <link href="/2019/10/31/install-goolge-bbr-on-centos/"/>
      <url>/2019/10/31/install-goolge-bbr-on-centos/</url>
      
        <content type="html"><![CDATA[<h2 id="centos安装谷歌bbr加速插件">CentOS安装谷歌BBR加速插件</h2><p>BBR (Bottleneck Bandwidth and RTT) is a new congestion control algorithm which is contributed to the Linux kernel TCP stack by Google. With BBR in place, a Linux server can get significantly increased throughput and reduced latency for connections. Besides, it's easy to deploy BBR because this algorithm requires only updates on the sender side, not in the network or on the receiver side.</p><p>In this article, I will show you how to deploy BBR on a Vultr CentOS 7 KVM server instance.</p><h3 id="prerequisites">Prerequisites</h3><ul><li>A Vultr CentOS 7 x64 server instance.</li><li>A <a href="https://www.vultr.com/docs/how-to-use-sudo-on-debian-centos-and-freebsd">sudo user</a>.</li></ul><h3 id="step-1-upgrade-the-kernel-using-the-elrepo-rpm-repository">Step 1: Upgrade the kernel using the ELRepo RPM repository</h3><p>In order to use BBR, you need to upgrade the kernel of your CentOS 7 machine to 4.9.0. You can easily get that done using the ELRepo RPM repository.</p><p>Before the upgrade, you can take a look at the current kernel:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><p>This command should output a string which resembles:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.10.0-514.2.2.el7.x86_64</span><br></pre></td></tr></table></figure><p>As you see, the current kernel is 3.10.0.</p><p>Install the ELRepo repo:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">sudo rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span><br></pre></td></tr></table></figure><p>Install the 4.9.0 kernel using the ELRepo repo:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum --enablerepo=elrepo-kernel install kernel-ml -y</span><br></pre></td></tr></table></figure><p>Confirm the result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa  grep kernel</span><br></pre></td></tr></table></figure><p>If the installation is successful, you should see <code>kernel-ml-4.9.0-1.el7.elrepo.x86_64</code> among the output list:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kernel-ml-4.9.0-1.el7.elrepo.x86_64</span><br><span class="line">kernel-3.10.0-514.el7.x86_64</span><br><span class="line">kernel-tools-libs-3.10.0-514.2.2.el7.x86_64</span><br><span class="line">kernel-tools-3.10.0-514.2.2.el7.x86_64</span><br><span class="line">kernel-3.10.0-514.2.2.el7.x86_64</span><br></pre></td></tr></table></figure><p>Now, you need to enable the 4.9.0 kernel by setting up the default grub2 boot entry.</p><p>Show all entries in the grub2 menu:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo egrep ^menuentry /etc/grub2.cfg  cut -f 2 -d \&#x27;</span><br></pre></td></tr></table></figure><p>The result should resemble:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CentOS Linux 7 Rescue a0cbf86a6ef1416a8812657bb4f2b860 (4.9.0-1.el7.elrepo.x86_64)</span><br><span class="line">CentOS Linux (4.9.0-1.el7.elrepo.x86_64) 7 (Core)</span><br><span class="line">CentOS Linux (3.10.0-514.2.2.el7.x86_64) 7 (Core)</span><br><span class="line">CentOS Linux (3.10.0-514.el7.x86_64) 7 (Core)</span><br><span class="line">CentOS Linux (0-rescue-bf94f46c6bd04792a6a42c91bae645f7) 7 (Core)</span><br></pre></td></tr></table></figure><p>Indexing starts at <code>0</code>. This means that the 4.9.0 kernel is located at <code>1</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo grub2-set-default `</span><br></pre></td></tr></table></figure><p>Reboot the system:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo shutdown -r now</span><br></pre></td></tr></table></figure><p>When the server is back online, log back in and rerun the uname command to confirm that you are using the correct Kernel:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><p>You should see the result as below:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4.9.0-1.el7.elrepo.x86_64</span><br></pre></td></tr></table></figure><h3 id="step-2-enable-bbr">Step 2: Enable BBR</h3><p>In order to enable the BBR algorithm, you need to modify the <code>sysctl</code> configuration as follows:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;net.core.default_qdisc=fq&#x27;  sudo tee -a /etc/sysctl.conf</span><br><span class="line">echo &#x27;net.ipv4.tcp_congestion_control=bbr&#x27;  sudo tee -a /etc/sysctl.conf</span><br><span class="line">sudo sysctl -p</span><br></pre></td></tr></table></figure><p>Now, you can use the following commands to confirm that BBR is enabled:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sysctl net.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure><p>The output should resemble:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.tcp_available_congestion_control = bbr cubic reno</span><br></pre></td></tr></table></figure><p>Next, verify with:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sysctl -n net.ipv4.tcp_congestion_control</span><br></pre></td></tr></table></figure><p>The output should be:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bbr</span><br></pre></td></tr></table></figure><p>Finally, check that the kernel module was loaded:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod  grep bbr</span><br></pre></td></tr></table></figure><p>The output will be similar to:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp_bbr                16384  0</span><br></pre></td></tr></table></figure><h3 id="step-3-optional-test-the-network-performance-enhancement">Step 3 (optional): Test the network performance enhancement</h3><p>In order to test BBR's network performance enhancement, you can create a file in the web server directory for download, and then test the download speed from a web browser on your desktop machine.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install httpd -y</span><br><span class="line">sudo systemctl start httpd.service</span><br><span class="line">sudo firewall-cmd --zone=public --permanent --add-service=http</span><br><span class="line">sudo firewall-cmd --reload</span><br><span class="line">cd /var/www/html</span><br><span class="line">sudo dd if=/dev/zero of=500mb.zip bs=1024k count=500</span><br></pre></td></tr></table></figure><p>Finally, visit the URL <code>http://[your-server-IP]/500mb.zip</code> from a web browser on your desktop computer, and then evaluate download speed.</p><p>That's all. Thank you for reading.</p><p>copyright Vultr.com</p><p>版权归Vultr.com所有</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建脚本</title>
      <link href="/2019/10/31/%E6%90%AD%E5%BB%BA%E8%84%9A%E6%9C%AC/"/>
      <url>/2019/10/31/%E6%90%AD%E5%BB%BA%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>一键搭建 VPN shadowsocks/搭建shadowsocksR的shell脚本，一键脚本适用Vultr上的和搬瓦工所有机型（CentOS、Ubuntu、Debian），搭建ss服务器支持所有客户端类型，本机你是iOS，Android，Windows，Mac，或者是Linux。一键脚本内容包括一键搭建shadowsocks/一键搭建shadowsocksR+一键开启bbr加速。</p><h2 id="什么是shadowsocks">什么是shadowsocks</h2><p>shadowsocks可以指一种SOCKS5的加密传输协议，也可以指基于这种加密协议的各种数据传输包。shadowsocks正常工作需要服务器端和客户端两端合作实现，首先，客户端（本机）通过ss（shadowsocks）对正常的访问请求进行SOCK5加密，将加密后的访问请求传输给ss服务器端，服务器端接收到客户端的加密请求后，解密得到原始的访问请求，根据请求内容访问指定的网站（例如Google，YouTube，Facebook，instagram等），得到网站的返回结果后，再利用SOCKS5加密并返回给客户端，客户端通过ss解密后得到正常的访问结果，于是就可以实现你直接访问该网站的“假象”。</p><p>为什么选择shadowsocks？不限终端（安卓，苹果，Windows，Mac都可用），流量便宜（服务器500G只要15元），方便（一键脚本，不需要专业知识）。</p><p>为什么要自己搭建ss/ssr？你也许会觉得买ss服务也很方便，但是你得要考虑以下几个问题。首先，买的ss服务，限制很多，终端可能只能同时在线2个，每个月就一点点流量可能价格却不便宜，有时候还被别人做手脚，流量跑的贼快；其次，别人收钱跑路怎么办？很多这种情况的；更重要的是，如第一个问题中描述的shadowsocks原理，如果有心人做了一点手脚，是可以得到你的访问记录的；而自己搭建ss/ssr服务，一键脚本也就10来分钟就可以搞定。</p><h2 id="一键脚本搭建ssssr支持系统版本">一键脚本搭建ss/ssr支持系统版本</h2><p>脚本系统支持：CentOS 6+，Debian 7+，Ubuntu 12+</p><p>注：这个脚本支持的系统版本是指ss服务器的版本（都没看过也没关系，不影响搭建），你本机是Windows、Mac、Linux，或者你想用手机端搭建ss/ssr服务器，安卓和苹果，都是可以的。</p><h2 id="服务器购买">服务器购买</h2><p>服务器推荐Vultr和搬瓦工，一是因为本脚本在这两家的所有VPS都做了测试，二是因为都是老牌VPS服务商，不怕跑路。</p><p><strong>Vultr：</strong><a href="https://www.vultr.com/promo25b/?ref=7371675">https://www.vultr.com</a>，最低月付2.5刀/500GB流量每月，推荐使用PayPal绑定Visa/Master信用卡，支持支付宝付款<br /><strong>更新注意:</strong> Vultr 服务器2.5美元/月的不提供ipv4地址，不能正常使用，所以只能购买5美元/月的了</p><p><strong>搬瓦工：</strong><a href="https://bwh1.net/aff.php?aff=32798">https://bwh1.net</a>，可以访问登录，但是注册账号的时候需要全局才能成功<br />新用户注册链接：<a href="https://bwh1.net/aff.php?aff=32798">https://bwh1.net/aff.php?aff=32798</a>，支持PayPal/支付宝/Visa/Master付款，最低年付19.99刀/500GB流量每月(已补货，之前售空了)</p><p><strong>Vultr 官方发布新活动了，新用户激活账户就送 25 美元！参与推特活动可再获得 3 美元！</strong><br />1、送 25 美元注册地址：<a href="https://www.vultr.com/promo25b/?ref=8290178">https://www.vultr.com/promo25b/?ref=7371675</a><br />需要外币信用卡（Visa 卡等）或 Paypal 账户（可绑定银联卡）才可参与活动，赠送部分有效期一年<br />2、无 25 美元注册地址：<a href="https://www.vultr.com/promo25b/?ref=8290178">https://www.vultr.com/?ref=8290178</a><br />支付宝充值是没有优惠的，想使用 vultr 的请从上面地址注册<br />3、推特送 3 美元活动地址：<a href="https://my.vultr.com/promo/">https://my.vultr.com/promo/</a><br />充值账户后才可以参与这个推特活动<br /><strong>注意：</strong>此活动仅限从未注册过 Vultr 的参加，个人注册多个账户可能会被没收赠送金额！<br />如果自己从未注册过这一家，但是还是没有赠送，可以登录后点击左侧 Support 联系客服进行处理！</p><figure><img data-src="http://www.yehes.com/wp-content/uploads/2018/09/77c76f11gy1fs0lq2qaw5j211y0hlad4.jpg" alt="一键脚本轻松搭建SS教程/搭建SSR并开启BBR加速-夜河资源网" /><figcaption aria-hidden="true">一键脚本轻松搭建SS教程/搭建SSR并开启BBR加速-夜河资源网</figcaption></figure><figure><img data-src="http://www.yehes.com/wp-content/uploads/2018/09/77c76f11gy1fs0lri8uh4j211t0hkdjo.jpg" alt="一键脚本轻松搭建SS教程/搭建SSR并开启BBR加速-夜河资源网" /><figcaption aria-hidden="true">一键脚本轻松搭建SS教程/搭建SSR并开启BBR加速-夜河资源网</figcaption></figure><h2 id="一键搭建ss搭建ssr服务">一键搭建SS/搭建SSR服务</h2><p>注意，shadowsocks/shadowsocksR这两个只需要搭建一个就可以了！！！！SS与SSR之间的比较一直是各有各的说法，王婆卖瓜自卖自夸。</p><h3 id="一键搭建shadowsocks">一键搭建shadowsocks</h3><p>在购买VPS并用PuTTY连接上你刚购买的VPS后，你将看到如下图所示的界面：</p><figure><img data-src="http://www.yehes.com/wp-content/uploads/2018/09/77c76f11gy1fs0jnt59zlj20id0ciaao.jpg" alt="一键脚本轻松搭建SS教程/搭建SSR并开启BBR加速-夜河资源网" /><figcaption aria-hidden="true">一键脚本轻松搭建SS教程/搭建SSR并开启BBR加速-夜河资源网</figcaption></figure><p>1.下载一键搭建ss脚本文件，只需要执行一次，卸载ss后也不需要重新下载</p><p>git clone https://github.com/flyzy2005/ss-fly</p><p>如果提示bash: git: command not found，则先安装git：</p><p>Centos执行这个：</p><p>yum -y install git</p><p>Ubuntu/Debian执行这个：</p><p>apt-get -y install git</p><p>2.运行搭建ss脚本代码</p><p>ss-fly/ss-fly.sh -i password 1024</p><p>其中password换成你要设置的shadowsocks的密码即可，最好只包含字母+数字，一些特殊字符可能会导致冲突。而第二个参数1024是端口号，也可以不加，不加默认是1024。</p><figure><img data-src="http://www.yehes.com/wp-content/uploads/2018/09/77c76f11gy1fs0jrpq7vuj20id0cijs9.jpg" alt="一键脚本轻松搭建SS教程/搭建SSR并开启BBR加速-夜河资源网" /><figcaption aria-hidden="true">一键脚本轻松搭建SS教程/搭建SSR并开启BBR加速-夜河资源网</figcaption></figure><p>界面如下就表示一键搭建ss成功了：</p><figure><img data-src="http://www.yehes.com/wp-content/uploads/2018/09/77c76f11gy1fs0juvuqu5j20id08iwf0.jpg" alt="一键脚本轻松搭建SS教程/搭建SSR并开启BBR加速-夜河资源网" /><figcaption aria-hidden="true">一键脚本轻松搭建SS教程/搭建SSR并开启BBR加速-夜河资源网</figcaption></figure><p>注：如果需要改密码或者改端口，只需要重新再执行一次搭建ss脚本代码就可以了，或者修改/etc/shadowsocks.json这个配置文件。</p><p>3.相关ss操作</p><p>修改配置文件：vim /etc/shadowsocks.json 停止ss服务：ssserver -c /etc/shadowsocks.json -d stop 启动ss服务：ssserver -c /etc/shadowsocks.json -d start 重启ss服务：ssserver -c /etc/shadowsocks.json -d restart</p><p>4.卸载ss服务</p><p>ss-fly/ss-fly.sh -uninstall</p><h3 id="一键搭建shadowsocksr">一键搭建shadowsocksR</h3><p>再次提醒，如果安装了SS，就不需要再安装SSR了，如果要改装SSR，请按照上一部分内容的教程先卸载SS！！！</p><p>1.下载一键搭建ssr脚本(只需要执行一次，卸载ssr后也不需要重新执行)，此步骤与一键搭建ss一致</p><p>git clone https://github.com/flyzy2005/ss-fly</p><p>2.运行搭建ssr脚本代码</p><p>ss-fly/ss-fly.sh -ssr</p><p>3.输入对应的参数</p><p>执行完上述的脚本代码后，会进入到输入参数的界面，包括服务器端口，密码，加密方式，协议，混淆。可以直接输入回车选择默认值，也可以输入相应的值选择对应的选项：</p><figure><img data-src="http://www.yehes.com/wp-content/uploads/2018/09/77c76f11gy1fs0k8so58bj20ll0ipjre.jpg" alt="一键脚本轻松搭建SS教程/搭建SSR并开启BBR加速-夜河资源网" /><figcaption aria-hidden="true">一键脚本轻松搭建SS教程/搭建SSR并开启BBR加速-夜河资源网</figcaption></figure><p>全部选择结束后，会看到如下界面，就说明搭建ssr成功了：</p><p>Congratulations, ShadowsocksR server install completed! Your Server IP        :你的服务器ip Your Server Port      :你的端口 Your Password         :你的密码 Your Protocol         :你的协议 Your obfs             :你的混淆 Your Encryption Method:your_encryption_method Welcome to visit:https://shadowsocks.be/9.html Enjoy it!</p><p>4.相关操作ssr命令</p><p>启动：/etc/init.d/shadowsocks start 停止：/etc/init.d/shadowsocks stop 重启：/etc/init.d/shadowsocks restart 状态：/etc/init.d/shadowsocks status 配置文件路径：/etc/shadowsocks.json 日志文件路径：/var/log/shadowsocks.log 代码安装目录：/usr/local/shadowsocks</p><p>5.卸载ssr服务</p><p>./shadowsocksR.sh uninstall</p><p>文件配置方法：</p><p>{ "server":"0.0.0.0", "server_port":4431, "local_port":1080, "password":"密码", "timeout":600, "method":"aes-256-cfb" }</p><p>多端口密码配置如下</p><p>{ "server":"0.0.0.0", "local_port":1080, "port_password": { "端口1": "密码1", "端口2": "密码2" }, "timeout":600, "method":"aes-256-cfb" }</p><h2 id="一键开启bbr加速">一键开启BBR加速</h2><p>BBR是Google开源的一套内核加速算法，可以让你搭建的shadowsocks/shadowsocksR速度上一个台阶，本一键搭建ss/ssr脚本支持一键升级最新版本的内核并开启BBR加速。</p><p>BBR支持4.9以上的，如果低于这个版本则会自动下载最新内容版本的内核后开启BBR加速并重启，如果高于4.9以上则自动开启BBR加速，执行如下脚本命令即可自动开启BBR加速：</p><p>ss-fly/ss-fly.sh -bbr</p><figure><img data-src="http://www.yehes.com/wp-content/uploads/2018/09/77c76f11gy1fs0kbjmcz5j20pf07ma9y.jpg" alt="一键脚本轻松搭建SS教程/搭建SSR并开启BBR加速-夜河资源网" /><figcaption aria-hidden="true">一键脚本轻松搭建SS教程/搭建SSR并开启BBR加速-夜河资源网</figcaption></figure><p>装完后需要重启系统，输入y即可立即重启，或者之后输入reboot命令重启。</p><p>判断BBR加速有没有开启成功。输入以下命令：</p><p>sysctl net.ipv4.tcp_available_congestion_control</p><p>如果返回值为：</p><p>net.ipv4.tcp_available_congestion_control = bbr cubic reno</p><p>后面有bbr，则说明已经开启成功了。</p><h2 id="客户端shadowsocksshadowsockr登录使用">客户端shadowsocks/shadowsockR登录使用</h2><p><strong>shadowsocks客户端下载地址：</strong><br /><strong>Windows客户端:</strong> <a href="https://github.com/shadowsocks/shadowsocks-windows/releases">https://github.com/shadowsocks/shadowsocks-windows/releases</a><br /><strong>Mac客户端:</strong> <a href="https://github.com/shadowsocks/ShadowsocksX-NG/releases">https://github.com/shadowsocks/ShadowsocksX-NG/releases</a><br /><strong>Linux客户端:</strong> <a href="https://github.com/shadowsocks/shadowsocks-qt5/wiki/Installation">https://github.com/shadowsocks/shadowsocks-qt5/wiki/Installation</a><br /><strong>Android/安卓客户端：</strong><a href="https://github.com/shadowsocks/shadowsocks-android/releases">https://github.com/shadowsocks/shadowsocks-android/releases</a><br /><strong>iOS客户端：</strong>商店搜索Wingy/shadowsocks(美国地区)下载</p><p>以Windows为例，依次填入服务器IP，服务器端口，密码，保存配置</p><figure><img data-src="http://www.yehes.com/wp-content/uploads/2018/09/77c76f11gy1fs0jj5rdzij20ct0cet8z.jpg" alt="一键脚本轻松搭建SS教程/搭建SSR并开启BBR加速-夜河资源网" /><figcaption aria-hidden="true">一键脚本轻松搭建SS教程/搭建SSR并开启BBR加速-夜河资源网</figcaption></figure><p>在状态栏右击shadowsocks，勾选开机启动和启动系统代理，在系统代理模式中选择PAC模式，服务器-&gt;编辑服务器，一键安装shadowsocks的脚本默认服务器端口是1024，加密方式是aes-256-cfb，密码是你设置的密码，ip是你自己的VPS ip，保存即可。</p><p><strong>shadowsockR客户端下载地址：<br />Windows客户端:</strong> <a href="https://github.com/shadowsocksrr/shadowsocksr-csharp/releases">https://github.com/shadowsocksrr/shadowsocksr-csharp/releases</a><strong>Mac客户端:</strong> <a href="https://github.com/flyzy2005/ss-ssr-clients/raw/master/ssr/SS-X-R.zip">https://github.com/flyzy2005/ss-ssr-clients/raw/master/ssr/SS-X-R.zip</a><strong>Linux客户端:</strong> <a href="https://github.com/shadowsocks/shadowsocks-qt5/wiki/Installation">https://github.com/shadowsocks/shadowsocks-qt5/wiki/Installation</a>**<br />Android/安卓客户端：<strong><a href="https://github.com/shadowsocksrr/shadowsocksr-android/releases">https://github.com/shadowsocksrr/shadowsocksr-android/releases</a></strong><br />iOS客户端：**商店搜索Wingy/shadowsocks(美国地区)下载</p><p>以Windows为例：</p><figure><img data-src="http://www.yehes.com/wp-content/uploads/2018/09/77c76f11gy1fs0kfp1oulj20ie0dyglr.jpg" alt="一键脚本轻松搭建SS教程/搭建SSR并开启BBR加速-夜河资源网" /><figcaption aria-hidden="true">一键脚本轻松搭建SS教程/搭建SSR并开启BBR加速-夜河资源网</figcaption></figure><p>在状态栏右击shadowsocksR，在系统代理模式中选择PAC模式，再左击两次状态栏的图标打开编辑服务器界面，如上图所示，按照自己的服务器配置填充内容，保存即可。</p><p>一键脚本GitHub地址：<a href="https://github.com/flyzy2005/ss-fly">https://github.com/flyzy2005/ss-fly</a><br />shadowsocks项目GitHub：<a href="https://github.com/shadowsocks">https://github.com/shadowsocks</a><br />shadowsocksR项目GitHub：<a href="https://github.com/shadowsocksrr">https://github.com/shadowsocksrr</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Kexue上网查资料</title>
      <link href="/2019/10/10/kexue%E4%B8%8A%E7%BD%91%E6%9F%A5%E8%B5%84%E6%96%99/"/>
      <url>/2019/10/10/kexue%E4%B8%8A%E7%BD%91%E6%9F%A5%E8%B5%84%E6%96%99/</url>
      
        <content type="html"><![CDATA[<p>在管控越来越严的形势下，以前的很多软件都不能再用了，所以自己动手丰衣足食才是最好的方法。</p><p>所需软件：1.<a href="http://链接：https://pan.baidu.com/s/1dNTBc5rHUXoVC9F5Hh3ttA">Xshell</a> 提取码opph 2.<a href="http://链接：https://pan.baidu.com/s/1NJmhSbLI3SIjRJVgvxKQlg">shadowsocksr</a> 2o4c</p><h2 id="一购买服务器">一：购买服务器</h2><p>首先我们需要一个jingwai服务器，我是在 <a href="https://www.vultr.com/?ref=7743951">vultr</a> 购买的。注册账号后首先选择自己需要的服务器。</p><p><img data-src="http://www.zhaoxuanlang.cn/wp-content/uploads/2019/10/image-1024x441.png" /></p><p>选择第一个</p><p>下边的地区根据自己的需求选择即可。</p><p><img data-src="http://www.zhaoxuanlang.cn/wp-content/uploads/2019/10/image-1-1024x641.png" /></p><p>下边的大小选最小的就可以满足需求</p><p>之后部署即可。</p><p><img data-src="http://www.zhaoxuanlang.cn/wp-content/uploads/2019/10/image-2-1024x368.png" /></p><h2 id="二连接到服务器">二：连接到服务器</h2><p>打开xshell，输入刚刚部署的服务器ip后他会自动连接。现在会有两种可能的结果</p><p><img data-src="http://www.zhaoxuanlang.cn/wp-content/uploads/2019/10/image-3.png" /></p><p>一直显示连接中</p><p><img data-src="http://www.zhaoxuanlang.cn/wp-content/uploads/2019/10/image-4.png" /></p><p>瞬间连接上</p><p>若是2，那么恭喜你，你的服务器可以用。若是1，现在就需要再去刚刚那个网站，把刚买的fwq销毁掉再买一个，知道出现2即可</p><h2 id="三配置">三：配置</h2><p>这一步很简单，首先使用 <code>wget --no-check-certificate https://freed.ga/github/shadowsocksR.sh; bash shadowsocksR.sh</code> 自动安装</p><p>然后安装加速插件，先使用wget -N --no-check-certificate https://freed.ga/kernel/ruisu.sh &amp;&amp; bash ruisu.sh更换ubantu版本</p><p>再使用wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh &amp;&amp; bash serverspeeder-all.sh安装加速</p><p><img data-src="http://www.zhaoxuanlang.cn/wp-content/uploads/2020/02/image.png" /></p><p>四：使用</p><p>使用刚刚下载的第二个软件输入内容即可</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>简易建站教程</title>
      <link href="/2019/09/05/%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BD%91%E9%A1%B5/"/>
      <url>/2019/09/05/%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BD%91%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<p>放完暑假开学后回到班里，偶然看到同学在搞个人网页。由于我之前在Wix上有过一个个人主页，但是那个属于利用他网站给的现成的资源，只需要自己写文章即可。做为一个学计算机的学生，我当然不仅仅满足于写文章，所以我打算搭建一个属于自己的网页</p><h3 id="第一步购买所需原料">第一步：购买所需原料</h3><p>想要自己的网页24小时可用，靠自己的电脑肯定是不够的，所以就需要一个云主机。我这里购买的是腾讯云的主机，因为他有学生优惠，一年的主机只要120，加16元就可以买一年的域名，简直完美符合我的需求。买服务器时我建议买三个月以上时长的，原因后边会讲。</p><p><a href="https://sp0.baidu.com/9q9JcDHa2gU2pMbgoY3K/adrc.php?t=06KL00c00fALeK30dWk-0awHAsKpIgKI00000ryI5NC00000vOPxvZ.THLnvVAvdnm0UWdBmy-bIfK15yuWuAc4uj9-nj0snAnvPWc0IHdKrHnzP17jrj0YnRDzPWRkfRFanj6znYc1PDcvnWc3f6K95gTqFhdWpyfqn1c3PHRsPHRkrausThqbpyfqnHm0uHdCIZwsT1CEQvP_ULNbQMw-UhP-UMf8mvqVQv7WIaqWmydsIgnOuMFEUNPEIgFWuHdMILGWIz3zPHD4PHb3QWcdnHbdrH68nWRkrHR4raudIAdxUyNbpgNV5yPsuaudIAdxpyfquLIlmLT8nWRkrHR4ra3zPHD4PHb3QWcdnHbdrH60mLFW5HR3rjRv&amp;tpl=tpl_11534_19968_16032&amp;l=1513987557&amp;attach=location%3D%26linkName%3D%25E6%2596%2587%25E5%25AD%2597%25E5%2588%2597%25E8%25A1%25A8-%25E7%25AC%25AC1%25E8%25A1%258C%25E6%2596%2587%25E6%259C%25AC%26linkText%3D%255B%25E4%25BA%2591%252B%25E6%25A0%25A1%25E5%259B%25AD%255D%25E5%25AD%25A6%25E7%2594%259F%25E4%25BA%2591%25E6%259C%258D%25E5%258A%25A1%25E5%2599%25A8%25E4%25BD%2593%25E9%25AA%258C%25E5%25A5%2597%25E9%25A4%259010%25E5%2585%2583%252F%25E6%259C%2588%26xp%3Did(%2522m3285505518_canvas%2522)%252FDIV%255B1%255D%252FDIV%255B2%255D%252FDIV%255B1%255D%252FUL%255B1%255D%252FLI%255B1%255D%252FA%255B1%255D%26linkType%3D%26checksum%3D84&amp;ie=utf-8&amp;f=8&amp;tn=baidu&amp;wd=%E8%85%BE%E8%AE%AF%E4%BA%91&amp;rqlang=cn&amp;inputT=1812">学生优惠页面</a></p><p><img data-src="http://www.zhaoxuanlang.cn/wp-content/uploads/2019/09/image-1024x401.png" /></p><p>在买域名之前需要先去看看自己想要注册的域名是否被注册了，这一步我们可以在很多网站完成，但是为了方便我还是选择<a href="https://dnspod.cloud.tencent.com/">腾讯云</a>。其实阿里云的域名会稍微便宜一点，如果想省钱可以买阿里云的。</p><p><img data-src="http://www.zhaoxuanlang.cn/wp-content/uploads/2019/09/image-1-1024x679.png" /></p><p>可以看到有的已经被注册了，这时就需要换一个名字搜索...</p><p>域名后的这个.xxx不一样，价格也不太一样。.com是国际的域名后缀，其他的就是各国分配的后缀。有的很便宜的是某些小国家的域名，我还是建议买咱们中国的.cn，比.com便宜一些还很靠谱，知名度也高。</p><h2 id="第二步域名备案-服务器的准备工作">第二步：域名备案， 服务器的准备工作</h2><p>在完成第一步后我们应该现在有一个云服务器和一个域名了。首先我们要域名备案，由于管局要求，国内的服务器搭建的网址都需要备案。在备案时需要一个备案授权码，但是这个授权码腾讯云只给三个月以上时长的服务器生成，所以是之前建议买超过三个月的服务器。我当时就是因为买了一个月的，这时还得再去续费才能用。</p><p>备案我建议用腾讯云的微信小程序，流程非常快，只需要跟着要求走就可以，我是不到一周就通过了，他官方给的时间是20天以内。不备案你的网页就不能上线，所以我还是推荐尽早完成。</p><p>备案后还需要进行域名解析，填完保存就可以。</p><p><img data-src="http://www.zhaoxuanlang.cn/wp-content/uploads/2019/09/image-3-1024x538.png" /></p><p>记录值填你买的服务器的公网IP</p><p>接下来我们需要进行服务器准备，进入控制台会看到这个页面,点登录进入控制台。我在这用的是宝塔的面板，安装教程可以去他<a href="https://www.bt.cn/">官网</a>找到<img data-src="http://www.zhaoxuanlang.cn/wp-content/uploads/2019/09/PTQ8FE273SESX26I.png" /></p><p>安装完成宝塔后在服务器后台页面会有一个网址，用户名和密码。在浏览器打开网址并用用户名密码登录后进入宝塔的控制台。第一次登录他会让你安装框架，安装推荐的就可以，然后等他安装好。</p><p>这时我们需要配置自己网页，在宝塔面板左边找到网站,选择添加站点，像图中这样配置，用户名和密码都可以自己写，只要能记住就行。</p><p><img data-src="http://www.zhaoxuanlang.cn/wp-content/uploads/2019/09/image-2-1024x566.png" /></p><p>等待的时候我们还需要去网上下载一个工具Xshell和Xftp。可以自行百度也可以用我这个<a href="https://pan.baidu.com/s/1Tu8UMCjk2_cH114imOxbRQ">版本</a><br />提取码：gwej ，无需安装，只要解压出来就可以。这两个工具可以让你连接到服务器和上传文件更加方便。</p><h2 id="第三步网站建设">第三步：网站建设</h2><p>现在你应该已经能通过www.你的域名.xx进入你的网页了，它会提示你当前页是宝塔自动生成的，这时我们需要上传自己的网页。用之前下载的Xftp或宝塔面板的文件页面都可以</p><p><img data-src="http://www.zhaoxuanlang.cn/wp-content/uploads/2019/09/image-4-832x1024.png" /></p><p>Xftp设置页面</p><p>在Xftp中Host填服务器公网IP，下边username 和password都填服务器管理员的账号密码</p><p><img data-src="http://www.zhaoxuanlang.cn/wp-content/uploads/2019/09/image-5-1024x627.png" /></p><p>进www文件夹里wwwroot里你域名那个文件夹</p><p>现在你的文件夹里应该只有两个html，我们需要把这两个文件都删了，把你想上传的网页放到这个文件夹里就可以，但记得把网页名字改成index</p><p>到此，我们网站的建设就完成了。下边我还要介绍一下worldpress的安装。</p><h2 id="第四步worldpress的安装">第四步：worldpress的安装</h2><p>首先需要去worldpress官网<a href="https://cn.wordpress.org/download/">下载</a>组件，下载后解压到刚刚的域名文件夹里。</p><p>现在如果打开网页，如果发现他提示php版本过低，就去宝塔面板里的软件商店安装最新php并禁用你当前版本的php即可</p><p>现在你应该进入了worldpress的设置界面，按着他说的进行就可以，只有一步，你需要在数据库的地方填入刚刚宝塔设置网页时的用户名和密码。</p><p>现在你有了一个属于自己的world press网页！</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
